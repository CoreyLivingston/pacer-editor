{"version":3,"sources":["pages/Home.js","utils/hexstring.js","utils/misc.js","pacer/constants.js","pacer/sysex.js","utils/ports.js","pacer/utils.js","components/DumpSysex.js","components/Midi.js","components/PortsGrid.js","utils/midi.js","pages/Debug.js","components/PresetSelector.js","components/ControlSelector.js","components/ControlStepsEditor.js","components/ControlModeEditor.js","components/PresetNameEditor.js","utils/state.js","components/UpdateMessages.js","pages/Preset.js","pages/Monitor.js","components/Footer.js","pages/Global.js","pages/DumpDecoder.js","components/MidiSettingsEditor.js","pages/PresetMidi.js","components/Download.js","components/DownloadJSON.js","pages/Patch.js","components/PresetOverview.js","pages/Overview.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","target","rel","src","alt","Component","h","v","undefined","str","len","char","s","c","n","length","padZero","toString","toUpperCase","hs","data","Array","from","map","join","fromHexString","string","sep","replace","Uint8Array","i","parseInt","substr","isVal","sortObject","obj","arr","prop","hasOwnProperty","push","key","value","sort","b","localeCompare","dropOverlayStyle","position","top","right","bottom","left","paddingTop","background","textAlign","color","fontSize","PACER_MIDI_INPUT_PORT_NAME","SYSEX_SIGNATURE","SYSEX_HEADER","COMMAND_SET","COMMAND_GET","TARGET_PRESET","TARGETS","_TARGETS","Object","defineProperty","CONTROL_NAME","CONTROL_STOMPSWITCH_1","CONTROL_STOMPSWITCH_6","CONTROL_STOMPSWITCH_A","CONTROL_FOOTSWITCH_4","CONTROL_EXPRESSION_PEDAL_1","CONTROL_EXPRESSION_PEDAL_2","CONTROL_MIDI","CONTROL_ALL","CONTROLS","_CONTROLS","CONTROLS_FULLNAME","1","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","54","55","126","127","CONTROLS_WITH_SEQUENCE","STOMPSWITCHES_TOP","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_CTRL_OFF","MSG_TYPES","_MSG_TYPES","MSG_TYPES_SHORT_NAMES","_MSG_TYPES_SHORT_NAME","MSG_TYPES_FULLNAME_SW","_MSG_TYPES_FULLNAME_S","MSG_TYPES_FULLNAME_SW_SORTED","MSG_TYPES_FULLNAME_MIDI_SORTED","_MSG_TYPES_FULLNAME_E","_MSG_TYPES_FULLNAME_M","NOT_USED","MSG_TYPES_DATA_HELP","_MSG_TYPES_DATA_HELP","COLORS","0","2","3","4","5","6","7","8","9","10","11","12","COLORS_HTML","CONTROL_MODE_ELEMENT","CONTROL_MODES","_CONTROL_MODES","CONTROL_MODES_SHORT_NAME","_CONTROL_MODES_SHORT_","SINGLE_PRESET_EXPECTED_BYTES","SYSEX_START","SYSEX_END","CONTROLS_DATA","CMD","TGT","IDX","OBJ","ELM","isObject","item","isArray","mergeDeep","_len","arguments","sources","_key","source","shift","assign","apply","concat","checksum","bytes","reduce","previousValue","currentValue","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","console","warn","String","fromCharCode","slice","getPresetName","steps","e","index","config","channel","msg_type","active","getControlStep","mode_cfg","control_mode","getControlMode","led_cfg","data_len","step","cfg","d","getControlLED","getMidiSetting","parseSysexDump","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","log","requestAllPresets","msg","cs","requestPreset","presetIndex","requestPresetObj","controlId","getControlUpdateSysexMessages","forceUpdate","toConsumableArray","mode","control_mode_changed","buildControlModeSysex","msgs","_arr","keys","_i","changed","buildControlStepSysex","_arr2","_i2","led_changed","led_midi_ctrl","led_active_color","led_inactive_color","led_num","buildControlStepLedSysex","getMidiSettingUpdateSysexMessages","settings","_arr3","_i3","setting","buildMidiSettingsSysex","portById","id","p","WebMidi","inputs","find","outputs","inputById","outputById","presetIndexToXY","ii","Math","floor","MidiTable","_ref","colSpan","t","Note","MidiSettings","_ref2","DumpSysex_MidiTable","ControlTable","_ref3","c0","c1","Controls","_ref4","controls","DumpSysex_ControlTable","Preset","_ref5","DumpSysex_Controls","DumpSysex_MidiSettings","Presets","_ref6","DumpSysex_Preset","DumpSysex","_ref7","DumpSysex_Presets","Midi","state","input","output","pacerPresent","connectInput","port","_this","props","onMidiInputEvent","hasListener","messageType","addListener","onInputConnection","name","disconnectInput","removeListener","onInputDisconnection","connectOutput","setState","onOutputConnection","disconnectOutput","port_id","produce","draft","pacerOutputConnected","onOutputDisconnection","autoConnectInput","autoConnect","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","type","match","RegExp","err","return","autoConnectOutput","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","registerInputs","r","only","r2","filter","findIndex","registerOutputs","unRegisterInputs","unRegisterOutputs","handleMidiConnectEvent","group","groupEnd","togglePort","prev","midiOn","portsGrouped","g","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","selected","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","this","react","portsRenderer","children","defaultProps","classname","PortsGrid","groupedPorts","clickHandler","react_switch_default","onChange","checked","height","width","MESSAGE","128","144","160","176","192","208","224","CONTROLER","32","33","34","36","37","38","39","40","42","43","44","45","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","91","92","93","94","95","96","97","98","99","100","101","120","121","122","123","124","125","outputIsPacer","portId","batchMessages","callback","callbackBusy","wait","timeout","messages","clearTimeout","event","setTimeout","replacerDec2Hex","toSysExMessage","Debug","bytesExpected","customMessage","showBusy","_ref$busyMessage","busy","busyMessage","_ref$bytesExpected","_ref$bytesReceived","bytesReceived","onBusy","handleMidiInputEvent","m","sendSysex","out","updateCustomMessage","getCustomMessageData","sendCustomMessage","sendMessage","_this2","_this$state","hex_msg","JSON","stringify","Midi_Midi","components_PortsGrid","onClick","disabled","size","placeholder","src_components_DumpSysex","Selector","hasData","PresetSelector","currentPreset","PresetSelector_Selector","letter","digit","xy","charCodeAt","Control","ControlSelector","currentControl","ControlSelector_Control","LEDMidi","current_value","LEDColor","LEDNum","MidiNote","note","Step","d0","d1","d2","updateCallback","ControlStepsEditor_MidiNote","ControlStepsEditor_LEDColor","ControlStepsEditor_LEDNum","ControlStepsEditor_LEDMidi","ControlStepsEditor","onStepUpdate","stepIndex","dataType","dataIndex","onUpdate","ControlStepsEditor_Step","ControlModeEditor","PresetNameEditor","onNameUpdate","updateMessageName","updateMessages","buildPresetNameSysex","UpdateMessages","getOwnPropertyNames","presetId","ctrlType","j","ctrl","updateMessage","setAutoFreeze","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","clearData","onChangeFile","file","files","readFiles","onInputFile","inputOpenFileRef","current","click","onDragEnter","dropZoneActive","onDragLeave","onDrop","selectPreset","readPacer","selectControl","updatePresetName","updateControlStep","startsWith","updateControlMode","copyPresetFrom","presetIdFrom","presetIdTo","forEach","parse","updatePacer","React","createRef","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","t0","Response","arrayBuffer","t1","sent","stop","_x2","_this3","_this$state2","showEditor","es","disableClick","style","src_components_PresetSelector","ref","display","components_PresetNameEditor","src_components_ControlSelector","src_components_ControlStepsEditor","src_components_ControlModeEditor","debug","components_UpdateMessages","MAX_MESSAGES","Monitor","unshift","pop","parseMidi","info2","info3","messageCode","velocity","controlNumber","controlValue","program","pitchBend","pitchBendMultiplier","Footer","Global","marginTop","DumpDecoder","hideBusy","delay","Setting","MidiSettingsEditor_MidiNote","MidiSettingsEditor","onSettingUpdate","settingIndex","MidiSettingsEditor_Setting","PresetMidi","updateMidiSettings","src_components_MidiSettingsEditor","Download","handleClick","url","window","URL","createObjectURL","Blob","filename","addTimestamp","now","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","shadowlink","document","download","body","appendChild","removeChild","revokeObjectURL","label","DownloadJSON","encodeURIComponent","Patch","accumulator","element","buffer","bin_index","set","sendPatch","stripManufacturer","splitDump","status","severity","q","QueryString","location","search","show","components_Download","components_DownloadJSON","Message","hexDisplay","used","colorOn","colorOff","displayColor","PresetOverview_Message","backgroundColor","title","control","PresetOverview_Step","extControls","PresetOverview_Control","MidiSetting","PresetOverview_MidiSetting","PresetOverview_Controls","preset","midi","hasMidiConfig","PresetOverview_MidiSettings","_ref8","PresetOverview_Preset","PresetOverview","_ref9","PresetOverview_Presets","Overview","toggleBase","decBase","toggleExtControls","components_PresetOverview","MenuLink","to","activeOnlyWhenExact","Route","path","exact","Link","NoMatch","App","progress","_ref3$busy","_ref3$busyMessage","_ref3$bytesExpected","_ref3$bytesReceived","round","HashRouter","App_MenuLink","Switch","render","src_pages_Home","src_pages_Overview","src_pages_Preset","pages_PresetMidi","pages_Global","src_pages_Patch","src_pages_Monitor","src_pages_DumpDecoder","src_pages_Debug","component","src_components_Footer","Boolean","hostname","noop","error","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51184d2c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Home.css\";\n\nclass Home extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content home\">\n\n                <h1>Requirements</h1>\n\n                <div className=\"doc\">\n                    <p>This editor requires a browser that support\n                        the <a href=\"http://webaudio.github.io/web-midi-api/\" target=\"_blank\" rel=\"noopener noreferrer\">Web MIDI API</a>.</p>\n                    <p>Currently, only <span className=\"strong\">Chrome</span> and <span className=\"strong\">Opera</span> support this standard.\n                        This application will therefore <span className=\"italic\">not</span> work in Firefox, Safari, IE or Edge.</p>\n                    <p>This editor does not work on iPad or Android tablet either.</p>\n                </div>\n\n                <h1>Limitations</h1>\n\n                <div className=\"doc\">\n                    <p>The current version of this editor isn't able to edit the Global configuration of the Pacer. This is planned for a future release.</p>\n                    <p>This editor is provided as-is, without warranty of any kind, express or implied. If you encounter a bug, please fill a bug report with <a href=\"https://github.com/francoisgeorgy/pacer-editor/issues/new\" target=\"_blank\" rel=\"noopener noreferrer\">this form</a>.</p>\n                </div>\n\n                <h1>Connecting your Pacer</h1>\n                <div className=\"doc\">\n                    <p>1. Make sure your Pacer is connected to your computer and switched-on.</p>\n                    <p>2. In the application, check the MIDI settings.</p>\n                    <p>You need to enable the following input and output ports:</p>\n                    <p><span className=\"bold\" >Mac</span>:</p>\n                    <img src=\"ports-mac.png\" alt=\"\" />\n                    <p><span className=\"bold\" >Windows</span>:</p>\n                    <img src=\"ports-windows.png\" alt=\"\" />\n                    <p>This editor listen on all MIDI ports. A future version may offer the possibility to choose a specific port.</p>\n                </div>\n\n                <h1>Editing presets</h1>\n                <div className=\"doc\">\n                    <p>The preset <span className=\"strong\">CUR</span> is the <span className=\"italic fluo\">current</span> preset.\n                        When you edit preset <span className=\"strong\">CUR</span> your changes are immediately applied.</p>\n                    <p>When you edit any other presets, you edit the <span className=\"fluo\">saved</span> settings of the preset\n                        and your changes will only be applied when you <span className=\"fluo\">load</span> this preset in the Pacer.</p>\n\n                    <p>It is currently not possible to load the preset from this editor.</p>\n\n                    <div>\n                        <h3>Example 1:</h3>\n                        <p>The currently loaded preset (CUR) is preset <span className=\"strong\">A5</span>.</p>\n                        <p>You edit the preset <span className=\"strong\">A5</span>.</p>\n                        <p>After you save your modifications, the display will show dots. That means the current preset does not reflect the saved preset anymore.\n                            You have to <span className=\"fluo\">reload</span> the preset to be able to use your updated version:</p>\n                        <p>- long-press <span className=\"strong\">Preset</span> switch, then press switch <span className=\"strong\">A</span>, then press switch <span className=\"strong\">5</span>.</p>\n                    </div>\n\n                    <div>\n                        <h3>Example 1:</h3>\n                        <p>The currently loaded preset (CUR) is preset <span className=\"strong\">A1</span>.</p>\n                        <p>You edit the preset <span className=\"strong\">D3</span>.</p>\n                        <p>After you save your modifications of preset <span className=\"strong\">D3</span>, if you want to use it, of course you have to load it:</p>\n                        <p>- long-press <span className=\"strong\">Preset</span> switch, then press switch <span className=\"strong\">D</span>, then press switch <span className=\"strong\">3</span>.</p>\n                    </div>\n\n                </div>\n\n                <h1>In case of problem</h1>\n                <div className=\"doc\">\n                    <p>Try the following:</p>\n                    <p>- Check the MIDI configuration.</p>\n                    <p>- Reload the editor (F5 or Cmd-R or Ctrl-R)</p>\n                    <p>- Restart the Pacer.</p>\n                    <p>- Close any other applications that may be connected to the Pacer.</p>\n                    <p>If you mess up the configuration of your Pacer, do a <span className=\"fluo\">Factory Restore</span>. See page 21 of the Pacer User Guide for the procedure.</p>\n                </div>\n\n                <h1>MIDI in your browser</h1>\n\n                <div className=\"doc\">\n                    <div>\n                        <p>You need to allow your browser to use your MIDI device:</p>\n                        <img src=\"help-01.png\" alt=\"\" />\n                    </div>\n                    <div>\n                        <p>In case you didn't allow the use of MIDI device and want to change that, you can right-click on the URL icon and change the setting:</p>\n                        <img src=\"help-02.png\" alt=\"\" />\n                    </div>\n                </div>\n\n                <h1>FAQ</h1>\n\n                <div className=\"doc\">\n                    <p><i>To be completed...</i></p>\n                </div>\n\n                <h1>Known issues</h1>\n\n                <div className=\"doc\">\n                    <p>- The preset D6 can not be read by sending a \"read preset\" sysex. You have to dump it from the Pacer.</p>\n                    <p>- LED configuration is displayed for external footswitch and expression pedals.</p>\n                </div>\n\n                <h1>Contribute</h1>\n\n                <div className=\"doc\">\n                    <p>This editor is an Open Source project. You are welcome to contribute.</p>\n                    <p>The source-code is hosted\n                    by GitHub: <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">pacer-editor</a></p>\n                    <p>To contribute your bug fixes, new features, etc.: 1) fork the project, 2) create a pull-request.</p>\n                </div>\n\n                <h1>Thanks</h1>\n\n                <div className=\"doc\">\n                    <p>Thank you to the Nektar support service for having provided precious informations regarding the SysEx data format of the Pacer.\n                        This editor would not have been possible without their support.</p>\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const h = v => {\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n","\nexport const MAX_FILE_SIZE = 200 * 1024;\n\n// export const MAX_STATUS_MESSAGES = 40;\n\nexport function isVal(v) {\n    return v !== undefined && v !== null && v !== '';\n}\n\nexport function sortObject(obj) {\n    let arr = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort((a, b) => a.value.localeCompare(b.value));\n    return arr;\n}\n\n\nexport const dropOverlayStyle = {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    paddingTop: '4rem',\n    background: 'rgba(0,0,0,0.4)',\n    textAlign: 'center',\n    color: '#fff',\n    fontSize: '4rem'\n};\n","import {sortObject} from \"../utils/misc\";\n\nexport const ANY_MIDI_PORT = \".*\";\n\n// export const PACER_MIDI_PORT_NAME = \"vmpk.*\";            // DEBUG\n// export const PACER_MIDI_INPUT_PORT_NAME = \"vmpk.*\";      // DEBUG\n// export const PACER_MIDI_OUTPUT_PORT_NAME = \"vmpk.*\";     // DEBUG\nexport const PACER_MIDI_PORT_NAME = \"Pacer.*\";          // can be a regex\nexport const PACER_MIDI_INPUT_PORT_NAME = \"Pacer.*\";\nexport const PACER_MIDI_OUTPUT_PORT_NAME = \"Pacer.*\";\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\nexport const SYSEX_HEADER = [0x7F];\n\nexport const COMMAND_SET = 0x01;\nexport const COMMAND_GET = 0x02;\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\nexport const CONTROL_NAME = 0x01;\nexport const CONTROL_STOMPSWITCH_1 = 0x0D;\nexport const CONTROL_STOMPSWITCH_2 = 0x0E;\nexport const CONTROL_STOMPSWITCH_3 = 0x0F;\nexport const CONTROL_STOMPSWITCH_4 = 0x10;\nexport const CONTROL_STOMPSWITCH_5 = 0x11;\nexport const CONTROL_STOMPSWITCH_6 = 0x12;\nexport const CONTROL_RESERVED = 0x13;\nexport const CONTROL_STOMPSWITCH_A = 0x14;\nexport const CONTROL_STOMPSWITCH_B = 0x15;\nexport const CONTROL_STOMPSWITCH_C = 0x16;\nexport const CONTROL_STOMPSWITCH_D = 0x17;\nexport const CONTROL_FOOTSWITCH_1 = 0x18;\nexport const CONTROL_FOOTSWITCH_2 = 0x19;\nexport const CONTROL_FOOTSWITCH_3 = 0x1A;\nexport const CONTROL_FOOTSWITCH_4 = 0x1B;\nexport const CONTROL_EXPRESSION_PEDAL_1 = 0x36;\nexport const CONTROL_EXPRESSION_PEDAL_2 = 0x37;\nexport const CONTROL_MIDI = 0x7E;\nexport const CONTROL_ALL = 0x7F;\n\n// objects:\nexport const CONTROLS = {\n    [CONTROL_NAME]: \"name\",\n    [CONTROL_STOMPSWITCH_1]: \"1\",\n    [CONTROL_STOMPSWITCH_2]: \"2\",\n    [CONTROL_STOMPSWITCH_3]: \"3\",\n    [CONTROL_STOMPSWITCH_4]: \"4\",\n    [CONTROL_STOMPSWITCH_5]: \"5\",\n    [CONTROL_STOMPSWITCH_6]: \"6\",\n    [CONTROL_RESERVED]: \"RESERVED\",\n    [CONTROL_STOMPSWITCH_A]: \"A\",\n    [CONTROL_STOMPSWITCH_B]: \"B\",\n    [CONTROL_STOMPSWITCH_C]: \"C\",\n    [CONTROL_STOMPSWITCH_D]: \"D\",\n    [CONTROL_FOOTSWITCH_1]: \"FS 1\",\n    [CONTROL_FOOTSWITCH_2]: \"FS 2\",\n    [CONTROL_FOOTSWITCH_3]: \"FS 3\",\n    [CONTROL_FOOTSWITCH_4]: \"FS 4\",\n    [CONTROL_EXPRESSION_PEDAL_1]: \"EXP 1\",\n    [CONTROL_EXPRESSION_PEDAL_2]: \"EXP 2\",\n    [CONTROL_MIDI]: \"MIDI configuration\",\n    [CONTROL_ALL]: \"ALL\"\n};\n\nexport const CONTROLS_FULLNAME = {      //FIXME: use constants for the key, like CONTROLS above\n    0x01: \"Preset Name\",\n    0x0D: \"Stompswitch 1\",\n    0x0E: \"Stompswitch 2\",\n    0x0F: \"Stompswitch 3\",\n    0x10: \"Stompswitch 4\",\n    0x11: \"Stompswitch 5\",\n    0x12: \"Stompswitch 6\",\n    0x13: \"RESERVED\",\n    0x14: \"Stompswitch A\",\n    0x15: \"Stompswitch B\",\n    0x16: \"Stompswitch C\",\n    0x17: \"Stompswitch D\",\n    0x18: \"Footswitch 1\",\n    0x19: \"Footswitch 2\",\n    0x1A: \"Footswitch 3\",\n    0x1B: \"Footswitch 4\",\n    0x36: \"Expression Pedal 1\",\n    0x37: \"Expression Pedal 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n//FIXME: add FS when ready\nexport const CONTROLS_WITH_SEQUENCE = [\n    0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17  //, 0x18, 0x19, 0x1A, 0x1B\n];\n\n// subsets of CONTROLS keys:\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12];\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B];\nexport const EXPPEDALS = [0x36, 0x37];\n\n// message types:\nexport const MSG_AD_MIDICC = 0x00;\nexport const MSG_AD_NRPNC = 0x03;\nexport const MSG_AD_NRPNF = 0x04;\nexport const MSG_AD_PITCH = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\nexport const MSG_SW_MIDI_CC_TGGLE = 0x47;\nexport const MSG_SW_MIDI_CC = 0x40;\nexport const MSG_SW_MIDI_CC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRG_BANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPN_COARSE = 0x57;\nexport const MSG_SW_NRPN_FINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESET_SELECT = 0x62;\nexport const MSG_SW_PRESET_INC_DEC = 0x56;\nexport const MSG_SW_STEP_SELECT = 0x63;\nexport const MSG_SW_STEP_INC_DEC = 0x64;\n\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPNC = 0x15;\nexport const MSG_ENC_NRPNF = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESETSELECT = 0x17;\nexport const MSG_ENC_STEPSELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDICC]: \"CC\",\n    [MSG_AD_NRPNC]: \"NRPN C\",\n    [MSG_AD_NRPNF]: \"NRPN F\",\n    [MSG_AD_PITCH]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRG_BANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPN_FINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESET_SELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESET_INC_DEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEP_SELECT]: \"STEP SELECT\",\n    [MSG_SW_STEP_INC_DEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN C\",\n    [MSG_ENC_NRPNF]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\nexport const MSG_TYPES_SHORT_NAMES = {      // used in overview\n\n    [MSG_AD_MIDICC]: \"CC\",\n    [MSG_AD_NRPNC]: \"NRPN C\",\n    [MSG_AD_NRPNF]: \"NRPN F\",\n    [MSG_AD_PITCH]: \"Pitch\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW\",\n    [MSG_CTRL_OFF]: \"Ctrl OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC tggl\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note tggl\",\n    [MSG_SW_PRG_BANK]: \"Prg bank\",\n    [MSG_SW_PRG_STEP]: \"Prg step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN C\",\n    [MSG_SW_NRPN_FINE]: \"NRPN F\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"Relay\",\n    [MSG_SW_PRESET_SELECT]: \"Preset sel\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset +/-\",\n    [MSG_SW_STEP_SELECT]: \"Step sel\",\n    [MSG_SW_STEP_INC_DEC]: \"Step +/-\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC rel\",\n    [MSG_ENC_NRPNC]: \"NRPN C\",\n    [MSG_ENC_NRPNF]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"Pitch\",\n    [MSG_ENC_ATCHAN]: \"AT chan\",\n    [MSG_ENC_PROGRAM]: \"Prg\",\n    [MSG_ENC_PRESETSELECT]: \"Preset sel\",\n    [MSG_ENC_STEPSELECT]: \"Step sel\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\n// Message types for stompswitches\nexport const MSG_TYPES_FULLNAME_SW = {\n    [MSG_CTRL_OFF]: \"OFF\",\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC Toggle\",\n    [MSG_SW_MIDI_CC]: \"CC Trigger\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC Step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note Toggle\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_PRG_STEP]: \"Program Step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_SW_PRESET_SELECT]: \"Preset Select\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset Inc/Dec\",\n    [MSG_SW_STEP_SELECT]: \"Step Select\",\n    [MSG_SW_STEP_INC_DEC]: \"Step Inc/Dec\"\n};\n\nexport const MSG_TYPES_FULLNAME_SW_SORTED = sortObject(MSG_TYPES_FULLNAME_SW);\n\n\nexport const MSG_TYPES_FULLNAME_ENC = {\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN Coarse\",\n    [MSG_ENC_NRPNF]: \"NRPN Fine\",\n    [MSG_ENC_PITCH]: \"Pitch Bend\",\n    [MSG_ENC_ATCHAN]: \"AT Chan.\",\n    [MSG_ENC_PROGRAM]: \"Program\",\n    [MSG_ENC_PRESETSELECT]: \"Preset Sel\",\n    [MSG_ENC_STEPSELECT]: \"Step Sel\"\n};\n\n\n// Preset Midi Settings\nexport const MSG_TYPES_FULLNAME_MIDI = {\n    [MSG_LOAD_CC]: \"Load CC\",\n    [MSG_SW_NOTE]: \"MIDI Note\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_DAWFUNC]: \"DAW Func.\",\n    [MSG_CTRL_OFF]: \"OFF\"\n};\n\nexport const MSG_TYPES_FULLNAME_MIDI_SORTED = sortObject(MSG_TYPES_FULLNAME_MIDI);\n\nexport const NOT_USED = \"not used\";\n\nexport const MSG_TYPES_DATA_HELP = {\n\n    // each value must be a array of 3 values\n\n    [MSG_AD_MIDICC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_AD_PITCH]: [\"\", \"\", \"\"],\n    [MSG_AD_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_DAWFUNC]: [\"function\", NOT_USED, NOT_USED],\n    [MSG_CTRL_OFF]: [\"\", \"\", \"\"],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [\"controller\", \"value 1\", \"value 2\"],\n    [MSG_SW_MIDI_CC]: [\"controller\", \"down\", \"up\"],\n    [MSG_SW_MIDI_CC_STEP]: [\"controller\", \"start\", \"end\"],\n    [MSG_SW_NOTE]: [\"note\", \"velocity\", NOT_USED],\n    [MSG_SW_NOTE_TGGLE]: [\"note\", \"velocity\", NOT_USED],\n    [MSG_SW_PRG_BANK]: [\"program\", \"bank LSB\", \"bank MSB\"],\n    [MSG_SW_PRG_STEP]: [\"start\", \"end\", NOT_USED],\n    [MSG_SW_NRPN_COARSE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_NRPN_FINE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_MMC]: [\"device\", \"command\", NOT_USED],\n    [MSG_SW_RELAY]: [\"mode\", \"relay #\", NOT_USED],\n    [MSG_SW_PRESET_SELECT]: [\"preset\", NOT_USED, NOT_USED],\n    [MSG_SW_PRESET_INC_DEC]: [\"inc/dec\", NOT_USED, NOT_USED],\n    [MSG_SW_STEP_SELECT]: [\"target\", \"step\", NOT_USED],\n    [MSG_SW_STEP_INC_DEC]: [\"target\", \"inc/dec\", NOT_USED],\n\n    [MSG_ENC_CC]: [\"\", \"\", \"\"],\n    [MSG_ENC_MIDICC_REL]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_ENC_PITCH]: [\"\", \"\", \"\"],\n    [MSG_ENC_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_ENC_PROGRAM]: [\"\", \"\", \"\"],\n    [MSG_ENC_PRESETSELECT]: [\"\", \"\", \"\"],\n    [MSG_ENC_STEPSELECT]: [\"\", \"\", \"\"],\n\n    [MSG_LOAD_CC]: [\"controller\", \"value\", NOT_USED]\n};\n\n/*\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n*/\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const COLORS = {\n    0x00 : \"Off\",\n    0x01 : \"1A Pink\",\n    0x02 : \"1B Dim Pink\",\n    0x03 : \"2A Red\",\n    0x04 : \"2B Dim Red\",\n    0x05 : \"3A Orange\",\n    0x06 : \"3B Dim Orange\",\n    0x07 : \"4A Amber\",\n    0x08 : \"4B Dim Amber\",\n    0x09 : \"5A Yellow\",\n    0x0A : \"5B Dim Yellow\",\n    0x0B : \"6A Lime\",\n    0x0C : \"6B Dim Lime\",\n    0x0D : \"7A Green\",\n    0x0E : \"7B Dim Green\",\n    0x0F : \"8A Teal\",\n    0x10 : \"8B Dim Teal\",\n    0x11 : \"9A Blue\",\n    0x12 : \"9B Dim Blue\",\n    0x13 : \"10A Lavender\",\n    0x14 : \"10B Dim Lavender\",\n    0x15 : \"11A Purple\",\n    0x16 : \"11B Dim Purple\",\n    0x17 : \"12A White\",\n    0x18 : \"12B Dim White\",\n};\n\n\nexport const COLORS_HTML = {        // https://en.wikipedia.org/wiki/Web_colors\n    0x00 : \"#000000\",\n    0x01 : \"#FFC0CB\",\n    0x02 : \"rgba(255, 192, 203, 0.5)\", // 50% transparent\n    0x03 : \"#FF0000\",\n    0x04 : \"rgba(255, 0, 0, 0.5)\",\n    0x05 : \"#FF8C00\",\n    0x06 : \"rgba(255, 140, 0, 0.5)\",\n    0x07 : \"#FFBF00\",                // https://simple.wikipedia.org/wiki/Amber_(color)\n    0x08 : \"rgba(255, 191, 0, 0.5)\",\n    0x09 : \"#FFFF00\",\n    0x0A : \"rgba(255, 255, 0, 0.5)\",\n    0x0B : \"#00FF00\",\n    0x0C : \"rgba(0, 255, 0, 0.5)\",\n    0x0D : \"#008000\",\n    0x0E : \"rgba(0, 128, 0, 0.5)\",\n    0x0F : \"#008080\",\n    0x10 : \"rgba(0, 128, 128, 0.5)\",\n    0x11 : \"#0000FF\",\n    0x12 : \"rgba(0, 0, 255, 0.5)\",\n    0x13 : \"#E6E6FA\",                // https://en.wikipedia.org/wiki/Lavender_(color)\n    0x14 : \"rgba(230, 230, 250, 0.5)\",\n    0x15 : \"#800080\",\n    0x16 : \"rgba(128, 0, 128, 0.5)\",\n    0x17 : \"#FFFFFF\",\n    0x18 : \"#FFFFFF\"\n};\n\n\nexport const CONTROL_MODE_ELEMENT = 0x60;\n\nexport const CONTROL_MODE_ALL = 0x00;\n// export const CONTROL_MODE_EXT_STEP = 0x01;\n// export const CONTROL_MODE_SEQUENCE = 0x02;\nexport const CONTROL_MODE_EXT_STEP = 0x02;\nexport const CONTROL_MODE_SEQUENCE = 0x01;\n\nexport const CONTROL_MODES = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"External Step Select\",\n    [CONTROL_MODE_SEQUENCE]: \"Sequence\",\n};\n\nexport const CONTROL_MODES_SHORT_NAME = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"ESS\",\n    [CONTROL_MODE_SEQUENCE]: \"Seq\",\n};\n","import {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"../utils/hexstring\";\nimport {\n    COMMAND_GET,\n    COMMAND_SET,\n    CONTROL_ALL,\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_EXPRESSION_PEDAL_2,\n    CONTROL_FOOTSWITCH_4,\n    CONTROL_MIDI,\n    CONTROL_MODE_ELEMENT,\n    CONTROL_NAME,\n    CONTROL_STOMPSWITCH_1,\n    CONTROL_STOMPSWITCH_6,\n    CONTROL_STOMPSWITCH_A,\n    CONTROLS,\n    SYSEX_HEADER,\n    TARGET_PRESET,\n    TARGETS\n} from \"./constants\";\n\nexport const SINGLE_PRESET_EXPECTED_BYTES = 189;    // FIXME: unit is not bytes but messages\nexport const ALL_PRESETS_EXPECTED_BYTES = 4536;     // FIXME: unit is not bytes but messages\n\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// data structure keys:\nexport const CONTROLS_DATA = \"controls\";\nexport const STEPS_DATA = \"steps\";\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n\n    if (!sources.length) return target;\n\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return (128 - (sum % 128)) % 128;\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\n/*\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n*/\n\nfunction getControlStep(data) {\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlMode(data) {\n    return {\n        control_mode: data[2]\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // 0x40\t<data>-MIDICtrl\tStep 1: LED MIDI Ctrl\n    // 0x41\t<data>-Color\tStep 1: LED Active Color\n    // 0x42\t<data>-Color\tStep 1: LED Inactive Color\n    // 0x43\t<data>-LEDNum\tStep 1: LED num\n\n    let cfg = {steps:{}};\n\n    let data_len;\n    let bytes;\n    let step;\n\n    let i = 0;\n    while (i<data.length) {\n        let d = data[i];\n        if (i===0) {\n            step = \"\" + ((d - 0x40) / 4 + 1);\n        }\n        if (!(step in cfg.steps)) cfg.steps[step] = {};\n        switch (d) {\n            case 0x40:\n            case 0x44:\n            case 0x48:\n            case 0x4C:\n            case 0x50:\n            case 0x54:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_midi_ctrl\"] = bytes;\n                break;\n            case 0x41:\n            case 0x45:\n            case 0x49:\n            case 0x4D:\n            case 0x51:\n            case 0x55:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_active_color\"] = bytes;\n                break;\n            case 0x42:\n            case 0x46:\n            case 0x4A:\n            case 0x4E:\n            case 0x52:\n            case 0x56:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_inactive_color\"] = bytes;\n                break;\n            case 0x43:\n            case 0x47:\n            case 0x4B:\n            case 0x4F:\n            case 0x53:\n            case 0x57:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_num\"] = bytes;\n                break;\n            case 0x7F:\n                i = data.length;\n                break;\n            default:\n                // console.log(`getControlLED: ignore byte ${h(d)}`);\n                i++;\n                break;\n        }\n    }\n\n    return cfg;\n}\n\nfunction getMidiSetting(data) {\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n}\n\nfunction getPresetName(data) {\n    const len = data[1];\n    return String.fromCharCode.apply(null, data.slice(2, 2 + len));\n}\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    //TODO: verify checksum\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    switch (cmd) {\n        case COMMAND_SET:\n            break;\n        case COMMAND_GET:\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        // console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    message[tgt][idx] = {\n        // bytes: data      // FIXME: consolidate data per preset\n    };\n\n    if (data.length === 7) return message;\n\n    if (!(obj in CONTROLS)) {\n        // console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === CONTROL_NAME) {\n        obj_type = \"name\";\n    } else if ((obj >= CONTROL_STOMPSWITCH_1 && obj <= CONTROL_STOMPSWITCH_6) ||\n        (obj >= CONTROL_STOMPSWITCH_A && obj <= CONTROL_FOOTSWITCH_4) ||\n        (obj >= CONTROL_EXPRESSION_PEDAL_1 && obj <= CONTROL_EXPRESSION_PEDAL_2)) {\n        obj_type = \"control\";\n    } else if (obj === CONTROL_MIDI) {\n        obj_type = \"midi\";\n    } else if (obj === CONTROL_ALL) {\n        obj_type = \"all\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // if (data.length === 8) return message;\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    // console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n\n        // NAME\n        message[tgt][idx][\"name\"] = getPresetName(data.slice(ELM));\n\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][CONTROLS_DATA] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        if (data.length > 9) {\n\n            // which element?\n            let e = data[ELM];\n\n            if (e >= 0x01 && e <= 0x24) {\n\n                // STEPS\n                if (data.length > ELM + 22) {\n                    let s = getControlStep(data.slice(ELM, ELM + 23));\n                    message[tgt][idx][CONTROLS_DATA][obj][\"steps\"][s.index] = s.config;\n                } else {\n                    console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n                }\n\n            } else if (e === CONTROL_MODE_ELEMENT) {\n\n                // CONTROL MODE\n                // console.log('parseSysexMessage: CONTROL MODE', idx, obj, ELM, data.slice(ELM, data.length - 1), data);\n\n                let mode_cfg = getControlMode(data.slice(ELM, data.length - 1));\n                message[tgt][idx][CONTROLS_DATA][obj] = mergeDeep(message[tgt][idx][CONTROLS_DATA][obj], mode_cfg);\n\n            } else if (e >= 0x40 && e <= 0x57) {\n\n                // LED\n                // console.log('parseSysexMessage: LED');\n\n                let led_cfg = getControlLED(data.slice(ELM, data.length - 1));\n                message[tgt][idx][CONTROLS_DATA][obj] = mergeDeep(message[tgt][idx][CONTROLS_DATA][obj], led_cfg);\n\n            } else if (e === 0x7F) {\n\n                // ALL\n                // console.log('parseSysexMessage: ALL');\n\n            } else {\n                console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n                return null;\n            }\n        } else {\n\n            message[tgt][idx][CONTROLS_DATA] = {\n                [obj]: {}\n            };\n\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n\n        message[tgt][idx][\"midi\"] = {};\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x60) {\n\n            // SETTINGS\n            if (data.length > ELM+19) {\n                let s = getMidiSetting(data.slice(ELM, ELM + 20));\n                message[tgt][idx][\"midi\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n\n    if (obj_type === \"all\") {\n\n        message[tgt][idx][\"all\"] = {};\n\n        // // which element?\n        // let e = data[ELM];\n        //\n        // if (e >= 0x01 && e <= 0x60) {\n        //\n        //     // SETTINGS\n        //     if (data.length > ELM+19) {\n        //         let s = getMidiSetting(data.slice(ELM, ELM + 20));\n        //         message[tgt][idx][\"midi\"][s.index] = s.config;\n        //     } else {\n        //         console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n        //     }\n        //\n        // } else {\n        //     console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n        //     return null;\n        // }\n\n    }\n\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    if (data === null) return null;\n\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        if (config) {\n            mergeDeep(presets, config);\n        }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n\n\n/**\n * Split a dump into individual sysex messages\n * @param data\n * @param stripManufacturer\n * returns a array of sysex messages. The messages do not contains the sysex \"start of sysex\" 0xF0 and \"end of sysex\" 0xF7 bytes.\n */\nfunction splitDump(data, stripManufacturer) {\n\n    if (data === null) return [];\n\n    let messages = [];\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: dump does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        messages.push(data.slice(i+3, k));  // data.slice(i, k) are the data between MANUFACTURER and SYSEX_END\n\n    } // while\n\n    return messages;\n}\n\n\n/**\n * Split a sysex dump into individual presets\n *\n * input: binay data\n * output: collection (key-value obj) of binary data\n */\n/*\nfunction splitDump(data) {\n\n    if (data === null) return {};\n\n    let presets = [];   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return {};\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return {};\n        }\n\n        let d = data.slice(i, k);\n\n        // let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        // if (config) {\n        //     mergeDeep(presets, config);\n        // }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n*/\n\n\n/**\n *\n */\nexport function requestAllPresets() {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(presetIndex) {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPresetObj(presetIndex, controlId) {\n\n    // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n    // return requestPreset(presetIndex);\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,      // preset #\n        controlId         // (control)\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * Return an array of sysex messages to update a control's steps.\n * @param presetIndex\n * @param controlId\n * @param steps\n * @returns {*}\n */\nfunction buildControlStepSysex(presetIndex, controlId, steps, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!forceUpdate && !step.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n/*\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n*/\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // msgs.map(m => console.log(\"buildControlStepSysex\", hs(m)));\n\n    return msgs;\n}\n\nfunction buildControlStepLedSysex(presetIndex, controlId, steps, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!forceUpdate && !step.led_changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        // msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        // msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        // msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        // msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        // msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        // msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        // msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    return msgs;\n}\n\n/**\n *\n * @param presetIndex\n * @param controlId\n * @param mode\n * @returns {number[]}\n */\nfunction buildControlModeSysex(presetIndex, controlId, mode, forceUpdate = false) {\n\n    if (!forceUpdate && !mode.control_mode_changed) return [];   // order important because \"control_mode_change\" could be undefined\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        controlId,\n        CONTROL_MODE_ELEMENT,\n        0x01,   // 1 byte of data\n        mode[\"control_mode\"]\n    ];\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return the result:\n    return [SYSEX_HEADER.concat(msg)];  // we need to return an array of messages, even if it'sonly one message\n}\n\n/**\n * Wihtout Control Mode config\n * Without LED config\n *\n * @param presetIndex\n * @param controlId\n * @param data\n * @param forceUpdate\n * @returns {*}\n */\nfunction getControlUpdateSysexMessages(presetIndex, controlId, data, forceUpdate = false) {\n    return [\n        ...buildControlModeSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId], forceUpdate)  ,\n        ...buildControlStepSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"], forceUpdate),\n        ...buildControlStepLedSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"], forceUpdate)\n    ];\n}\n\nfunction buildMidiSettingsSysex(presetIndex, settings, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(settings)) {\n\n        let setting = settings[i];\n\n        if (!setting.changed && !forceUpdate) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            CONTROL_MIDI];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, setting.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, setting.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, setting.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, setting.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, setting.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, setting.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    return msgs;\n}\n\n\nfunction buildPresetNameSysex(presetIndex, data) {\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_NAME,\n        0x00            // when setting the name this byte can be anything\n    ];\n\n    const s = data[TARGET_PRESET][presetIndex][\"name\"];\n\n    // add data:\n    msg.push(s.length);\n\n    for (let i=0; i < s.length; i++) {\n        msg.push(s.charCodeAt(i));\n    }\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return result:\n    return [SYSEX_HEADER.concat(msg)];  // we need to return an array of messages, even if it'sonly one message\n}\n\n\nfunction getMidiSettingUpdateSysexMessages(presetIndex, data) {\n    return buildMidiSettingsSysex(presetIndex, data[TARGET_PRESET][presetIndex][\"midi\"]);\n}\n\n\nexport {\n    isSysexData,\n    parseSysexDump,\n    getControlUpdateSysexMessages,\n    getMidiSettingUpdateSysexMessages,\n    buildPresetNameSysex,\n    splitDump\n};\n\n","import WebMidi from \"webmidi\";\n\nfunction portById(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputById(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\nfunction outputById(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = inputById(id);\n    return i ? i.name : null;\n}\n\nfunction outputName(id) {\n    let i = outputById(id);\n    return i ? i.name : null;\n}\n\n\nexport {\n    portById,\n    inputById,\n    inputName,\n    outputName,\n    outputById\n}\n","/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    let ii = parseInt(index);\n    if (ii === 0) return \"CUR\";\n    //TODO: check valid range\n    let b = Math.floor((ii - 1) / 6);\n    let i = (ii - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n\n/**\n * Exampe: \"D5\" => 23\n * @param xy\n * @returns {number}\n */\nexport const presetXYToIndex = xy => {\n    // if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return bank * 6 + num;\n};\n","import React from \"react\";\nimport \"./DumpSysex.css\";\nimport {\n    MSG_SW_NOTE,\n    TARGET_PRESET,\n    MSG_TYPES, COLORS, CONTROLS_FULLNAME, CONTROL_MODES\n} from \"../pacer/constants\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\nimport {presetIndexToXY} from \"../pacer/utils\";\n\n/*\nconst PresetName = ({ name }) => {\n    return (\n        <div className=\"dump-preset-name\">Preset name: {name}</div>\n    );\n};\n*/\n\nconst MidiTable = ({ settings }) => {\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                <tr>\n                    <td colSpan={6} className=\"name\">MIDI settings</td>\n                </tr>\n                {Object.keys(settings).map(i => {\n                    let t = MSG_TYPES[settings[i][\"msg_type\"]];\n                    if (settings[i][\"msg_type\"] === MSG_SW_NOTE) {\n                        t = t + ' ' + Note.fromMidi(settings[i][\"data\"][0], true) + ' vel. ' + settings[i][\"data\"][1];\n                    }\n                    return (\n                        <tr key={i}>\n                            <td>settings {i}</td>\n                            <td>ch. {h(settings[i][\"channel\"])}</td>\n                            <td>msg {h(settings[i][\"msg_type\"])}</td>\n                            <td>{t}</td>\n                            <td>{hs(settings[i][\"data\"])}</td>\n                            {/*<td>{settings[i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(settings[i][\"data\"][0], true) : \"  \"}</td>*/}\n                            <td>{settings[i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                        </tr>\n                    )}\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings }) => {\n    if (settings === null) return null;\n    return (\n        <div>\n            <MidiTable settings={settings} />\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={10} className=\"name\">{CONTROLS_FULLNAME[obj]}</td>\n                    </tr>\n                    <tr>\n                        <th>step</th>\n                        <th>ch.</th>\n                        <th>type</th>\n                        <th>data</th>\n                        <th>decoded</th>\n                        <th>active</th>\n                        <th>LED num</th>\n                        <th>LED On</th>\n                        <th>LED Off</th>\n                        <th>LED midi</th>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i => {\n                        let t = MSG_TYPES[config[\"steps\"][i][\"msg_type\"]];\n                        if (config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE) {\n                            t = t + ' ' + Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) + ' vel. ' + config[\"steps\"][i][\"data\"][1];\n                        }\n                        const c0 = config[\"steps\"][i][\"led_inactive_color\"];\n                        const c1 = config[\"steps\"][i][\"led_active_color\"];\n                        return (\n                            <tr key={`${obj}.${i}`}>\n                                <td>{i}</td>\n                                <td>{h(config[\"steps\"][i][\"channel\"])}</td>\n                                <td>{h(config[\"steps\"][i][\"msg_type\"])}</td>\n                                <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                                <td>{t}</td>\n                                <td>{config[\"steps\"][i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                                <td>{h(config[\"steps\"][i][\"led_num\"])}</td>\n                                <td>{c1 in COLORS ? COLORS[c1] : h(c1)}</td>\n                                <td>{c0 in COLORS ? COLORS[c0] : h(c0)}</td>\n                                <td>{h(config[\"steps\"][i][\"led_midi_ctrl\"])}</td>\n                            </tr>\n                        )}\n                    )}\n                    <tr>\n                        <td colSpan={10}>control mode: {CONTROL_MODES[config[\"control_mode\"]]}</td>\n\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h3>Preset {presetIndexToXY(parseInt(index, 10))} (#{index}): {data[\"name\"]}</h3>\n            {/*<PresetName name= />*/}\n            <Controls controls={data[\"controls\"]} />\n            <MidiSettings settings={data[\"midi\"]} />\n        </div>\n    );\n};\n\nconst Presets = ({ presets }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div>\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n        </div>\n    );\n};\n\nconst DumpSysex = ({ data }) => {\n    return (\n        <div className=\"dump code\">\n            {\n                data && <Presets presets={data[TARGET_PRESET]} />\n            }\n            {/*\n                data ? JSON.stringify(data, null, 4) : \"\"\n            */}\n        </div>\n    );\n};\n\n\nexport default DumpSysex;\n","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport * as WebMidi from \"webmidi\";\nimport {inputById, portById} from \"../utils/ports\";\nimport {PACER_MIDI_INPUT_PORT_NAME} from \"../pacer/constants\";\nimport {produce} from \"immer\";\n\nconst propTypes = {\n    classname: PropTypes.string,\n    only: PropTypes.string,                 // regex applied to port.name\n    autoConnect: PropTypes.string,          // regex applied to port.name\n    portsRenderer: PropTypes.func,\n    // inputRenderer: PropTypes.func,\n    // outputRenderer: PropTypes.func,\n    messageType: PropTypes.string,\n    onMidiInputEvent: PropTypes.func,\n    onMidiOutputEvent: PropTypes.func,\n    onInputConnection: PropTypes.func,      // callback with port.id as parameter\n    onOutputConnection: PropTypes.func,     // callback with port.id as parameter\n    onInputDisconnection: PropTypes.func,   // callback with port.id as parameter\n    onOutputDisconnection: PropTypes.func,  // callback with port.id as parameter\n    setOutput: PropTypes.func,              // callback with port.id as parameter\n    children: PropTypes.node\n};\n\nconst defaultProps = {\n    classname: \"\",\n    only: \".*\",\n    messageType: \"midimessage\"\n};\n\n/**\n *\n * @param props\n * @constructor\n */\nexport default class Midi extends Component {\n\n    //TODO: allow specification of channel and message types to listen to\n\n    state = {\n        inputs: [],         // array of MIDI inputs (filtered from WebMidi object)\n        outputs: [],        // array of MIDI outputs (filtered from WebMidi object)\n        input: null,        // MIDI output port enabled\n        output: null,       // MIDI output port enabled,\n        pacerPresent: false\n        // pacerInputConnected: false,\n        // pacerOutputConnected: false\n    };\n\n    connectInput = port => {\n        if (this.props.onMidiInputEvent) {\n            if (port) {\n                if (port.hasListener(this.props.messageType, 'all', this.props.onMidiInputEvent)) {\n                    console.warn(`Midi.connectInput: sysex messages on all channels listener already connected`);\n                } else {\n                    console.log(`Midi.connectInput: add listener for sysex messages on all channels`);\n                    port.addListener(this.props.messageType, 'all', this.props.onMidiInputEvent);\n                    if (this.props.onInputConnection) {\n                        this.props.onInputConnection(port.id);\n                    }\n                    console.log(\"connectInput: \", port.name);\n                    // if (port.name.match(new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i'))) {\n                    //     // console.log(\"connectInput: matched \", port.name);\n                    //     this.setState({ pacerInputConnected: true })\n                    // }\n                }\n            }\n        }\n    };\n\n    disconnectInput = port => {\n        if (port) {\n            if (port.removeListener) port.removeListener();\n            console.log(`disconnectInput: input ${port.id} disconnected`);\n            if (this.props.onInputDisconnection) {\n                this.props.onInputDisconnection(port.id);\n            }\n            // pacerPresent: WebMidi.inputs.findIndex(port => port.name.match(r2) != null) >= 0,\n            // if (port.name.match(new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i'))) {\n            //     this.setState({ pacerInputConnected: false })\n            // }\n        }\n    };\n\n    connectOutput = port => {\n        if (port) {\n            this.setState({output: port.id});\n            console.log(`connectOutput: output ${port.id} connected`);\n            if (this.props.onOutputConnection) {\n                this.props.onOutputConnection(port.id);\n            }\n            // if (port.name.match(new RegExp(PACER_MIDI_OUTPUT_PORT_NAME, 'i'))) {\n            //     this.setState({ pacerOutputConnected: true })\n            // }\n        }\n    };\n\n    disconnectOutput = () => {\n        if (this.state.output) {\n            let port_id = this.state.output;\n            this.setState(\n                produce(draft => {\n                    draft.pacerOutputConnected = false; // Since we only manage one connected output, if we disconnect it then the Pacer is necessarily disconnected too.\n                    draft.output = null;\n                })\n            );\n            console.log(`disconnectOutput: output ${port_id} disconnected`);\n            if (this.props.onOutputDisconnection) {\n                this.props.onOutputDisconnection(port_id);\n            }\n        }\n    };\n\n    autoConnectInput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectInput: autoConnect ${this.props.autoConnect}`, this.state.inputs);\n\n            if (this.state.input === null) {\n\n                for (let port of this.state.inputs) {      //WebMidi.inputs) {\n\n                    console.log(`Midi.autoConnectInput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'input' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n\n                        console.log(`Midi.autoConnectInput: connect ${port.name}`);\n\n                        this.setState({input: port.id});\n\n                        this.connectInput(port);\n\n                        // if (port.hasListener('noteon', 'all', this.props.onMidiInputEvent)) {\n                        //     console.warn(`Midi.autoConnectInput: autoConnect: listener already connected`);\n                        // } else {\n                        //     console.log(`Midi.autoConnectInput: autoConnect: add listener`);\n                        //     port.addListener('noteon', 'all', this.props.onMidiInputEvent);\n                        // }\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectInput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    autoConnectOutput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectOutput: autoConnect ${this.props.autoConnect}`);\n\n            if (this.state.output === null) {\n\n                for (let port of this.state.outputs) {\n\n                    console.log(`Midi.autoConnectOutput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'output' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n\n                        console.log(`Midi.autoConnectOutput: autoConnect: auto-connect ${port.name}`);\n\n                        // this.setState({output: port.id});\n                        this.connectOutput(port);\n\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectOutput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    registerInputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        const r2 = new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i');\n        // console.log(`Midi.registerInputs matching /${this.props.only}/i`, WebMidi.inputs, WebMidi.inputs.filter(port => port.name.match(r)));\n        // console.log(\"Midi.registerInputs index \", WebMidi.inputs.findIndex(\n        //     port => {\n        //         console.log(\"array.findIndex\", port.name, port.name.match(r2));\n        //         return port.name.match(r2) != null\n        //     }));\n        this.setState({\n                inputs: WebMidi.inputs.filter(port => port.name.match(r) != null),\n                pacerPresent: WebMidi.inputs.findIndex(port => port.name.match(r2) != null) >= 0,\n            },\n            () => this.autoConnectInput()\n        );\n    };\n\n    registerOutputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        // console.log(`Midi.registerOutputs matching /${this.props.only}/i`, WebMidi.outputs, WebMidi.outputs.filter(port => port.name.match(r) != null));\n        this.setState({\n                outputs: WebMidi.outputs.filter(port => port.name.match(r) != null)\n            },\n            () => this.autoConnectOutput()\n        );\n    };\n\n    unRegisterInputs = () => {\n        console.log(\"Midi.unRegisterInputs\");\n        this.disconnectInput(portById(this.state.input));\n        this.setState({\n            inputs: [],\n            input: null,\n            pacerPresent: false\n        });\n    };\n\n    unRegisterOutputs = () => {\n        console.log(\"Midi.unRegisterOutputs\");\n        this.disconnectOutput();\n        this.setState({ outputs: [], output: null });\n    };\n\n    handleMidiConnectEvent = e => {\n\n        console.group(`Midi: handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n\n        // TODO: is disconnect event, remove the existing input listeners\n        if (e.type === \"disconnected\") {\n            // console.log(`must disconnect ${e.port} ${e.port.id}`);\n            this.disconnectInput(e.port.id);\n            this.disconnectOutput();\n        }\n\n        if (e.port.name.match(new RegExp(this.props.only, 'i'))) {\n\n            if (e.port.type === 'input') {\n                // console.log(`ignore MIDI input connect event`);\n                console.log(\"Midi.handleMidiConnectEvent: call registerInputs\");\n                this.registerInputs();\n            }\n\n            if (e.port.type === 'output') {\n                console.log(\"Midi.handleMidiConnectEvent: call registerOutputs\");\n                this.registerOutputs();\n            }\n\n        } else {\n\n            console.log(`Midi.handleMidiConnectEvent: port ignored: ${e.port.name}`);\n\n        }\n\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n\n        console.groupEnd();\n\n    };\n\n    /**\n     *\n     * @param port_id\n     */\n    togglePort = (port_id) => {\n        let p = portById(port_id);\n        if (p.type === 'input') {\n            console.log(\"toggle input\", port_id);\n            let prev = this.state.input;\n            if (this.state.input) {\n                this.disconnectInput(portById(this.state.input));\n                // this.setState({ input: null });\n            }\n            if (port_id !== prev) {\n                this.connectInput(inputById(port_id));\n                // this.setState({ input: port_id });\n            }\n            this.setState({ input: port_id === prev ? null : port_id });\n        } else {\n            console.log(\"toggle output\", port_id);\n            let prev = this.state.output;\n            // There is nothing to \"connect\" for an output port since this type of port does not generate any event.\n            // if (this.state.output) this.disconnectOutput(this.state.output);\n            if (this.state.output) {\n                this.disconnectOutput();\n            }\n            if (port_id !== prev) {\n                this.connectOutput(portById(port_id));\n            }\n            // this.setState({ output: port_id === this.state.output ? null : port_id });\n        }\n    };\n\n    midiOn = err => {\n        if (err) {\n            console.warn(\"Midi.midiOn: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"Midi.midiOn: WebMidi enabled\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n\n            /*\n            if (WebMidi.hasListener(\"connected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'connected' event\");\n            } else {\n                WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            }\n            if (WebMidi.hasListener(\"disconnected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'disconnected' event\");\n            } else {\n                WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n            }\n            */\n        }\n    };\n\n    componentDidMount() {\n        console.log(`Midi: component did mount: WebMidi.enabled=${WebMidi.enabled}`);\n        if (WebMidi.enabled) {\n            console.log(`Midi: component did mount: already enabled, register ports`);\n            this.registerInputs();\n            this.registerOutputs();\n        } else {\n            console.log(\"Midi: component did mount: Calling WebMidi.enable\");\n            WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Midi: component will unmount: unregister ports\");\n        this.unRegisterInputs();\n        this.unRegisterOutputs();\n    }\n\n\n    portsGrouped = () => {\n        let g = {};\n        for (let p of WebMidi.inputs) {\n            g[p.name] = {\n                input: {\n                    id: p.id,\n                    selected: p.id === this.state.input\n                },\n                output: null\n            };\n        }\n        for (let p of WebMidi.outputs) {\n            if (!(p.name in g)) {\n                g[p.name] = {\n                    input: null,\n                    output: null\n                };\n            }\n            g[p.name].output = {\n                id: p.id,\n                selected: p.id === this.state.output\n            }\n        }\n        return g;\n    };\n\n\n    render() {\n\n        let {pacerPresent} = this.state;\n\n        // console.log(\"pacerPresent\", pacerPresent);\n\n        // console.log(this.state.inputs, this.state.outputs);\n\n        // if (input === null && output === null) {\n        //     return (\n        //         <div className={this.props.className}>\n        //             {this.props.children}\n        //         </div>\n        //     );\n        // } else {\n            return (\n                <Fragment>\n                    {\n                        this.props.portsRenderer(this.portsGrouped(), this.togglePort)\n                    }\n                    {!pacerPresent &&\n                    <Fragment>\n                        {this.props.children}\n                    </Fragment>}\n                </Fragment>\n            );\n        // }\n    }\n\n}\n\nMidi.propTypes = propTypes;\nMidi.defaultProps = defaultProps;\n","import React, {Fragment} from 'react';\nimport Switch from \"react-switch\";\n\nconst PortsGrid = ({ groupedPorts, clickHandler }) => {\n\n    // console.log(\"PortsGrid\", groupedPorts);\n\n    return (\n        <div className=\"ports-grid\">\n            {/*<div className=\"grid-header\">MIDI port</div>*/}\n            {/*<div className=\"grid-header\">IN</div>*/}\n            {/*<div className=\"grid-header\">OUT</div>*/}\n            {Object.keys(groupedPorts).map((name, index) =>\n                <div className=\"port\" key={index}>\n                    <div className=\"port-name\">{name}</div>\n                    {groupedPorts[name].input &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            in&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].input.id)}\n                                checked={groupedPorts[name].input.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].input.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                    {groupedPorts[name].output &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            out&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].output.id)}\n                                checked={groupedPorts[name].output.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].output.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                </div>\n            )}\n        </div>\n    );\n\n};\n\nexport default PortsGrid;\n","import * as WebMidi from \"webmidi\";\nimport {PACER_MIDI_PORT_NAME} from \"../pacer/constants\";\nimport {portById} from \"./ports\";\nimport {SYSEX_START} from \"../pacer/sysex\";\n\nexport const MESSAGE = {\n    0x80: \"Note Off\",\n    0x90: \"Note On\",\n    0xA0: \"AfterTouch\",\n    0xB0: \"Control Change\",\n    0xC0: \"Program Change\",\n    0xD0: \"Channel Pressure\",\n    0xE0: \"Pitch Wheel\"\n};\n\nexport const CONTROLER = {\n    0: \"Bank Select (coarse)\",\n    1: \"Modulation Wheel (coarse)\",\n    2: \"Breath controller (coarse)\",\n    4: \"Foot Pedal (coarse)\",\n    5: \"Portamento Time (coarse)\",\n    6: \"Data Entry (coarse)\",\n    7: \"Volume (coarse)\",\n    8: \"Balance (coarse)\",\n    10: \"Pan position (coarse)\",\n    11: \"Expression (coarse)\",\n    12: \"Effect Control 1 (coarse)\",\n    13: \"Effect Control 2 (coarse)\",\n    16: \"General Purpose Slider 1\",\n    17: \"General Purpose Slider 2\",\n    18: \"General Purpose Slider 3\",\n    19: \"General Purpose Slider 4\",\n    32: \"Bank Select (fine)\",\n    33: \"Modulation Wheel (fine)\",\n    34: \"Breath controller (fine)\",\n    36: \"Foot Pedal (fine)\",\n    37: \"Portamento Time (fine)\",\n    38: \"Data Entry (fine)\",\n    39: \"Volume (fine)\",\n    40: \"Balance (fine)\",\n    42: \"Pan position (fine)\",\n    43: \"Expression (fine)\",\n    44: \"Effect Control 1 (fine)\",\n    45: \"Effect Control 2 (fine)\",\n    64: \"Hold Pedal (on/off)\",\n    65: \"Portamento (on/off)\",\n    66: \"Sustenuto Pedal (on/off)\",\n    67: \"Soft Pedal (on/off)\",\n    68: \"Legato Pedal (on/off)\",\n    69: \"Hold 2 Pedal (on/off)\",\n    70: \"Sound Variation\",\n    71: \"Sound Timbre\",\n    72: \"Sound Release Time\",\n    73: \"Sound Attack Time\",\n    74: \"Sound Brightness\",\n    75: \"Sound Control 6\",\n    76: \"Sound Control 7\",\n    77: \"Sound Control 8\",\n    78: \"Sound Control 9\",\n    79: \"Sound Control 10\",\n    80: \"General Purpose Button 1 (on/off)\",\n    81: \"General Purpose Button 2 (on/off)\",\n    82: \"General Purpose Button 3 (on/off)\",\n    83: \"General Purpose Button 4 (on/off)\",\n    91: \"Effects Level\",\n    92: \"Tremulo Level\",\n    93: \"Chorus Level\",\n    94: \"Celeste Level\",\n    95: \"Phaser Level\",\n    96: \"Data Button increment\",\n    97: \"Data Button decrement\",\n    98: \"Non-registered Parameter (fine)\",\n    99: \"Non-registered Parameter (coarse)\",\n    100: \"Registered Parameter (fine)\",\n    101: \"Registered Parameter (coarse)\",\n    120: \"All Sound Off\",\n    121: \"All Controllers Off\",\n    122: \"Local Keyboard (on/off)\",\n    123: \"All Notes Off\",\n    124: \"Omni Mode Off\",\n    125: \"Omni Mode On\",\n    126: \"Mono Operation\",\n    127: \"Poly Operation\"\n};\n\nexport const groupPortsByName = () => {\n    let g = {};\n    for (let p of WebMidi.inputs) {\n        g[p.name] = {\n            input: p.id,\n            output: null\n        };\n    }\n    for (let p of WebMidi.outputs) {\n        if (!(p.name in g)) {\n            g[p.name] = {input: null, output: null};\n        }\n        g[p.name].output = p.id\n    }\n    return g;\n};\n\n/**\n *\n * @param port\n * returns true if the midi port is the Pacer\n */\nexport const outputIsPacer = portId => {\n    let port = portById(portId);\n    return port ? port.name.match(new RegExp(PACER_MIDI_PORT_NAME, 'i')) : false\n};\n\n\nexport const batchMessages = (callback, callbackBusy, wait) => {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n\n        //\n        // We ignore all messages that are NOT sysex messages:\n        //\n        if (event.data[0] !== SYSEX_START) {\n            console.log(\"non sysex message ignored\");\n            return;\n        }\n\n        messages.push(event.data);\n\n        callbackBusy(messages.length);  // messages.length is the total number of bytes received so far\n\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n};\n\n","import React, {Component} from 'react';\nimport {\n    checksum,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump,\n    requestAllPresets,\n    requestPreset,\n    requestPresetObj, SYSEX_END, SYSEX_START\n} from \"../pacer/sysex\";\nimport {ANY_MIDI_PORT, SYSEX_SIGNATURE} from \"../pacer/constants\";\nimport {outputById} from \"../utils/ports\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./Debug.css\";\nimport {produce} from \"immer\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {PACER_MIDI_PORT_NAME, SYSEX_HEADER} from \"../pacer/constants\";\nimport Midi from \"../components/Midi\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {batchMessages} from \"../utils/midi\";\n\nfunction replacerDec2Hex(key, value) {\n    return typeof value === 'number' ? '0x' + h(value) : value;\n}\n\nfunction toSysExMessage(data) {\n    // console.log(\"toSysExMessage\", data, typeof data);\n    if (data === null) return null;\n    return [SYSEX_START, ...SYSEX_SIGNATURE, ...data, SYSEX_END];\n}\n\n// function batchMessages(callback, wait) {\n//\n//     let messages = [];  // batch of received messages\n//     let timeout;\n//\n//     return function() {\n//         clearTimeout(timeout);\n//         let event = arguments[0];\n//         messages.push(event.data);\n//         timeout = setTimeout(() => {\n//             // console.log(\"timeout elapsed\");\n//             timeout = null;\n//             callback(messages);\n//             messages = [];\n//         }, wait);\n//     };\n// }\n\nclass Debug extends Component {\n\n    state = {\n        output: null,           // MIDI output port used for output\n        data: null,\n        messages: [{\n            name: \"read current preset\",\n            message: requestPreset(0),\n            bytesExpected: 189\n        }, {\n            name: \"read preset A1\",\n            message: requestPreset(1),\n            bytesExpected: 189\n        }, {\n            name: \"read stompswitch #1 of preset #5\",\n            message: requestPresetObj(5, 0x0D),\n            bytesExpected: 7\n        }, {\n            name: \"read all presets (takes some time)\",\n            message: requestAllPresets(),\n            bytesExpected: 4536\n        }],\n        customMessage: \"\"\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n/*\n    handleMidiInputEvent = (event) => {\n        // console.log(\"TestSender.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n*/\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            console.log(`total bytes received = ${messages.length}`);\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                        // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        // draft.presetIndex = parseInt(pId, 10);\n                    }\n                )\n            );\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    onOutputConnection = (port_id) => {\n        console.log(\"onOutputConnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        console.log(\"onOutputDisconnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    /**\n     *\n     * @param msg\n     */\n    sendSysex = msg => {\n        // console.log(\"sendSysex\", msg);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy();\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.toUpperCase().match(/[0-9A-F ]+/g) || []).join('');\n        this.setState({\n            customMessage: s\n        });\n    };\n\n    getCustomMessageData = () => {\n        if (this.state.customMessage && this.state.customMessage !== \"\") {\n            let d = fromHexString(this.state.customMessage, / /g);\n            if (d) {\n                let data = Array.from(d);\n                // console.log(\"getCustomMessageData\", data, typeof data);\n                if (data && data.length > 0) {\n                    data.push(checksum(data));\n                    // let tmp = SYSEX_HEADER.concat(d);\n                    // console.log(\"return custom message data\", tmp, hs(data));\n                    // return SYSEX_HEADER.concat(d);\n                    return [SYSEX_HEADER, ...d];\n                    // return data;\n                }\n            }\n        }\n        return null;\n    };\n\n    sendCustomMessage = () => {\n        let d = this.getCustomMessageData();\n        if (d && d.length > 0) {\n            this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected: -1});\n            this.sendSysex(d);\n        }\n        // if (this.state.customMessage) {\n        //     let data = Array.from(fromHexString(this.state.customMessage, / /g));\n        //     if (data && data.length > 0) {\n        //         data.push(checksum(data));\n        //         this.sendSysex(SYSEX_HEADER.concat(data));\n        //     }\n        // }\n    };\n\n    sendMessage = (msg) => {\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected: msg.bytesExpected});\n        this.sendSysex(msg.message);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, messages, customMessage } = this.state;\n\n        const cs = checksum(fromHexString(customMessage, / /g));\n\n        let hex_msg = '';\n        let s = (customMessage.toUpperCase().match(/[0-9A-F]+/g) || []).join('');\n        for (let i=0; i < s.length; i++) {\n            if ((i > 0) && (i % 2 === 0)) hex_msg += ' ';\n            hex_msg += s[i];\n        }\n\n        let u = toSysExMessage(this.getCustomMessageData());\n        let v = u ? JSON.stringify(parseSysexDump(Uint8Array.from(toSysExMessage(this.getCustomMessageData()))), replacerDec2Hex, 4) : \"\";\n\n        return (\n            <div className=\"wrapper\">\n\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                          onMidiInputEvent={this.handleMidiInputEvent}\n                          onOutputConnection={this.onOutputConnection}\n                          onOutputDisconnection={this.onOutputDisconnection}>\n                        <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                    </Midi>\n                </div>\n\n                <div className=\"content\">\n\n                    <div className=\"content-row-content first\">\n                        <h2>Test messages:</h2>\n                        <div className=\"content-row-content-content\">\n                        {messages.map((msg, i) =>\n                            <div key={i} className=\"send-message\">\n                                <button onClick={() => this.sendMessage(msg)}>send</button>\n                                <span className=\"code light\">{ hs(SYSEX_SIGNATURE.concat(msg.message.slice(0, 1))) } </span>\n                                <span className=\"code\">{ hs(msg.message.slice(1, -1)) } </span>\n                                <span className=\"code light\"> {hs(msg.message.slice(-1))}</span>\n                                <span className=\"message-name\"> {msg.name}</span>\n                            </div>\n                        )}\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Custom message:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"send-message\">\n                                <button onClick={this.sendCustomMessage} disabled={(s.length % 2) !== 0}>send</button>\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} </span>\n                                <input type=\"text\" className=\"code\" size=\"80\" value={customMessage}\n                                       placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                                <span className=\"code light\"> {h(cs)}</span>\n                            </div>\n\n                            <div className=\"custom-message code\">\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)}</span> {hex_msg} <span className=\"code light\">{h(cs)}</span>\n                            </div>\n\n                            <div className=\"debug\">\n                                {v ? <pre>{v}</pre> : <div>Invalid message. Send at your own risk.</div>}\n                                {/*<pre>{hs(toSysExMessage(this.getCustomMessageData()))}</pre>*/}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Response:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"message code\">\n                                <DumpSysex data={data} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                    </div>\n\n{/*\n                    <div className=\"content-row-content\">\n                        {messages.map((msg, i) => {\n                            let d = Uint8Array.from(toSysExMessage(msg.message));\n                            console.log('d', d);\n                            return isSysexData(d) ?\n                                <div className=\"debug\" key={i}>\n                                    <h4>[Debug] sysex data to send:</h4>\n                                    <pre>{JSON.stringify(parseSysexDump(d), null, 4)}</pre>\n                                </div> :\n                                <div key={i}>nop {hs(d)}</div>\n                            }\n                        )}\n                    </div>\n*/}\n{/*\n                    <div className=\"content-row-content\">\n                        {data &&\n                        <div className=\"debug\">\n                            <h4>[Debug] sysex data received:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>\n                        }\n                    </div>\n*/}\n\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default Debug;\n","import React, {Fragment} from \"react\";\nimport \"./PresetSelector.css\";\nimport \"./selector.css\";\nimport {presetXYToIndex} from \"../pacer/utils\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\n\nconst Selector = ({ id, index, hasData, name, selected, onClick }) => {\n    let c = \"selector\";\n    if (selected) c += \" selected\";\n    if (!selected && hasData) c += \" loaded\";\n    return (<div className={c} onClick={() => onClick(index)}>\n        <span className=\"preset-id\">{id}</span> <span className=\"preset-name\">{name}</span>\n    </div>);\n};\n\nconst PresetSelector = ({ data, currentPreset, onClick }) =>\n    <Fragment>\n        <div className=\"preset-selectors\">\n            <Selector id={\"CUR\"} index={0} name={\"\"} selected={0 === currentPreset} onClick={onClick} key={0} />\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        {\n            ['A', 'B', 'C', 'D'].map(\n            letter =>\n                <Fragment key={letter}>\n{/*\n                {\n                    (letter !== 'A') && <div></div>\n                }\n*/}\n                {\n                    Array.from(Array(6).keys()).map(\n                    digit => {\n                        let id = letter + (digit + 1);\n                        let index = presetXYToIndex(id);\n\n                        let hasData = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                        let name = hasData ? data[TARGET_PRESET][index][\"name\"] : \"\";\n\n                        return <Selector id={id} index={index} hasData={hasData} name={name} selected={index === currentPreset} onClick={onClick} key={index} />\n                    })\n                }\n                </Fragment>\n            )\n        }\n        </div>\n    </Fragment>;\n\nexport default PresetSelector;\n","import React from \"react\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer/constants\";\nimport \"./ControlSelector.css\";\n\nconst Control = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector loaded\"} onClick={() => onClick(id)}>\n        <div className=\"name\">{name}</div>\n    </div>;\n\n\nconst ControlSelector = ({ currentControl, onClick }) =>\n    <div className=\"controls\">\n        {\n            FOOTSWITCHES.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        {\n            EXPPEDALS.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_TOP.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_BOTTOM.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n    </div>;\n\n\nexport default ControlSelector;\n","import React, {Component, Fragment} from 'react';\nimport {\n    COLORS,\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE, MSG_TYPES_DATA_HELP,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_SW_SORTED\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport \"./ControlStepsEditor.css\";\n\nconst LEDMidi = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">0</option>\n            <option value=\"1\">1</option>\n        </select>\n    );\n};\n\nconst LEDColor = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            {\n                Object.keys(COLORS).map(\n                    key => {\n                        return <option key={key} value={key}>{COLORS[key]}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst LEDNum = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">default</option>\n            <option value=\"3\">top</option>\n            <option value=\"2\">middle</option>\n            <option value=\"1\">bottom</option>\n        </select>\n    );\n};\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select value={note} onChange={(event) => onChange(event.target.value)} className=\"notes\">\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n} ({i})</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Step = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"step-row-header\">Step {index}:</div>\n                <div>\n                    <select value={config.msg_type} onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if ((config.msg_type === MSG_SW_NOTE) || (config.msg_type === MSG_SW_NOTE_TGGLE)) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"step-row-header\">Step {index}:</div>\n            <div>\n                <select value={config.msg_type} onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)}>\n                {\n                    MSG_TYPES_FULLNAME_SW_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][0] : ''}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][1] : ''}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][2] : ''}</div></div>\n            <div>\n                <select value={config.channel} onChange={(event) => updateCallback(\"channel\", null, event.target.value)}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n            <div>\n                <LEDColor current_value={config.led_inactive_color} onChange={(value) => updateCallback(\"led_inactive_color\", null, value)} />\n            </div>\n            <div>\n                <LEDColor current_value={config.led_active_color} onChange={(value) => updateCallback(\"led_active_color\", null, value)} />\n            </div>\n            <div>\n                <LEDNum current_value={config.led_num} onChange={(value) => updateCallback(\"led_num\", null, value)} />\n            </div>\n            <div>\n                <LEDMidi current_value={config.led_midi_ctrl} onChange={(value) => updateCallback(\"led_midi_ctrl\", null, value)} />\n            </div>\n        </Fragment>\n    );\n};\n\nclass ControlStepsEditor extends Component {\n\n    onStepUpdate = (stepIndex, dataType, dataIndex, value) => {\n        this.props.onUpdate(stepIndex, dataType, dataIndex, value);    // stepIndex, dataIndex, value\n    };\n\n    render() {\n\n        const steps = this.props.steps;\n\n        // console.log(\"ControlStepsEditor\", steps);\n\n        //FIXME: do not display LED for EXP and FS\n\n        return (\n            <div className=\"steps\">\n                <div></div>\n                <div className=\"step-col-header\">Type</div>\n                <div className=\"step-col-header\">Data 1</div>\n                <div className=\"step-col-header\">Data 2</div>\n                <div className=\"step-col-header\">Data 3</div>\n                <div className=\"step-col-header\">MIDI Ch.</div>\n                <div className=\"step-col-header\">LED Off</div>\n                <div className=\"step-col-header\">LED On</div>\n                <div className=\"step-col-header\">LED Num</div>\n                <div className=\"step-col-header\">LED MIDI</div>\n                {Object.keys(steps).map(i =>\n                    <Step key={i} index={i} config={steps[i]} updateCallback={(dataType, dataIndex, value) => this.onStepUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ControlStepsEditor;\n","import React from \"react\";\nimport {CONTROL_MODES} from \"../pacer/constants\";\nimport\"./ControlModeEditor.css\";\n\nconst ControlModeEditor = (props) => {\n    // console.log(\"ControlModeEditor\", props);\n    return (\n        <div className=\"control-mode\">\n            <span className=\"step-row-header\">Control mode:</span>\n            <select onChange={(event) => props.onUpdate(event.target.value)} value={props.mode}>\n                {\n                    Object.keys(CONTROL_MODES).map(\n                        key => {\n                            // console.log(\"ControlModeEditor key\", key, props.mode);\n                            return <option key={key} value={key}>{CONTROL_MODES[key]}</option>\n                        })\n                }\n            </select>\n        </div>\n    );\n};\n\nexport default ControlModeEditor;\n","import React, {Component} from 'react';\n\nclass PresetNameEditor extends Component {\n\n    onNameUpdate = (event) => {\n        // console.log(`PresetNameEditor.onSettingUpdate`, event.target.value);\n        this.props.onUpdate(event.target.value.length > 5 ? event.target.value.substr(0, 5) : event.target.value);\n    };\n\n    render() {\n        const name = this.props.name;\n        return (\n            <div className=\"preset-name\">\n                <p>The preset name is limited to 5 characters.</p>\n                <span className=\"strong\">Name:</span> <input value={name} onChange={this.onNameUpdate} size={8} />\n            </div>\n        );\n    }\n}\n\nexport default PresetNameEditor;\n","import {produce} from \"immer\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\nimport {buildPresetNameSysex} from \"../pacer/sysex\";\n\n/*\nexport const updateMessageName =\n    produce((draft, name) => {\n        console.log(\"immer draft\", draft.data);\n        draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;\n        draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n        draft.changed = true;\n\n        if (!draft.updateMessages.hasOwnProperty(draft.presetIndex)) draft.updateMessages[draft.presetIndex] = {};\n        if (!draft.updateMessages[draft.presetIndex].hasOwnProperty(\"name\")) draft.updateMessages[draft.presetIndex][\"name\"] = [];\n\n        draft.updateMessages[draft.presetIndex][\"name\"] = buildPresetNameSysex(draft.presetIndex, draft.data);\n    });\n*/\n\n// (state, props) => stateChange\nexport const updateMessageName = (state, props) => {\n\n    if (props.name === undefined || props.name === null) return null;\n\n    if (props.name.length > 5) {\n        console.warn(`Presets.updateName: name too long: ${props.name}`);\n        return null;    // Calling .setState with null no longer triggers an update in React 16.\n    }\n\n    return produce(state, draft => {\n        // console.log(\"immer draft\", draft.data, props.name);\n        draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = props.name;\n        draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;     //TODO: used?\n        draft.changed = true;\n\n        if (!draft.updateMessages.hasOwnProperty(draft.presetIndex)) draft.updateMessages[draft.presetIndex] = {};\n        if (!draft.updateMessages[draft.presetIndex].hasOwnProperty(\"name\")) draft.updateMessages[draft.presetIndex][\"name\"] = {};\n\n        //FIXME: update the methods that read updateMessages to allow object or array\n        draft.updateMessages[draft.presetIndex][\"name\"][\"dummy\"] = buildPresetNameSysex(draft.presetIndex, draft.data);\n    });\n};","import React from \"react\";\nimport {hs} from \"../utils/hexstring\";\nimport {CONTROLS_FULLNAME} from \"../pacer/constants\";\nimport {presetIndexToXY} from \"../pacer/utils\";\n\n/*\n{\n    17: {\n        controls: {\n            13: Array(13) [\n                0: (9) [127, 1, 1, 17, 13, 96, 1, 0, 127]\n                1: (29) [127, 1, 1, 17, 13, 1, 1, 0, 0, 2, 1, 71, 0, 3, 1, 22, 0, 4, 1, 127, 0, 5, 1, 0, 0, 6, 1, 1, 104]\n\n\n{\n    1:\n        midi: Array(0)\n            dummy: Array(1)\n                0: Array(29)\n                    0: 127\n                    1: 1\n                    2: 1\n\n*/\n\nconst updateMessage = (ctrlType, ctrl, messages) => {\n    switch (ctrlType) {\n        case \"controls\":\n            return <div>update control {CONTROLS_FULLNAME[ctrl]}</div>;\n            break;\n        case \"midi\":\n            return <div>update midi</div>;\n            break;\n        case \"name\":\n            return <div>update name</div>;\n            break;\n        default: return null;\n    }\n};\n\nconst UpdateMessages = ({ messages }) =>\n    <div className=\"message-to-send\">\n    {\n        //FIXME: allow object or array\n        Object.getOwnPropertyNames(messages).map(       // preset\n            (presetId, i) => {\n                return Object.getOwnPropertyNames(messages[presetId]).map(     // control type\n                    (ctrlType, j) => {\n                        return Object.getOwnPropertyNames(messages[presetId][ctrlType]).map(      // control\n                            (ctrl, k) => {\n                                return updateMessage(ctrlType, ctrl, messages[presetId][ctrlType][ctrl])\n                                // console.log(ctrl);\n                                // return messages[presetId][ctrlType][ctrl].map(\n                                //     (msg, h) => {\n                                //         return (<div key={`${i}-${j}-${k}-${h}`} className=\"code\">Preset {presetIndexToXY(presetId)} {ctrlType} </div>);\n                                //     }\n                                // );\n                            }\n                        );\n                    }\n                );\n            }\n        )\n    }\n    </div>;\n\nexport default UpdateMessages;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES, CONTROLS_DATA,\n    getControlUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestAllPresets, requestPreset, SINGLE_PRESET_EXPECTED_BYTES\n} from \"../pacer/sysex\";\nimport ControlSelector from \"../components/ControlSelector\";\nimport {\n    ANY_MIDI_PORT, CONTROLS_WITH_SEQUENCE,\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {hs} from \"../utils/hexstring\";\nimport {produce, setAutoFreeze} from \"immer\";\nimport {outputById} from \"../utils/ports\";\nimport ControlStepsEditor from \"../components/ControlStepsEditor\";\nimport Midi from \"../components/Midi\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport ControlModeEditor from \"../components/ControlModeEditor\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {batchMessages, outputIsPacer} from \"../utils/midi\";\nimport {dropOverlayStyle, isVal, MAX_FILE_SIZE} from \"../utils/misc\";\nimport {updateMessageName} from \"../utils/state\";\nimport UpdateMessages from \"../components/UpdateMessages\";\nimport {presetIndexToXY} from \"../pacer/utils\";\n\n//FIXME: fix this:\nsetAutoFreeze(false);   // needed to be able to update name and copy a preset at the same time. Otherwise immerjs freez the state in updateMessageName() and it is no longer possible to copy a preset.\n\nclass Preset extends Component {\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,       // MIDI output port used for output\n            presetIndex: null,\n            controlId: null,\n            changed: false,     // true when the control has been edited\n            updateMessages: {},\n            data: null,         // json\n            // binData: null,      // binary, will be used to download as .syx file\n            // statusMessages: [],\n            // accept: '',\n            // files: [],\n            dropZoneActive: false,\n            copyPresetFrom: \"-1\"\n        };\n    }\n\n    clearData = () => {\n        this.setState({data: null, updateMessages: {}, changed: false});\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n/*\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n*/\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            this.setState(\n                produce(\n                    draft => {\n\n                        // draft.binData = new Uint8Array(bytes);\n                        // let bin_index = 0;\n\n                        for (let m of messages) {\n\n                            // draft.binData.set(m, bin_index);\n                            // bin_index += m.length;\n\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\", hs(m))\n                            }\n                        }\n\n                        // When requesting a config via MIDI (and not via a file drag&drop), we do not\n                        // update the preset and control ID from the MIDI sysex received.\n                        // This is important because to get the LED data we need to request the complete\n                        // preset data instead of just the selected control's config.\n\n                        // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        // draft.presetIndex = parseInt(pId, 10);\n                        // draft.controlId = parseInt(Object.keys(draft.data[TARGET_PRESET][pId][CONTROLS_DATA])[0], 10);\n                    }\n                )\n            );\n\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    // this.addWarningMessage(\"file too big\");\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n\n                                // if the file contains only one preset, then automatically select it:\n                                if (Object.keys(draft.data[TARGET_PRESET]).length === 1) {\n                                    draft.presetIndex = parseInt(Object.keys(draft.data[TARGET_PRESET])[0], 10);\n                                }\n\n                                // let cId = Object.keys(draft.data[TARGET_PRESET][pId][CONTROLS_DATA])[0];\n                                // draft.controlId = parseInt(cId, 10);\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        // this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        // noinspection JSIgnoredPromiseFromCall\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n            {\n                data: null,\n                changed: false,\n                dropZoneActive: false\n            },\n            () => {     // noinspection JSIgnoredPromiseFromCall\n                this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (index) => {\n\n        // if (!outputIsPacer(this.state.output)) return;\n\n        const { data } = this.state;\n        if (data && data[TARGET_PRESET] && data[TARGET_PRESET][index]) {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                })\n            );\n        } else {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                    // if (index !== this.state.presetIndex) {\n                    //     draft.data = null;\n                    //     draft.changed = false;\n                    // }\n                }),\n                () => {\n                    if (outputIsPacer(this.state.output) && isVal(index)) {\n                        // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n                        this.readPacer(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n                    }\n                }\n            );\n        }\n    };\n\n    selectControl = (controlId) => {\n        if (isVal(this.state.presetIndex) && controlId) {\n            this.setState({ controlId });\n        }\n        /*\n        // if the user selects another preset or control, then clear the data in the state\n        this.setState(\n            produce(draft => {\n                draft.controlId = controlId;\n                if (controlId !== this.state.controlId) {\n                    draft.data = null;\n                    draft.changed = false;\n                }\n            })\n        );\n        if (isVal(this.state.presetIndex) && controlId) {\n            // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n            this.readPacer(requestPreset(this.state.presetIndex));\n        }\n        */\n    };\n\n\n    updatePresetName = (name) => {\n        this.setState(updateMessageName(this.state, {name}));\n        // this.setState(updateMessageName);\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStep = (controlId, stepIndex, dataType, dataIndex, value) => {\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][CONTROLS_DATA][controlId][\"steps\"][stepIndex][dataType] = v;\n                }\n\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        draft.data[TARGET_PRESET][draft.presetIndex][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n                    } else {\n                        draft.data[TARGET_PRESET][draft.presetIndex][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n                    }\n                }\n\n                if (dataType.startsWith(\"led_\")) {\n                    draft.data[TARGET_PRESET][draft.presetIndex][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"led_changed\"] = true;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n                }\n\n                draft.changed = true;\n\n                if (!draft.updateMessages.hasOwnProperty(draft.presetIndex)) draft.updateMessages[draft.presetIndex] = {};\n                if (!draft.updateMessages[draft.presetIndex].hasOwnProperty(CONTROLS_DATA)) draft.updateMessages[draft.presetIndex][CONTROLS_DATA] = {};\n\n                draft.updateMessages[draft.presetIndex][CONTROLS_DATA][controlId] = getControlUpdateSysexMessages(draft.presetIndex, controlId, draft.data);\n            })\n        );\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlMode = (controlId, value) => {\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][CONTROLS_DATA][controlId][\"control_mode\"] = v;\n                draft.data[TARGET_PRESET][draft.presetIndex][CONTROLS_DATA][controlId][\"control_mode_changed\"] = true;\n                draft.changed = true;\n\n                if (!draft.updateMessages.hasOwnProperty(draft.presetIndex)) draft.updateMessages[draft.presetIndex] = {};\n                if (!draft.updateMessages[draft.presetIndex].hasOwnProperty(CONTROLS_DATA)) draft.updateMessages[draft.presetIndex][CONTROLS_DATA] = {};\n\n                draft.updateMessages[draft.presetIndex][CONTROLS_DATA][controlId]  = getControlUpdateSysexMessages(draft.presetIndex, controlId, draft.data);\n            })\n        );\n    };\n\n    copyPresetFrom = (presetIdFrom, presetIdTo) => {\n\n        //FIXME: use immerjs\n\n        const { data, updateMessages } = this.state;\n\n        if (data && data[TARGET_PRESET][presetIdFrom]) {\n\n            if (!data[TARGET_PRESET][presetIdTo]) data[TARGET_PRESET][presetIdTo] = {};\n            data[TARGET_PRESET][presetIdTo][\"changed\"] = true;\n\n            if (!updateMessages.hasOwnProperty(presetIdTo)) updateMessages[presetIdTo] = {};\n            if (!updateMessages[presetIdTo].hasOwnProperty(CONTROLS_DATA)) updateMessages[presetIdTo][CONTROLS_DATA] = {};\n\n            //\n            // Only copy CONTROLS (for the current version)\n            //\n            //FIXME: copy EXP and FS config\n            CONTROLS_WITH_SEQUENCE.forEach(controlId => {\n                // data[TARGET_PRESET][presetIdTo][CONTROLS_DATA][controlId] = Object.assign({}, data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId]);\n                // ugly / deep copy without shallow references:\n                data[TARGET_PRESET][presetIdTo][CONTROLS_DATA][controlId] = JSON.parse(JSON.stringify(data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId]));\n                updateMessages[presetIdTo][CONTROLS_DATA][controlId] = getControlUpdateSysexMessages(presetIdTo, controlId, data, true);\n            });\n            // Object.assign(data[TARGET_PRESET][presetIdTo], data[TARGET_PRESET][presetIdFrom]);\n\n            //we do not copy the name\n            //updateMessages[presetIdTo][\"name\"] = buildPresetNameSysex(presetIdTo, data);\n\n            // CONTROLS_WITH_SEQUENCE.forEach(controlId => updateMessages[presetIdTo][CONTROLS_DATA][controlId] = getControlUpdateSysexMessages(presetIdTo, controlId, data, true));\n\n            this.setState({data, updateMessages, changed: true});\n        }\n    };\n\n/*\n    copyControlFrom = (presetIdFrom, presetIdTo, controlId) => {\n\n        const { data, updateMessages } = this.state;\n\n        if (data && data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId] && data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId]) {\n\n            Object.assign(data[TARGET_PRESET][presetIdTo][CONTROLS_DATA][controlId], data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId]);\n\n            if (!updateMessages.hasOwnProperty(presetIdTo)) updateMessages[presetIdTo] = {};\n            if (!updateMessages[presetIdTo].hasOwnProperty(CONTROLS_DATA)) updateMessages[presetIdTo][CONTROLS_DATA] = {};\n\n            updateMessages[presetIdTo][CONTROLS_DATA][controlId] = getControlUpdateSysexMessages(presetIdTo, controlId, data, true);\n\n            this.setState({data, updateMessages, changed: true});\n        }\n    };\n*/\n\n    onInputConnection = (port_id) => {\n        // this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        // this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    readPacer = (msg, bytesExpected, busyMessage = \"reading Pacer...\") => {\n        this.showBusy({busy: true, busyMessage: busyMessage, bytesReceived: 0, bytesExpected});\n        this.sendSysex(msg);\n    };\n\n    updatePacer = (messages) => {\n        //FIXME: externalize this method\n\n        this.showBusy({busy: true, busyMessage: \"write Preset...\"});\n\n        Object.getOwnPropertyNames(messages).forEach(\n            presetId => {\n                Object.getOwnPropertyNames(messages[presetId]).forEach(\n                    ctrlType => {\n                        Object.getOwnPropertyNames(messages[presetId][ctrlType]).forEach(\n                            ctrl => {\n                                messages[presetId][ctrlType][ctrl].forEach(\n                                    msg => {\n                                        this.sendSysex(msg);\n                                    }\n                                );\n                            }\n                        );\n                    }\n                );\n            }\n        );\n\n        setTimeout(() => {\n            this.setState({changed: false, updateMessages: {}}, () => this.readPacer(requestPreset(this.state.presetIndex), SINGLE_PRESET_EXPECTED_BYTES, \"read updated preset\"));\n        }, 1000);\n    };\n\n    render() {\n\n        const { output, presetIndex, controlId, data, changed, updateMessages, dropZoneActive } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n            showEditor = (TARGET_PRESET in data) &&\n                         (presetIndex in data[TARGET_PRESET]) &&\n                         (CONTROLS_DATA in data[TARGET_PRESET][presetIndex]) &&\n                         (controlId in data[TARGET_PRESET][presetIndex][CONTROLS_DATA]) &&\n                         (\"steps\" in data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId]) &&\n                         (Object.keys(data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"]).length === 6);\n        }\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              messageType=\"sysex\"\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              onInputConnection={this.onInputConnection}\n                              onInputDisconnection={this.onInputDisconnection}\n                              onOutputConnection={this.onOutputConnection}\n                              onOutputDisconnection={this.onOutputDisconnection}>\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                You can click on a preset to only load this specific preset from the Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                Or you can use the ad-hoc button to read ALL the presets from the Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                You can also load a patch file or send a dump from the Pacer.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>Preset:</h2>\n                            <div className=\"selectors\">\n                                <PresetSelector data={data} currentPreset={presetIndex} onClick={this.selectPreset} />\n\n                            </div>\n                            <div className=\"preset-buttons\">\n                                {output && <button onClick={() => this.readPacer(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read all presets from Pacer</button>}\n                                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}}  onChange={this.onChangeFile} />\n                                <button onClick={this.onInputFile}>Load preset(s) from file</button>\n                                {/* data &&\n                                    <Download data={this.state.binData} filename={`pacer-preset-${presetIndexToXY(presetIndex)}`} addTimestamp={true}\n                                              label=\"Download preset\" />\n                                    */}\n                                {data && <button onClick={this.clearData}>CLEAR</button>}\n                            </div>\n                            {data && data[TARGET_PRESET][presetIndex] && <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]} onUpdate={(name) => this.updatePresetName(name)} />}\n                        </div>\n\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Controls</h2>\n                                {isVal(presetIndex) && <ControlSelector currentControl={controlId} onClick={this.selectControl} />}\n\n                                {data && presetIndex in data[TARGET_PRESET] && Object.keys(data[TARGET_PRESET]).length > 1 &&\n                                <Fragment>\n                                    (experimental) <button onClick={() => this.copyPresetFrom(this.state.copyPresetFrom, presetIndex)}>copy</button> from preset <select value={this.state.copyPresetFrom} onChange={(event) => this.setState({copyPresetFrom: event.target.value})}>\n                                        <option value=\"\">-</option>\n                                    {\n                                        Object.keys(data[TARGET_PRESET]).map((key, index) => {\n                                            if (data[TARGET_PRESET][key]) {\n                                                return (<option key={index} value={key}>{presetIndexToXY(key)} {data[TARGET_PRESET][key].name}</option>);\n                                            } else {\n                                                return null;\n                                            }\n                                        })\n                                    }\n                                    </select> <span className=\"small\">(copy the configuration for the footswitches A..D and 1..6 only)</span>\n                                </Fragment>\n                                }\n\n{/*\n                                {data && isVal(presetIndex) && showEditor && Object.keys(data[TARGET_PRESET]).length > 1 &&\n                                <Fragment>\n                                    copy from preset <select value={\"\"} onChange={(event) => this.copyControlFrom(event.target.value, presetIndex, controlId)}>\n                                    {\n                                        Object.keys(data[TARGET_PRESET]).map((key, index) => {\n                                            if (data[TARGET_PRESET][key]) {\n                                                return (<option key={index} value={key}>{presetIndexToXY(key)} {data[TARGET_PRESET][key].name}</option>);\n                                            } else {\n                                                return null;\n                                            }\n                                        })\n                                    }\n                                    </select> <span className=\"small\">(only the selected control configuration will be copied)</span>\n                                </Fragment>\n                                }\n*/}\n\n                                {showEditor &&\n                                <Fragment>\n                                    <ControlStepsEditor\n                                        controlId={controlId}\n                                        steps={data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"]}\n                                        onUpdate={(stepIndex, dataType, dataIndex, value) => this.updateControlStep(controlId, stepIndex, dataType, dataIndex, value)}/>\n                                    <ControlModeEditor\n                                        controlId={controlId}\n                                        mode={data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"control_mode\"]}\n                                        onUpdate={(value) => this.updateControlMode(controlId, value)}/>\n                                </Fragment>\n                                }\n                                {!isVal(presetIndex) &&\n                                    <div className=\"please\">Please first select a preset.</div>\n                                }\n                            </Fragment>\n                        </div>\n\n                        {changed && outputIsPacer(output) &&\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                        </div>\n                        }\n\n                        {this.props.debug && changed &&\n                        <div className=\"content-row-content\">\n                            <div className=\"debug\">\n                                <h4>[Debug] Update messages to send:</h4>\n                                <UpdateMessages messages={updateMessages} />\n                                <div className=\"dump code\">\n                                {/*\n                                    JSON.stringify(data, null, 4)\n                                */}\n                                {/*\n                                    JSON.stringify(updateMessages, null, 4)\n                                */}\n                                </div>\n                            </div>\n                        </div>\n                        }\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default Preset;\n","import React, {Component} from 'react';\nimport Midi from \"../components/Midi\";\nimport {produce} from \"immer\";\nimport parseMidi from 'parse-midi';\nimport {hs} from \"../utils/hexstring\";\nimport {CONTROLER, MESSAGE} from \"../utils/midi\";\nimport * as Note from \"tonal-note\";\nimport \"./Monitor.css\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {ANY_MIDI_PORT} from \"../pacer/constants\";\n\nconst MAX_MESSAGES = 40;\n\nclass Monitor extends Component {\n\n    state = {\n        messages: []\n    };\n\n    handleMidiInputEvent = (event) => {\n        // if (event instanceof MIDIMessageEvent) {\n        this.setState(\n            produce(draft => {\n                let len = draft.messages.unshift(event.data);\n                if (len > MAX_MESSAGES) draft.messages.pop();\n            })\n        )\n        // }\n    };\n\n    render() {\n\n        return (\n\n            <div className=\"wrapper\">\n\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={ANY_MIDI_PORT}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                        // inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                          onMidiInputEvent={this.handleMidiInputEvent}>\n                        <div className=\"no-midi\">Please connect your Pacer or any other MIDI device to your computer.</div>\n                    </Midi>\n                </div>\n\n                <div className=\"content\">\n                    <div>\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                The messages are displayed in reverse chronological order (the most recent on top). Only the last 40 messages are displayed.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>MIDI messages</h2>\n                            <div className=\"content-row-content-content\">\n                                <div className=\"messages\">\n                                    {this.state.messages.map((msg, i) => {      //TODO: display timestamp\n                                        let m = parseMidi(msg);\n                                        let info2 = '';\n                                        let info3 = '';\n                                        switch (m.messageCode) {\n                                            case 0x80:      // {messageCode: 144, channel: 1, messageType: \"noteon\", key: 70, velocity: 21}\n                                            case 0x90:\n                                                info2 = Note.fromMidi(m.key);\n                                                info3 = `velocity: ${m.velocity}`;\n                                                break;\n                                            case 0xA0:  // \"AfterTouch\",\n                                                break;\n                                            case 0xB0:\n                                                info2 = CONTROLER[m.controlNumber];\n                                                info3 = m.controlValue;\n                                                break;\n                                            case 0xC0:          // {messageCode: 192, channel: 4, messageType: \"programchange\", program: 102} \"C0\"\n                                                info2 = `program: ${m.program}`;\n                                                info3 = '';\n                                                break;\n                                            case 0xD0:  // \"Channel Pressure\\\",\\n\"\n                                                break;\n                                            case 0xE0:          // {messageCode: 224, channel: 1, messageType: \"pitchbendchange\", pitchBend: 8283, pitchBendMultiplier: 0.011109754608716884}\n                                                info2 = `bend: ${m.pitchBend}`;\n                                                info3 = `multiplier: ${m.pitchBendMultiplier}`;\n                                                break;\n                                            default:\n                                                break;\n                                        }\n                                        return (\n                                            <div key={i}>\n                                                <span className=\"code\">[{hs(msg)}]</span>\n                                                <span className=\"msg-channel\">Channel {m.channel}</span>\n                                                <span className=\"msg-name\">{MESSAGE[m.messageCode]}</span>\n                                                <span className=\"msg-data\">{info2}</span>\n                                                <span className=\"msg-data\">{info3}</span>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Monitor;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"gh\">\n                <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">Source code available on GitHub</a>\n{/*\n                <a aria-label=\"Homepage\" title=\"project on github\" href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <svg height=\"24\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\" aria-hidden=\"true\">\n                        <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n                    </svg>\n                </a>\n*/}\n            </div>\n            <div>\n                {/*<p>“Nektar Technology”, the logo and all other Nektar Technology product, technology or service names and*/}\n                    {/*logos are trademarks or registered trademarks of Nektar Technology, Inc.</p>*/}\n                <p>This web site is not endorsed by, directly affiliated with, maintained, or sponsored by Nektar Technology.\n                    This web site is published under <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noopener noreferrer\">GNU General Public License v3</a>.\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {Component} from 'react';\n\nclass Global extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <div className=\"doc\" style={{marginTop: '16px'}}>\n                    Sorry, this feature is not implemented yet.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Global;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../pacer/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {dropOverlayStyle} from \"../utils/misc\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        data: null\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    hideBusy = (delay = 0) => {\n        if (delay < 1) {\n            this.props.onBusy({busy: false});\n        } else {\n            setTimeout(() => this.props.onBusy({busy: false}), delay);\n        }\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                    this.hideBusy();\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                            })\n                        );\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.hideBusy();\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n        {\n                // data: null,\n                dropZoneActive: false\n            },\n    () => {this.readFiles(files)});\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            // console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, dropZoneActive } = this.state;\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              messageType=\"sysex\"\n                              onMidiInputEvent={this.handleMidiInputEvent}>\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                Send a dump from your Pacer or<br />drag & drop a patch file here.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <DumpSysex data={data} />\n                        </div>\n\n                    </div>\n\n{/*\n                <div className=\"right-column\">\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n                </div>\n*/}\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React, {Component, Fragment} from 'react';\nimport {\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_TYPES_FULLNAME_MIDI_SORTED,\n    MSG_TYPES_DATA_HELP\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport \"./MidiSettingsEditor.css\";\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select onChange={(event) => onChange(event.target.value)} value={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Setting = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"setting-row-header\">message {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} value={config.msg_type}>\n                        {\n                            // Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                            //     key => {\n                            //         return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                            //     })\n                            MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                                v => {\n                                    return <option key={v.key} value={v.key}>{v.value}</option>\n                            })\n                        }\n                    </select>\n                </div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if (config.msg_type === MSG_SW_NOTE) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"setting-row-header\">Setting {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} value={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} value={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass MidiSettingsEditor extends Component {\n\n    onSettingUpdate = (settingIndex, dataType, dataIndex, value) => {\n        this.props.onUpdate(settingIndex, dataType, dataIndex, value);\n    };\n\n    render() {\n\n        const settings = this.props.settings;\n\n        return (\n            <div className=\"settings\">\n                <div></div>\n                <div className=\"setting-col-header\">Type</div>\n                <div className=\"setting-col-header\">Data 1</div>\n                <div className=\"setting-col-header\">Data 2</div>\n                <div className=\"setting-col-header\">Data 3</div>\n                <div className=\"setting-col-header\">MIDI Ch.</div>\n                {Object.keys(settings).map(i =>\n                    <Setting key={i} index={i} config={settings[i]} updateCallback={(dataType, dataIndex, value) => this.onSettingUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default MidiSettingsEditor;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    getMidiSettingUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestAllPresets, requestPreset, SINGLE_PRESET_EXPECTED_BYTES\n} from \"../pacer/sysex\";\nimport Midi from \"../components/Midi\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport {produce} from \"immer\";\nimport {\n    ANY_MIDI_PORT,\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {hs} from \"../utils/hexstring\";\nimport MidiSettingsEditor from \"../components/MidiSettingsEditor\";\nimport {outputById} from \"../utils/ports\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {batchMessages, outputIsPacer} from \"../utils/midi\";\nimport {dropOverlayStyle, isVal, MAX_FILE_SIZE} from \"../utils/misc\";\nimport {updateMessageName} from \"../utils/state\";\nimport UpdateMessages from \"../components/UpdateMessages\";\n\nclass PresetMidi extends Component {\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,       // MIDI output port used for output\n            presetIndex: null,  //\n            changed: false,     // true when the control has been edited\n            updateMessages: {},\n            data: null\n        };\n    }\n\n    clearData = () => {\n        this.setState({data: null, updateMessages: {}, changed: false});\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n/*\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage = message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage = message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage = message => {\n        this.addStatusMessage(\"error\", message);\n    };\n*/\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                        // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        // draft.presetIndex = parseInt(pId, 10);\n                    }\n                )\n            );\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    // this.addWarningMessage(\"file too big\");\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                // if the file contains only one preset, then automatically select it:\n                                if (Object.keys(draft.data[TARGET_PRESET]).length === 1) {\n                                    draft.presetIndex = parseInt(Object.keys(draft.data[TARGET_PRESET])[0], 10);\n                                }\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        // this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        // noinspection JSIgnoredPromiseFromCall\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n            {\n                data: null,\n                changed: false,\n                dropZoneActive: false\n            },\n            () => { this.readFiles(files) }   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (index) => {\n        //if (!outputIsPacer(this.state.output)) return;\n        const { data } = this.state;\n        if (data && data[TARGET_PRESET] && data[TARGET_PRESET][index]) {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                })\n            );\n        } else {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                }),\n                () => {\n                    if (outputIsPacer(this.state.output) && isVal(index)) {\n                        this.readPacer(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n                    }\n                }\n            );\n        }\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateMidiSettings = (settingIndex, dataType, dataIndex, value) => {\n        // console.log(\"PresetMidi.updateMidiSettings\", settingIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 0;\n                    } else {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"changed\"] = true;\n\n                draft.changed = true;\n\n                // we use a similar data structure as in Preset.js, with controlId replaced by \"midi\"\n                if (!draft.updateMessages.hasOwnProperty(draft.presetIndex)) draft.updateMessages[draft.presetIndex] = {};\n                if (!draft.updateMessages[draft.presetIndex].hasOwnProperty(\"midi\")) draft.updateMessages[draft.presetIndex][\"midi\"] = {};\n\n                //FIXME: update the methods that read updateMessages to allow object or array\n                draft.updateMessages[draft.presetIndex][\"midi\"][\"dummy\"] = getMidiSettingUpdateSysexMessages(draft.presetIndex, draft.data);\n\n            })\n        );\n    };\n\n    updatePresetName = (name) => {\n        this.setState(updateMessageName(this.state, {name}));\n    };\n\n    onInputConnection = (port_id) => {\n        // this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        // this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        // console.log(\"sendSysex\", msg.length > 32 ? hs(msg.slice(0, 32)) + '...' : hs(msg), bytesExpected);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    readPacer = (msg, bytesExpected) => {\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        this.sendSysex(msg);\n    };\n\n    updatePacer = (messages) => {\n        //FIXME: externalize this method\n\n        this.showBusy({busy: true, busyMessage: \"write Preset...\"});\n\n        Object.getOwnPropertyNames(messages).forEach(\n            presetId => {\n                Object.getOwnPropertyNames(messages[presetId]).forEach(\n                    ctrlType => {\n                        Object.getOwnPropertyNames(messages[presetId][ctrlType]).forEach(\n                            ctrl => {\n                                messages[presetId][ctrlType][ctrl].forEach(\n                                    msg => {\n                                        this.sendSysex(msg);\n                                    }\n                                );\n                            }\n                        );\n                    }\n                );\n            }\n        );\n\n        setTimeout(() => {\n            // console.log(\"updatePacer: clear changed flag and updateMessages array\");\n            this.setState({changed: false, updateMessages: {}}, () => this.readPacer(requestPreset(this.state.presetIndex), SINGLE_PRESET_EXPECTED_BYTES, \"read updated preset\"));\n        }, 1000);\n    };\n\n    render() {\n\n        const { output, presetIndex, data, changed, updateMessages, dropZoneActive } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n            showEditor = (TARGET_PRESET in data) &&\n                         (presetIndex in data[TARGET_PRESET]) &&\n                         (\"midi\" in data[TARGET_PRESET][presetIndex]) &&\n                         (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16)\n        }\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              messageType=\"sysex\"\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              onInputConnection={this.onInputConnection}\n                              onInputDisconnection={this.onInputDisconnection}\n                              onOutputConnection={this.onOutputConnection}\n                              onOutputDisconnection={this.onOutputDisconnection}>\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                You can click on a preset to only load this specific preset from the Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                Or you can use the ad-hoc button to read ALL the presets from the Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                You can also load a patch file or send a dump from the Pacer.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>Preset:</h2>\n                            <div className=\"selectors\">\n                                <PresetSelector data={data} currentPreset={presetIndex} onClick={this.selectPreset} />\n                            </div>\n                            <div className=\"preset-buttons\">\n                                {output && <button onClick={() => this.readPacer(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read all presets from Pacer</button>}\n                                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}}  onChange={this.onChangeFile} />\n                                <button onClick={this.onInputFile}>Load preset(s) from file</button>\n                                {data && <button onClick={this.clearData}>CLEAR</button>}\n                            </div>\n                            {data && data[TARGET_PRESET][presetIndex] && <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]} onUpdate={(name) => this.updatePresetName(name)} />}\n                        </div>\n\n                        {showEditor &&\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Preset MIDI settings:</h2>\n                                <MidiSettingsEditor settings={data[TARGET_PRESET][presetIndex][\"midi\"]}\n                                                    onUpdate={(settingIndex, dataType, dataIndex, value) => this.updateMidiSettings(settingIndex, dataType, dataIndex, value)} />\n                            </Fragment>\n                        </div>\n                        }\n\n                        {changed && outputIsPacer(output) &&\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                        </div>\n                        }\n\n                        {this.props.debug && showEditor &&\n                        <div className=\"content-row-content first\">\n                            <div className=\"debug\">\n                                <h4>[Debug] Update messages to send:</h4>\n                                <UpdateMessages messages={updateMessages} />\n{/*\n                                <div className=\"dump code\">\n                                    {\n                                        JSON.stringify(updateMessages, null, 4)\n                                    }\n                                </div>\n*/}\n                            </div>\n                        </div>\n                        }\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default PresetMidi;\n","import React, {Component} from \"react\";\n\nclass Download extends Component {\n\n    handleClick = (event) => {\n\n        let url = window.URL.createObjectURL(new Blob([this.props.data], {type: \"application/octet-stream\"}));\n\n        let filename = this.props.filename;\n\n        if (this.props.addTimestamp) {\n            let now = new Date();\n            let timestamp =\n                now.getUTCFullYear() + \"-\" +\n                (\"0\" + (now.getUTCMonth() + 1)).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCDate()).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCHours()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCMinutes()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCSeconds()).slice(-2);\n            filename += '.' + timestamp;\n        }\n\n        let shadowlink = document.createElement(\"a\");\n        shadowlink.download = filename + \".syx\";\n        shadowlink.style.display = \"none\";\n        shadowlink.href = url;\n\n        document.body.appendChild(shadowlink);\n        shadowlink.click();\n        document.body.removeChild(shadowlink);\n\n        setTimeout(function() {\n            return window.URL.revokeObjectURL(url);\n        }, 1000);\n\n    };\n\n    render() {\n        return (\n            <button onClick={this.handleClick} className={this.props.className}>{this.props.label}</button>\n        );\n    }\n\n}\n\nexport default Download;\n","import React, {Component} from \"react\";\n\nclass DownloadJSON extends Component {\n\n    handleClick = (event) => {\n\n        const url = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(this.props.data));\n\n        // let url = window.URL.createObjectURL(new Blob([this.props.data], {type: \"application/octet-stream\"}));\n\n        let filename = this.props.filename;\n\n        if (this.props.addTimestamp) {\n            let now = new Date();\n            let timestamp =\n                now.getUTCFullYear() + \"-\" +\n                (\"0\" + (now.getUTCMonth() + 1)).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCDate()).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCHours()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCMinutes()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCSeconds()).slice(-2);\n            filename += '.' + timestamp;\n        }\n\n        let shadowlink = document.createElement(\"a\");\n        shadowlink.download = filename + \".json\";\n        shadowlink.style.display = \"none\";\n        shadowlink.href = url;\n\n        document.body.appendChild(shadowlink);\n        shadowlink.click();\n        document.body.removeChild(shadowlink);\n\n        setTimeout(function() {\n            return window.URL.revokeObjectURL(url);\n        }, 1000);\n\n    };\n\n    render() {\n        return (\n            <button onClick={this.handleClick} className={this.props.className}>{this.props.label}</button>\n        );\n    }\n\n}\n\nexport default DownloadJSON;\n","import React, {Component} from 'react';\nimport {produce} from \"immer\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump,\n    requestAllPresets,\n    splitDump\n} from \"../pacer/sysex\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {outputById} from \"../utils/ports\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Patch.css\";\nimport Download from \"../components/Download\";\nimport {batchMessages, outputIsPacer} from \"../utils/midi\";\nimport {dropOverlayStyle, MAX_FILE_SIZE} from \"../utils/misc\";\nimport DownloadJSON from \"../components/DownloadJSON\";\nimport * as QueryString from \"query-string\";\n\nclass Patch extends Component {\n\n    // one data structure per preset\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,   // MIDI output port used for output\n            data: null,     // json\n            bytes: null,  // binary, will be used to download as .syx file\n            dropZoneActive: false,\n            status: null\n        };\n    }\n\n    clearData = () => {\n        this.setState({data: null, updateMessages: {}, changed: false});\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    hideBusy = (delay = 0) => {\n        if (delay < 1) {\n            this.props.onBusy({busy: false});\n        } else {\n            setTimeout(() => this.props.onBusy({busy: false}), delay);\n        }\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n\n            let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n\n            this.setState(\n                produce(\n                    draft => {\n\n                        // draft.bytes = new Uint8Array(bytes);\n                        // let bin_index = 0;\n\n                        let buffer = new Uint8Array(bytes);\n                        let bin_index = 0;\n\n                        for (let m of messages) {\n\n                            // draft.bytes.set(m, bin_index);\n                            buffer.set(m, bin_index);\n                            bin_index += m.length;\n\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n\n                        if (draft.bytes === null) {\n                            draft.bytes = buffer;\n                        } else {\n                            // merge sysex bytes\n                            const a = new Uint8Array(draft.bytes.length + buffer.length);\n                            a.set(draft.bytes);\n                            a.set(buffer, draft.bytes.length);\n                            draft.bytes = a;\n                        }\n\n                    }\n                )\n            );\n\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            // this.props.onBusy(false);\n            this.hideBusy();\n        },\n        (n) => {\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                    this.setState(\n                        produce(draft => {\n                            draft.status = {\n                                severity: \"error\",\n                                message: `The file ${file.name} is too big.`\n                            };\n                        })\n                    );\n                    this.hideBusy();\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                //draft.bytes = data;\n                                if (draft.bytes === null) {\n                                    draft.bytes = data;\n                                } else {\n                                    // merge sysex bytes\n                                    const a = new Uint8Array(draft.bytes.length + data.length);\n                                    a.set(draft.bytes);\n                                    a.set(data, draft.bytes.length);\n                                    draft.bytes = a;\n                                }\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.status = {\n                                    severity: \"info\",\n                                    message: `Patch file loaded: ${file.name}`\n                                };\n                            })\n                        );\n                    } else {\n                        this.setState(\n                            produce(draft => {\n                                draft.status = {\n                                    severity: \"error\",\n                                    message: `The file ${file.name} does not contain a patch (is not a binary sysex file)`\n                                };\n                            })\n                        );\n                    }\n                    this.hideBusy();\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        // noinspection JSIgnoredPromiseFromCall\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n            {\n                // data: null,\n                dropZoneActive: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = null;\n            })\n        );\n    };\n\n    sendSysex = (msg, bytesExpected = 0) => {\n        // console.log(\"sendSysex\", msg.length > 32 ? hs(msg.slice(0, 32)) + '...' : hs(msg), bytesExpected);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        if (bytesExpected > 0) this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        this.setState(\n            {\n                data: null,\n                bytes: null\n            },\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    /**\n     * Send the current data\n     * @param patch\n     */\n    sendPatch = () => {\n\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n\n        this.showBusy({busy: true, busyMessage: \"sending patch...\"});\n        splitDump(Array.from(this.state.bytes)).forEach(\n            msg => {\n                // console.log(\"sendPatch\", msg.length > 32 ? hs(msg.slice(0, 32)) + '...' : hs(msg));\n                out.sendSysex(SYSEX_SIGNATURE, msg);\n            }\n        );\n        this.hideBusy(1000);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { status, bytes, data, output, dropZoneActive } = this.state;\n\n        const q =  QueryString.parse(window.location.search);\n        const debug = q.debug ? q.debug === '1' : false;\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              onOutputConnection={this.onOutputConnection}\n                              onOutputDisconnection={this.onOutputDisconnection}\n                              className=\"\" >\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                Presets marked \"no data\" are ignored. They will NOT erase the preset config in your Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                A patch is a full dump of the Pacer.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n\n                            <h2>Patch content:</h2>\n                            <div className=\"patch-content\">\n                            {\n                                Array.from(Array(24+1).keys()).map(\n                                index => {\n                                    let id = presetIndexToXY(index);\n                                    let show = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                                    let name = show ? data[TARGET_PRESET][index][\"name\"] : \"\";\n\n                                    if (index === 0) return null;\n\n                                    return (\n                                        <div key={index}>\n                                            {/*<div className=\"right-align\">{index}</div>*/}\n                                            <div>{id}</div>\n                                            {show ? <div>{name}</div> : <div className=\"placeholder\">no data</div>}\n                                        </div>\n                                    );\n                                })\n                            }\n                            </div>\n\n                            {status &&\n                            <div className={`status ${status.severity}`}>\n                                {status.message}\n                            </div>\n                            }\n\n                            <div className=\"patch-actions\">\n                                <div>\n                                    <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}} onChange={this.onChangeFile} />\n                                    <button onClick={this.onInputFile}>Load patch from file</button>\n                                </div>\n                                <div>\n                                    {outputIsPacer(output) && \"or\"}\n                                </div>\n                                <div>\n                                    {outputIsPacer(output) && <button onClick={() => this.sendSysex(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read patch from Pacer</button>}\n                                </div>\n                                <div>\n                                    {data && <Download data={bytes} filename={`pacer-patch`} addTimestamp={true} label=\"Save patch to file\" />}\n                                    {data && debug && <DownloadJSON data={data} filename={`pacer-patch`} addTimestamp={true} label=\"Save patch JSON to file\" className={\"space-left\"}/>}\n                                </div>\n                                <div>\n                                    {data && outputIsPacer(output) && \"or\"}\n                                </div>\n                                <div>\n                                    {data && outputIsPacer(output) && <button onClick={() => this.sendPatch()}>Send patch to Pacer</button>}\n                                </div>\n                            </div>\n\n                            {data && <div className=\"preset-buttons\">\n                                <button onClick={this.clearData}>CLEAR</button>\n                            </div>}\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n        );\n    }\n}\n\nexport default Patch;\n","import React, {Fragment} from \"react\";\nimport {\n    TARGET_PRESET,\n    STOMPSWITCHES_TOP,\n    STOMPSWITCHES_BOTTOM,\n    FOOTSWITCHES,\n    EXPPEDALS,\n    CONTROLS,\n    MSG_TYPES_SHORT_NAMES,\n    MSG_TYPES_DATA_HELP,\n    NOT_USED,\n    CONTROL_MODES_SHORT_NAME,\n    MSG_SW_NOTE,\n    COLORS,\n    COLORS_HTML, MSG_CTRL_OFF\n} from \"../pacer/constants\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport {STEPS_DATA} from \"../pacer/sysex\";\nimport {h} from \"../utils/hexstring\";\nimport * as Note from \"tonal-note\";\n\nfunction hasMidiConfig(preset) {\n    if (preset && preset[\"midi\"]) {\n        for (let prop in preset.midi) {\n            const m = preset.midi[prop];\n            if (m.hasOwnProperty(\"msg_type\")) {\n                if (m.msg_type !== MSG_CTRL_OFF) return true;\n            }\n        }\n    }\n    return false;\n}\n\nconst Message = ({ message, hexDisplay }) => {\n    if (message === null || message === undefined) return null;\n    const t = message[\"msg_type\"];\n    const used = MSG_TYPES_DATA_HELP[t];\n    const data = message[\"data\"];\n    let d = [null, null, null];\n    for (let i=0; i<3; i++) {\n        if (used[i] === NOT_USED) continue;\n        d[i] = hexDisplay ? h(data[i]) : data[i];\n        if (i === 0 && t === MSG_SW_NOTE) {\n            d[i] += ' (' + Note.fromMidi(data[i], true) + ')';\n        }\n    }\n    return (\n        <Fragment>\n            <div className=\"overview-message\">\n                {MSG_TYPES_SHORT_NAMES[t]}\n                <span>{d[0]}</span>\n                <span>{d[1]}</span>\n                <span>{d[2]}</span>\n            </div>\n            <div className=\"msg-midi-channel\">ch. {hexDisplay ? h(message[\"channel\"]) : message[\"channel\"]}</div>\n        </Fragment>\n    );\n};\n\nconst Step = ({ step, hexDisplay }) => {\n    if (step === null || step === undefined) return null;\n    if (step[\"active\"] === 0) return null;\n    let colorOn = null;\n    let colorOff = null;\n    if (step[\"led_active_color\"] && step[\"led_inactive_color\"]) {\n        colorOn = step[\"led_active_color\"] === 127 ? 0x00 : step[\"led_active_color\"];\n        colorOff = step[\"led_inactive_color\"] === 127 ? 0x00 : step[\"led_inactive_color\"];\n    }\n    const displayColor = colorOn > 0 && colorOff > 0;\n    return (\n        <Fragment>\n            <div className=\"overview-step\">\n                <Message message={step} hexDisplay={hexDisplay} />\n            </div>\n            {displayColor &&\n            <div className=\"overview-step-color\">\n                <div className=\"color-on\" style={{backgroundColor: COLORS_HTML[colorOn]}} title={COLORS[colorOn]}></div>\n                <div className=\"color-off\" style={{backgroundColor: COLORS_HTML[colorOff]}} title={COLORS[colorOff]}></div>\n            </div>\n            }\n        </Fragment>\n    );\n};\n\nconst Control = ({ id, control, hexDisplay }) => {\n    if (control === null || control === undefined) return null;\n    return (\n        <div>\n            <div className=\"control-header\">\n                <div className=\"control-name\">{CONTROLS[id]}</div>\n                <div><span className=\"dim\">steps:</span> {CONTROL_MODES_SHORT_NAME[control[\"control_mode\"]]}</div>\n            </div>\n            {Object.keys(control[STEPS_DATA]).map(n => <Step key={n} step={control[STEPS_DATA][n]} hexDisplay={hexDisplay} />)}\n        </div>\n    );\n};\n\nconst Controls = ({ controls, hexDisplay, extControls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"overview-controls\">\n            {extControls && FOOTSWITCHES.map(obj => <Control key={obj} id={obj} control={controls[obj]} hexDisplay={hexDisplay} />)}\n            {extControls && EXPPEDALS.map(obj => <Control key={obj} id={obj} control={controls[obj]} hexDisplay={hexDisplay} />)}\n            {STOMPSWITCHES_TOP.map(obj => <Control key={obj} id={obj} control={controls[obj]} hexDisplay={hexDisplay} />)}\n            <div></div><div></div>\n            {STOMPSWITCHES_BOTTOM.map(obj => <Control key={obj} id={obj} control={controls[obj]} hexDisplay={hexDisplay} />)}\n        </div>\n    );\n};\n\nconst MidiSetting = ({ setting, hexDisplay }) => {\n    if (setting === null || setting === undefined) return null;\n    if (!setting[\"msg_type\"]) return null;\n    if (setting.msg_type === MSG_CTRL_OFF) return null;\n    return (\n        <div className=\"overview-midi\">\n            <Message message={setting} hexDisplay={hexDisplay} />\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings, hexDisplay }) => {\n    console.log(\"MidiSettings\", settings);\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"overview-midi-settings\">\n            <div className=\"control-name\">MIDI</div>\n            {Object.keys(settings).map(i =>                     // TODO: .filter(msg_type !== MSG_CTRL_OFF)\n                <MidiSetting key={i} index={i} setting={settings[i]} hexDisplay={hexDisplay} />\n            )}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data, hexDisplay, extControls }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div className=\"overview-preset\">\n            <h3>Preset {presetIndexToXY(parseInt(index, 10))} (#{index}): <span className=\"bold\">{data[\"name\"]}</span></h3>\n            {/*<PresetName name= />*/}\n            <Controls controls={data[\"controls\"]} hexDisplay={hexDisplay} extControls={extControls} />\n            {hasMidiConfig(data) && <MidiSettings settings={data[\"midi\"]} hexDisplay={hexDisplay} />}\n        </div>\n    );\n};\n\nconst Presets = ({ presets, hexDisplay, extControls }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div className=\"overview-presets\">\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} hexDisplay={hexDisplay} extControls={extControls} />)}\n        </div>\n    );\n};\n\nconst PresetOverview = ({ data, hexDisplay, extControls }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div className=\"overview\">\n            <Presets presets={data[TARGET_PRESET]} hexDisplay={hexDisplay} extControls={extControls} />\n        </div>\n    );\n};\n\nexport default PresetOverview;\n","import React, {Component} from 'react';\nimport {produce} from \"immer\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump,\n    requestAllPresets, requestPreset, SINGLE_PRESET_EXPECTED_BYTES\n} from \"../pacer/sysex\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport PresetSelector from \"../components/PresetSelector\";\nimport {outputById} from \"../utils/ports\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Patch.css\";\nimport {batchMessages, outputIsPacer} from \"../utils/midi\";\nimport {dropOverlayStyle, isVal, MAX_FILE_SIZE} from \"../utils/misc\";\nimport PresetOverview from \"../components/PresetOverview\";\nimport \"./Overview.css\";\nimport {hs} from \"../utils/hexstring\";\n\nclass Overview extends Component {\n\n    // one data structure per preset\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,   // MIDI output port used for output\n            data: null,     // json\n            presetIndex: null,  //\n            dropZoneActive: false,\n            decBase: true,  // true --> decimal base, false --> hex base for number\n            extControls: true\n        };\n    }\n\n    toggleBase = e => {\n        const decBase = !this.state.decBase;\n        this.setState({decBase});\n    };\n\n    toggleExtControls = e => {\n        const extControls = !this.state.extControls;\n        this.setState({extControls});\n    };\n\n    clearData = () => {\n        this.setState({data: null});\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    hideBusy = (delay = 0) => {\n        if (delay < 1) {\n            this.props.onBusy({busy: false});\n        } else {\n            setTimeout(() => this.props.onBusy({busy: false}), delay);\n        }\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                    }\n                )\n            );\n            this.hideBusy();\n        },\n        (n) => {\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                    this.hideBusy();\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.hideBusy();\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        // noinspection JSIgnoredPromiseFromCall\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n            {\n                // data: null,\n                dropZoneActive: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (index) => {\n        //if (!outputIsPacer(this.state.output)) return;\n        const { data } = this.state;\n        if (data && data[TARGET_PRESET] && data[TARGET_PRESET][index]) {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                })\n            );\n        } else {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                }),\n                () => {\n                    if (outputIsPacer(this.state.output) && isVal(index)) {\n                        this.readPacer(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n                    }\n                }\n            );\n        }\n    };\n\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n    };\n\n    sendSysex = msg => {\n        // console.log(\"sendSysex\", msg.length > 32 ? hs(msg.slice(0, 32)) + '...' : hs(msg), bytesExpected);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    readPacer = (msg, bytesExpected) => {\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        this.sendSysex(msg);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { presetIndex, data, output, dropZoneActive } = this.state;\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              messageType=\"sysex\"\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              onOutputConnection={this.onOutputConnection}\n                              onOutputDisconnection={this.onOutputDisconnection}>\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                You can click on a preset to only load this specific preset from the Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                Or you can use the ad-hoc button to read ALL the presets from the Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                You can also load a patch file or send a dump from the Pacer.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>Presets:</h2>\n                            <div className=\"selectors\">\n                                <PresetSelector data={data} currentPreset={presetIndex} onClick={this.selectPreset} />\n                            </div>\n                            <div className=\"preset-buttons\">\n                                {output && <button onClick={() => this.readPacer(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read all presets from Pacer</button>}\n                                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}}  onChange={this.onChangeFile} />\n                                <button onClick={this.onInputFile}>Load preset(s) from file</button>\n                                {data && <button onClick={this.clearData}>CLEAR</button>}\n                                {data && <button onClick={this.toggleExtControls}>{this.state.extControls ? \"Hide external controls\" : \"Show external controls\"}</button>}\n                                {data && <button onClick={this.toggleBase}>{this.state.decBase ? \"Display numbers in hex\" : \"Display numbers in dec\"}</button>}\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content\">\n                            <PresetOverview data={data} hexDisplay={!this.state.decBase} extControls={this.state.extControls} />\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n        );\n    }\n}\n\nexport default Overview;\n","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Debug from \"./pages/Debug\";\nimport Preset from \"./pages/Preset\";\nimport Monitor from \"./pages/Monitor\";\nimport Footer from \"./components/Footer\";\nimport Global from \"./pages/Global\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\nimport PresetMidi from \"./pages/PresetMidi\";\nimport * as QueryString from \"query-string\";\nimport Patch from \"./pages/Patch\";\nimport {produce} from \"immer\";\nimport Overview from \"./pages/Overview\";\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <div className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </div>\n        )}\n    />\n);\n\nconst NoMatch = () =>\n    <div className=\"content home\">\n        <div className=\"error\">\n            Invalid URL\n        </div>\n    </div>;\n\n\nclass App extends Component {\n\n    state = {\n        busy: false,\n        busyMessage: \"please wait\",\n        bytesExpected: -1,\n        progress: -1    // 0..100\n    };\n\n    /**\n     *\n     * @param busy\n     * @param busyMessage\n     * @param bytesExpected\n     * @param bytesReceived\n     */\n    onBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) => {\n        // console.log(\"app.onBusy\", busy, busyMessage, bytesExpected, bytesReceived);\n\n        let show = busy !== this.state.busy;\n        show = show || (busyMessage !== null && busyMessage !== this.state.busyMessage);\n        show = show || (bytesExpected > 0 && bytesExpected !== this.state.bytesExpected);\n\n        let progress = -1;\n        if (this.state.bytesExpected > 0 && bytesReceived > 0) {\n            progress = Math.round(bytesReceived / this.state.bytesExpected * 100 / 5) * 5;\n            show = show || ((progress >= 0) && (progress !== this.state.progress));\n        }\n\n        if (show) {\n            this.setState(\n                produce(draft => {\n                    if (draft.busy !== busy) draft.busy = busy;\n                    if (busyMessage !== null) draft.busyMessage = busyMessage;\n                    if (bytesExpected > 0 && bytesExpected !== draft.bytesExpected) draft.bytesExpected = bytesExpected;\n                    if (busy === false) {\n                        draft.bytesExpected = -1;\n                        progress = -1;\n                    } else {\n                        if (bytesExpected > 0) draft.bytesExpected = bytesExpected;\n                        if (draft.progress !== progress) {\n                            draft.progress = progress;\n                        }\n                    }\n                    // let m = { type, message };\n                    // let len = draft.statusMessages.push(m);\n                    // if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n                })\n            );\n        }\n    };\n\n    /**\n     * Main app render\n     * @returns {*}\n     */\n    render() {\n        const { busy, busyMessage, progress } = this.state;\n\n        const q =  QueryString.parse(window.location.search);\n        const debug = q.debug ? q.debug === '1' : false;\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    {busy && <div className=\"busy\">{busyMessage}{progress >= 0 && <div>{progress} %</div>}</div>}\n\n                    <header className=\"header\">\n                        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Home\" />\n                        <MenuLink to=\"/overview\" label=\"Overview\" />\n                        <MenuLink to=\"/preset\" label=\"Controls\" />\n                        <MenuLink to=\"/presetmidi\" label=\"MIDI\" />\n                        <MenuLink to=\"/global\" label=\"Global\" />\n                        <MenuLink to=\"/patch\" label=\"Patch\" />\n                        {/*<MenuLink to=\"/files\" label=\"Files\" />*/}\n                        <MenuLink to=\"/monitor\" label=\"Monitor\" />\n                        {debug && <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />}\n                        {debug && <MenuLink to=\"/debug\" label=\"Debug\" />}\n                        <div className=\"spacer\"> </div>\n                        <div className=\"header-app-name\">Pacer editor 0.8.3</div>\n                    </header>\n\n                        <Switch>\n                            <Route exact={true} path=\"/\" render={\n                                props => (\n                                    <Home />\n                                )\n                            }/>\n                            <Route path=\"/overview\" render={\n                                props => (\n                                    <Overview onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/preset\" render={\n                                props => (\n                                    <Preset onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/presetmidi\" render={\n                                props => (\n                                    <PresetMidi onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/global\" render={\n                                props => (\n                                    <Global onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/patch\" render={\n                                props => (\n                                    <Patch onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            {/*<Route path=\"/files\" render={*/}\n                                {/*props => (*/}\n                                    {/*<Files onBusy={this.onBusy} debug={debug} />*/}\n                                {/*)*/}\n                            {/*}/>*/}\n                            <Route path=\"/monitor\" render={\n                                props => (\n                                    <Monitor onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            {debug &&\n                            <Route path=\"/dumpdecoder\" render={\n                                props => (\n                                    <DumpDecoder onBusy={this.onBusy} debug={debug}/>\n                                )\n                            }/>\n                            }\n                            {debug &&\n                            <Route path=\"/debug\" render={\n                                props => (\n                                    <Debug onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            }\n                            <Route component={NoMatch} />\n                        </Switch>\n\n                    <Footer />\n\n                </div>\n            </Router>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}