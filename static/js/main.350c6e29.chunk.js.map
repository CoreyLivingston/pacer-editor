{"version":3,"sources":["utils/ports.js","utils/misc.js","pacer/constants.js","utils/hexstring.js","pacer/sysex.js","stores/StateStore.js","pages/Home.js","pacer/utils.js","components/DumpSysex.js","pages/Debug.js","components/PresetSelector.js","components/ControlSelector.js","pacer/model.js","components/DataInputField.js","components/ControlStepsEditor.js","components/ControlModeEditor.js","components/PresetNameEditor.js","components/UpdateMessages.js","components/ActionButtons.js","pages/Preset.js","pages/Monitor.js","components/Footer.js","pages/Global.js","utils/midi.js","components/Midi.js","components/PortsGrid.js","pages/DumpDecoder.js","components/MidiSettingsEditor.js","pages/PresetMidi.js","components/Download.js","components/DownloadJSON.js","pages/Patch.js","components/PresetOverview.js","pages/Overview.js","components/BusyIndicator.js","App.js","serviceWorker.js","index.js"],"names":["portById","id","p","WebMidi","inputs","find","item","outputs","outputById","isVal","v","undefined","dropOverlayStyle","position","top","right","bottom","left","paddingTop","background","textAlign","color","fontSize","SYSEX_SIGNATURE","SYSEX_HEADER","COMMAND_SET","COMMAND_GET","TARGET_PRESET","TARGETS","_TARGETS","Object","defineProperty","TARGET_NAME","PRESET_TARGET","CONTROL_NAME","CONTROL_STOMPSWITCH_1","CONTROL_STOMPSWITCH_2","CONTROL_STOMPSWITCH_3","CONTROL_STOMPSWITCH_4","CONTROL_STOMPSWITCH_5","CONTROL_STOMPSWITCH_6","CONTROL_STOMPSWITCH_A","CONTROL_STOMPSWITCH_B","CONTROL_STOMPSWITCH_C","CONTROL_STOMPSWITCH_D","CONTROL_FOOTSWITCH_1","CONTROL_FOOTSWITCH_2","CONTROL_FOOTSWITCH_3","CONTROL_FOOTSWITCH_4","CONTROL_EXPRESSION_PEDAL_1","CONTROL_EXPRESSION_PEDAL_2","CONTROL_MIDI","CONTROL_ALL","CONTROLS","_CONTROLS","CONTROLS_FULLNAME","1","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","54","55","126","127","STOMPSWITCHES_TOP","map","String","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_CTRL_OFF","MSG_TYPES","_MSG_TYPES","MSG_TYPES_FULLNAME","_MSG_TYPES_SHORT_NAME","_MSG_TYPES_FULLNAME","MSG_TYPES_FULLNAME_MIDI_SORTED","obj","arr","prop","hasOwnProperty","push","key","value","sort","a","b","localeCompare","sortObject","_MSG_TYPES_FULLNAME_M","NOT_USED","MSG_TYPES_DATA_HELP","_MSG_TYPES_DATA_HELP","MSG_TYPES_DATA_USAGE","_MSG_TYPES_DATA_USAGE","MSG_TYPES_STOMPSWITCH","MSG_TYPES_FOOTWITCH","MSG_TYPES_EXP_PEDAL","RELAY_MODE_LABEL","COLORS","0","2","3","4","5","6","7","8","9","10","11","12","COLORS_HTML","CONTROL_MODE_ELEMENT","CONTROL_MODES","_CONTROL_MODES","_CONTROL_MODES_SHORT_","h","str","len","char","s","c","n","length","padZero","toString","toUpperCase","hs","data","Array","from","join","fromHexString","string","sep","replace","Uint8Array","i","parseInt","substr","SYSEX_START","SYSEX_END","CONTROLS_DATA","CMD","TGT","IDX","OBJ","ELM","isObject","isArray","mergeDeep","target","_len","arguments","sources","_key","source","shift","assign","apply","concat","checksum","bytes","reduce","previousValue","currentValue","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","console","warn","fromCharCode","slice","getPresetName","steps","e","index","config","channel","msg_type","active","getControlStep","mode_cfg","control_mode","getControlMode","led_cfg","data_len","step","cfg","d","getControlLED","getMidiSetting","parseSysexDump","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","log","requestAllPresets","msg","cs","requestPreset","presetIndex","requestPresetObj","controlId","getControlUpdateSysexMessages","forceUpdate","toConsumableArray","mode","control_mode_changed","buildControlModeSysex","msgs","_arr","keys","_i","changed","buildControlStepSysex","_arr2","_i2","led_changed","led_midi_ctrl","led_active_color","led_inactive_color","led_num","buildControlStepLedSysex","getMidiSettingUpdateSysexMessages","settings","_arr3","_i3","setting","buildMidiSettingsSysex","StateStore","_this","this","classCallCheck","toggleForceReread","forceReread","sendSysex","midi","output","out","readPacer","bytesExpected","busyMessage","showBusy","busy","bytesReceived","currentPreset","currentControl","updateMessages","input","progress","decBase","extControls","_ref","_ref$busy","_ref$busyMessage","_ref$bytesExpected","_ref$bytesReceived","show","Math","round","_this2","_ref2","_ref2$busyMessage","_ref2$bytesExpected","_ref2$bytesReceived","setTimeout","onBusy","_this3","delay","controlIndex","addControlUpdateMessage","name","charCodeAt","buildPresetNameSysex","stepIndex","preset","dataType","dataIndex","startsWith","settingIndex","P","files","Promise","all","_ref3","asyncToGenerator","regenerator_default","mark","_callee","file","wrap","_context","prev","next","size","_this4","hideBusy","t0","Response","arrayBuffer","t1","sent","stop","_x2","_this5","getOwnPropertyNames","forEach","presetId","ctrlType","ctrl","readPreset","decorate","observable","connected","computed","state","Home","react_default","createElement","className","href","rel","src","alt","Component","presetIndexToXY","ii","floor","MidiTable","colSpan","t","Note","MidiSettings","DumpSysex_MidiTable","ControlTable","c0","c1","Controls","_ref4","controls","DumpSysex_ControlTable","Preset","_ref5","DumpSysex_Controls","DumpSysex_MidiSettings","DumpSysex","props","DumpSysex_Preset","inject","observer","replacerDec2Hex","toSysExMessage","Debug","messages","customMessage","updateCustomMessage","event","match","setState","getCustomMessageData","sendCustomMessage","sendMessage","_this$state","hex_msg","JSON","stringify","onClick","disabled","type","placeholder","onChange","src_components_DumpSysex","Selector","xyId","hasData","selected","PresetSelector","selectPreset","_this$props$state","xselected","checked","letter","react","digit","xy","Control","onSelect","ControlSelector","selectControl","ControlSelector_Control","getAvailableMessageTypes","DataInputField","msgType","LEDMidi","current_value","LEDColor","colorIndex","LEDNum","Step","d0","d1","d2","updateData","updateControlStep","updateLED","led","updateControlStepMessageType","mtype","DataInputField_DataInputField","ControlStepsEditor_LEDColor","ControlStepsEditor_LEDNum","ControlStepsEditor_LEDMidi","ControlStepsEditor","ControlModeEditor","onUpdate","PresetNameEditor","onNameUpdate","updatePresetName","defaultValue","UpdateMessages","j","updateMessage","ActionButtons","_super","call","onInputFile","inputOpenFileRef","current","click","onChangeFile","readFiles","clearData","clear","React","createRef","canRead","canWrite","title","updatePacer","ref","style","display","setAutoFreeze","onDragEnter","dropZoneActive","onDragLeave","onDrop","updateControlMode","setControlMode","copyPresetFrom","presetIdFrom","presetIdTo","showEditor","presetLabel","es","disableClick","src_components_PresetSelector","components_ActionButtons","components_PresetNameEditor","src_components_ControlSelector","src_components_ControlStepsEditor","src_components_ControlModeEditor","components_UpdateMessages","Monitor","Footer","Global","marginTop","batchMessages","callback","callbackBusy","wait","timeout","clearTimeout","Midi","handleMidiInputEvent","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","m","err","return","connectInput","port","hasListener","addListener","disconnectInput","removeListener","connectOutput","disconnectOutput","autoConnectInput","autoConnect","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","RegExp","autoConnectOutput","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","registerInputs","filter","only","registerOutputs","unRegisterInputs","unRegisterOutputs","handleMidiConnectEvent","selectInputPort","selectOutputPort","midiOn","PortsGrid","groupedPorts","clickHandler","react_switch_default","height","width","DumpDecoder","produce","draft","esm_asyncToGenerator","runtime_regenerator_default","src_components_Midi","portsRenderer","components_PortsGrid","messageType","onMidiInputEvent","MidiNote","note","Setting","updateMidiSettings","MidiSettingsEditor_MidiNote","MidiSettingsEditor","PresetMidi","src_components_MidiSettingsEditor","Download","handleClick","url","window","URL","createObjectURL","Blob","filename","addTimestamp","now","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","shadowlink","document","download","body","appendChild","removeChild","revokeObjectURL","label","DownloadJSON","encodeURIComponent","Message","hexDisplay","constructor","used","colorOn","colorOff","displayColor","MessageSummary","backgroundColor","withRouter","history","control","_ref3$stompswitch","stompswitch","n_active_steps","PresetOverview_Step","PresetOverview_Control","MidiSetting","_ref6","_ref7","PresetOverview_Controls","hasMidiConfig","PresetOverview_MidiSettings","Presets","_ref8","PresetOverview_Preset","PresetOverview","_ref9","PresetOverview_Presets","Overview","components_PresetOverview","BusyIndicator","MenuLink","to","activeOnlyWhenExact","Route","path","exact","children","Link","NoMatch","App","q","QueryString","location","search","debug","mobxreact_esm","globalState","HashRouter","App_MenuLink","process","components_BusyIndicator","Switch","render","src_pages_Overview","src_pages_Preset","pages_PresetMidi","pages_Global","src_pages_Monitor","src_pages_DumpDecoder","src_pages_Debug","src_pages_Home","component","src_components_Footer","Boolean","hostname","noop","error","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"unBAEA,SAASA,EAASC,GACd,IAAIC,EAAIC,IAAQC,OAAOC,KAAK,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,IAChD,OAAIC,GAGOC,IAAQI,QAAQF,KAAK,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,IAQxD,SAASO,EAAWP,GAChB,OAAOE,IAAQI,QAAQF,KAAK,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,eCX7C,SAASQ,EAAMC,GAClB,YAAaC,IAAND,GAAyB,OAANA,GAAoB,KAANA,GAAYA,GAAK,EAkBtD,wBAAME,EAAmB,CAC5BC,SAAU,WACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,WAAY,OACZC,WAAY,kBACZC,UAAW,SACXC,MAAO,OACPC,SAAU,QCvBDC,EAAkB,CAAC,EAAM,EAAM,KAC/BC,EAAe,CAAC,KAEhBC,EAAc,EACdC,EAAc,EAEdC,EAAgB,EAIhBC,GAAOC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EACfF,EAAgB,UADDG,OAAAC,EAAA,EAAAD,CAAAD,EAHS,EAKR,UAFDC,OAAAC,EAAA,EAAAD,CAAAD,EAFS,EAKR,eAHDA,GAMPG,EAAc,CACvB,WACA,WACA,WACA,WACA,WACA,WACA,KACA,WACA,WACA,WACA,WACA,OACA,OACA,OACA,OACA,QACA,SAgDSC,EAAgB,CACzB,UACA,QACA,YACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGSC,EAAe,EACfC,EAAwB,GACxBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAwB,GAExBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAwB,GACxBC,EAAuB,GACvBC,GAAuB,GACvBC,GAAuB,GACvBC,GAAuB,GACvBC,GAA6B,GAC7BC,GAA6B,GAC7BC,GAAe,IACfC,GAAc,IAGdC,IAAQC,EAAA,GAAAxB,OAAAC,EAAA,EAAAD,CAAAwB,EAChBpB,EAAe,QADCJ,OAAAC,EAAA,EAAAD,CAAAwB,EAEhBnB,EAAwB,KAFRL,OAAAC,EAAA,EAAAD,CAAAwB,EAGhBlB,EAAwB,KAHRN,OAAAC,EAAA,EAAAD,CAAAwB,EAIhBjB,EAAwB,KAJRP,OAAAC,EAAA,EAAAD,CAAAwB,EAKhBhB,EAAwB,KALRR,OAAAC,EAAA,EAAAD,CAAAwB,EAMhBf,EAAwB,KANRT,OAAAC,EAAA,EAAAD,CAAAwB,EAOhBd,EAAwB,KAPRV,OAAAC,EAAA,EAAAD,CAAAwB,EAfW,GAuBR,YARHxB,OAAAC,EAAA,EAAAD,CAAAwB,EAShBb,EAAwB,KATRX,OAAAC,EAAA,EAAAD,CAAAwB,EAUhBZ,EAAwB,KAVRZ,OAAAC,EAAA,EAAAD,CAAAwB,EAWhBX,EAAwB,KAXRb,OAAAC,EAAA,EAAAD,CAAAwB,EAYhBV,EAAwB,KAZRd,OAAAC,EAAA,EAAAD,CAAAwB,EAahBT,EAAuB,QAbPf,OAAAC,EAAA,EAAAD,CAAAwB,EAchBR,GAAuB,QAdPhB,OAAAC,EAAA,EAAAD,CAAAwB,EAehBP,GAAuB,QAfPjB,OAAAC,EAAA,EAAAD,CAAAwB,EAgBhBN,GAAuB,QAhBPlB,OAAAC,EAAA,EAAAD,CAAAwB,EAiBhBL,GAA6B,SAjBbnB,OAAAC,EAAA,EAAAD,CAAAwB,EAkBhBJ,GAA6B,SAlBbpB,OAAAC,EAAA,EAAAD,CAAAwB,EAmBhBH,GAAe,sBAnBCrB,OAAAC,EAAA,EAAAD,CAAAwB,EAoBhBF,GAAc,OApBEE,GAuBRC,GAAoB,CAC7BC,EAAM,cACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,WACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,eACNC,GAAM,eACNC,GAAM,eACNC,GAAM,eACNC,GAAM,qBACNC,GAAM,qBACNC,IAAM,qBACNC,IAAM,OAUGC,IADgB,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAMC,IAAIC,QAC7D,CAAC,GAAM,GAAM,GAAM,IAAMD,IAAIC,SACjDC,GAAuB,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,IAAMF,IAAIC,QAChEE,GAAe,CAAC,GAAM,GAAM,GAAM,IAAMH,IAAIC,QAC5CG,GAAY,CAAC,GAAM,IAAMJ,IAAIC,QAS7BI,GAAe,GAgCfC,IAASC,EAAA,GAAAtD,OAAAC,EAAA,EAAAD,CAAAsD,EAtCQ,EAwCR,MAFAtD,OAAAC,EAAA,EAAAD,CAAAsD,EArCY,EAwCR,UAHJtD,OAAAC,EAAA,EAAAD,CAAAsD,EApCU,EAwCR,UAJFtD,OAAAC,EAAA,EAAAD,CAAAsD,EAnCW,EAwCR,SALHtD,OAAAC,EAAA,EAAAD,CAAAsD,EAlCO,EAwCR,WANCtD,OAAAC,EAAA,EAAAD,CAAAsD,EAjCK,IAwCR,YAPGtD,OAAAC,EAAA,EAAAD,CAAAsD,EAQjBF,GAAe,YAREpD,OAAAC,EAAA,EAAAD,CAAAsD,EA7Bc,GAuCR,aAVNtD,OAAAC,EAAA,EAAAD,CAAAsD,EA5BQ,GAuCR,MAXAtD,OAAAC,EAAA,EAAAD,CAAAsD,EA3Ba,GAuCR,WAZLtD,OAAAC,EAAA,EAAAD,CAAAsD,EA1BK,GAuCR,QAbGtD,OAAAC,EAAA,EAAAD,CAAAsD,EAzBW,GAuCR,eAdHtD,OAAAC,EAAA,EAAAD,CAAAsD,EAxBS,GAuCR,YAfDtD,OAAAC,EAAA,EAAAD,CAAAsD,EAvBS,GAuCR,YAhBDtD,OAAAC,EAAA,EAAAD,CAAAsD,EAtBY,GAuCR,eAjBJtD,OAAAC,EAAA,EAAAD,CAAAsD,EArBU,GAuCR,aAlBFtD,OAAAC,EAAA,EAAAD,CAAAsD,EApBI,GAuCR,OAnBItD,OAAAC,EAAA,EAAAD,CAAAsD,EAnBM,GAuCR,SApBEtD,OAAAC,EAAA,EAAAD,CAAAsD,EAlBc,GAuCR,iBArBNtD,OAAAC,EAAA,EAAAD,CAAAsD,EAjBe,GAuCR,kBAtBPtD,OAAAC,EAAA,EAAAD,CAAAsD,EAhBY,GAuCR,eAvBJtD,OAAAC,EAAA,EAAAD,CAAAsD,EAfa,IAuCR,gBAxBLtD,OAAAC,EAAA,EAAAD,CAAAsD,EAZI,GAsCR,MA1BItD,OAAAC,EAAA,EAAAD,CAAAsD,EAXY,GAsCR,UA3BJtD,OAAAC,EAAA,EAAAD,CAAAsD,EAVa,GAsCR,UA5BLtD,OAAAC,EAAA,EAAAD,CAAAsD,EATW,GAsCR,UA7BHtD,OAAAC,EAAA,EAAAD,CAAAsD,EARO,GAsCR,SA9BCtD,OAAAC,EAAA,EAAAD,CAAAsD,EAPQ,GAsCR,WA/BAtD,OAAAC,EAAA,EAAAD,CAAAsD,EANS,GAsCR,OAhCDtD,OAAAC,EAAA,EAAAD,CAAAsD,EALe,GAsCR,cAjCPtD,OAAAC,EAAA,EAAAD,CAAAsD,EAJa,GAsCR,YAlCLtD,OAAAC,EAAA,EAAAD,CAAAsD,EAFK,IAsCR,MApCGA,GA+ETC,IAxCqBC,EAAA,GAAAxD,OAAAC,EAAA,EAAAD,CAAAwD,EA7EJ,EA+ER,MAFYxD,OAAAC,EAAA,EAAAD,CAAAwD,EA5EA,EA+ER,UAHQxD,OAAAC,EAAA,EAAAD,CAAAwD,EA3EF,EA+ER,UAJUxD,OAAAC,EAAA,EAAAD,CAAAwD,EA1ED,EA+ER,SALSxD,OAAAC,EAAA,EAAAD,CAAAwD,EAzEL,EA+ER,WANaxD,OAAAC,EAAA,EAAAD,CAAAwD,EAxEP,IA+ER,OAPexD,OAAAC,EAAA,EAAAD,CAAAwD,EAQ7BJ,GAAe,OARcpD,OAAAC,EAAA,EAAAD,CAAAwD,EApEE,GA8ER,WAVMxD,OAAAC,EAAA,EAAAD,CAAAwD,EAnEJ,GA8ER,MAXYxD,OAAAC,EAAA,EAAAD,CAAAwD,EAlEC,GA8ER,WAZOxD,OAAAC,EAAA,EAAAD,CAAAwD,EAjEP,GA8ER,QAbexD,OAAAC,EAAA,EAAAD,CAAAwD,EAhED,GA8ER,aAdSxD,OAAAC,EAAA,EAAAD,CAAAwD,EA/DH,GA8ER,YAfWxD,OAAAC,EAAA,EAAAD,CAAAwD,EA9DH,GA8ER,YAhBWxD,OAAAC,EAAA,EAAAD,CAAAwD,EA7DA,GA8ER,UAjBQxD,OAAAC,EAAA,EAAAD,CAAAwD,EA5DF,GA8ER,UAlBUxD,OAAAC,EAAA,EAAAD,CAAAwD,EA3DR,GA8ER,OAnBgBxD,OAAAC,EAAA,EAAAD,CAAAwD,EA1DN,GA8ER,SApBcxD,OAAAC,EAAA,EAAAD,CAAAwD,EAzDE,GA8ER,cArBMxD,OAAAC,EAAA,EAAAD,CAAAwD,EAxDG,GA8ER,cAtBKxD,OAAAC,EAAA,EAAAD,CAAAwD,EAvDA,GA8ER,YAvBQxD,OAAAC,EAAA,EAAAD,CAAAwD,EAtDC,IA8ER,YAxBOxD,OAAAC,EAAA,EAAAD,CAAAwD,EAnDR,GA6ER,MA1BgBxD,OAAAC,EAAA,EAAAD,CAAAwD,EAlDA,GA6ER,UA3BQxD,OAAAC,EAAA,EAAAD,CAAAwD,EAjDC,GA6ER,UA5BOxD,OAAAC,EAAA,EAAAD,CAAAwD,EAhDD,GA6ER,UA7BSxD,OAAAC,EAAA,EAAAD,CAAAwD,EA/CL,GA6ER,SA9BaxD,OAAAC,EAAA,EAAAD,CAAAwD,EA9CJ,GA6ER,WA/BYxD,OAAAC,EAAA,EAAAD,CAAAwD,EA7CH,GA6ER,OAhCWxD,OAAAC,EAAA,EAAAD,CAAAwD,EA5CG,GA6ER,cAjCKxD,OAAAC,EAAA,EAAAD,CAAAwD,EA3CC,GA6ER,YAlCOxD,OAAAC,EAAA,EAAAD,CAAAwD,EAzCP,IA6ER,MAIYC,EAAA,GAAAzD,OAAAC,EAAA,EAAAD,CAAAyD,EAC1BL,GAAe,OADWpD,OAAAC,EAAA,EAAAD,CAAAyD,EArHD,EAwHR,MAHSzD,OAAAC,EAAA,EAAAD,CAAAyD,EApHG,EAwHR,eAJKzD,OAAAC,EAAA,EAAAD,CAAAyD,EAnHC,EAwHR,aALOzD,OAAAC,EAAA,EAAAD,CAAAyD,EAlHE,EAwHR,cANMzD,OAAAC,EAAA,EAAAD,CAAAyD,EAjHF,EAwHR,sBAPUzD,OAAAC,EAAA,EAAAD,CAAAyD,EAhHJ,IAwHR,gBARYzD,OAAAC,EAAA,EAAAD,CAAAyD,EA5GK,GAsHR,aAVGzD,OAAAC,EAAA,EAAAD,CAAAyD,EA3GD,GAsHR,cAXSzD,OAAAC,EAAA,EAAAD,CAAAyD,EA1GI,GAsHR,WAZIzD,OAAAC,EAAA,EAAAD,CAAAyD,EAzGJ,GAsHR,QAbYzD,OAAAC,EAAA,EAAAD,CAAAyD,EAxGE,GAsHR,eAdMzD,OAAAC,EAAA,EAAAD,CAAAyD,EAvGA,GAsHR,kBAfQzD,OAAAC,EAAA,EAAAD,CAAAyD,EAtGA,GAsHR,gBAhBQzD,OAAAC,EAAA,EAAAD,CAAAyD,EArGG,GAsHR,eAjBKzD,OAAAC,EAAA,EAAAD,CAAAyD,EApGC,GAsHR,aAlBOzD,OAAAC,EAAA,EAAAD,CAAAyD,EAnGL,GAsHR,wBAnBazD,OAAAC,EAAA,EAAAD,CAAAyD,EAlGH,GAsHR,iBApBWzD,OAAAC,EAAA,EAAAD,CAAAyD,EAjGK,GAsHR,iBArBGzD,OAAAC,EAAA,EAAAD,CAAAyD,EAhGM,GAsHR,kBAtBEzD,OAAAC,EAAA,EAAAD,CAAAyD,EA/FG,GAsHR,eAvBKzD,OAAAC,EAAA,EAAAD,CAAAyD,EA9FI,IAsHR,gBAxBIzD,OAAAC,EAAA,EAAAD,CAAAyD,EA3FL,GAqHR,MA1BazD,OAAAC,EAAA,EAAAD,CAAAyD,EA1FG,GAqHR,UA3BKzD,OAAAC,EAAA,EAAAD,CAAAyD,EAzFI,GAqHR,eA5BIzD,OAAAC,EAAA,EAAAD,CAAAyD,EAxFE,GAqHR,aA7BMzD,OAAAC,EAAA,EAAAD,CAAAyD,EAvFF,GAqHR,cA9BUzD,OAAAC,EAAA,EAAAD,CAAAyD,EAtFD,GAqHR,YA/BSzD,OAAAC,EAAA,EAAAD,CAAAyD,EArFA,GAqHR,WAhCQzD,OAAAC,EAAA,EAAAD,CAAAyD,EApFM,GAqHR,cAjCEzD,OAAAC,EAAA,EAAAD,CAAAyD,EAnFI,GAqHR,YAlCIA,GAqDlBC,GD5WN,SAAoBC,GACvB,IAAIC,EAAM,GACV,IAAK,IAAIC,KAAQF,EACTA,EAAIG,eAAeD,IACnBD,EAAIG,KAAK,CACLC,IAAOH,EACPI,MAASN,EAAIE,KAKzB,OADAD,EAAIM,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,MAAMI,cAAcD,EAAEH,SACpCL,ECiWmCU,EAZVC,EAAA,GAAAvE,OAAAC,EAAA,EAAAD,CAAAuE,EA1HT,IA2HR,WADiBvE,OAAAC,EAAA,EAAAD,CAAAuE,EAlJT,GAoJR,aAFiBvE,OAAAC,EAAA,EAAAD,CAAAuE,EAhJL,GAmJR,kBAHavE,OAAAC,EAAA,EAAAD,CAAAuE,EA9IF,GAkJR,eAJUvE,OAAAC,EAAA,EAAAD,CAAAuE,EA7IJ,GAkJR,aALYvE,OAAAC,EAAA,EAAAD,CAAAuE,EA5IV,GAkJR,wBANkBvE,OAAAC,EAAA,EAAAD,CAAAuE,EA3IR,GAkJR,iBAPgBvE,OAAAC,EAAA,EAAAD,CAAAuE,EAzJT,IAiKR,aARiBvE,OAAAC,EAAA,EAAAD,CAAAuE,EAS/BnB,GAAe,OATgBmB,IAcvBC,GAAW,WAEXC,IAAmBC,EAAA,GAAA1E,OAAAC,EAAA,EAAAD,CAAA0E,EAG3BtB,GAAe,CAAC,GAAI,GAAI,KAHGpD,OAAAC,EAAA,EAAAD,CAAA0E,EA9KF,EAmLR,CAAC,aAAc,MAAO,QALZ1E,OAAAC,EAAA,EAAAD,CAAA0E,EA7KE,EAmLR,CAAC,MAAO,WAAY,aANd1E,OAAAC,EAAA,EAAAD,CAAA0E,EA5KA,EAmLR,CAAC,MAAO,WAAY,aAPZ1E,OAAAC,EAAA,EAAAD,CAAA0E,EA3KC,EAmLR,CAACF,GAAU,MAAO,QARXxE,OAAAC,EAAA,EAAAD,CAAA0E,EA1KH,EAmLR,CAACF,GAAU,MAAO,QATPxE,OAAAC,EAAA,EAAAD,CAAA0E,EAzKL,IAmLR,CAAC,WAAYF,GAAUA,KAVVxE,OAAAC,EAAA,EAAAD,CAAA0E,EArKI,GAiLR,CAAC,aAAc,UAAW,YAZtB1E,OAAAC,EAAA,EAAAD,CAAA0E,EApKF,GAiLR,CAAC,aAAc,OAAQ,OAbb1E,OAAAC,EAAA,EAAAD,CAAA0E,EAnKG,GAiLR,CAAC,aAAc,QAAS,QAdnB1E,OAAAC,EAAA,EAAAD,CAAA0E,EAlKL,GAiLR,CAAC,OAAQ,WAAYF,KAfRxE,OAAAC,EAAA,EAAAD,CAAA0E,EAjKC,GAiLR,CAAC,OAAQ,WAAYF,KAhBdxE,OAAAC,EAAA,EAAAD,CAAA0E,EAhKD,GAiLR,CAAC,UAAW,WAAY,aAjBf1E,OAAAC,EAAA,EAAAD,CAAA0E,EA/JD,GAiLR,CAACF,GAAU,QAAS,QAlBXxE,OAAAC,EAAA,EAAAD,CAAA0E,EA9JE,GAiLR,CAAC,QAAS,WAAY,aAnBhB1E,OAAAC,EAAA,EAAAD,CAAA0E,EA7JA,GAiLR,CAAC,QAAS,WAAY,aApBd1E,OAAAC,EAAA,EAAAD,CAAA0E,EA5JN,GAiLR,CAAC,SAAU,UAAWF,KArBRxE,OAAAC,EAAA,EAAAD,CAAA0E,EA3JJ,GAiLR,CAAC,OAAQ,UAAWF,KAtBRxE,OAAAC,EAAA,EAAAD,CAAA0E,EA1JI,GAiLR,CAAC,SAAUF,GAAUA,KAvBjBxE,OAAAC,EAAA,EAAAD,CAAA0E,EAzJK,GAiLR,CAAC,UAAWF,GAAUA,KAxBnBxE,OAAAC,EAAA,EAAAD,CAAA0E,EAxJE,GAiLR,CAAC,SAAU,OAAQF,KAzBbxE,OAAAC,EAAA,EAAAD,CAAA0E,EAvJG,IAiLR,CAAC,SAAU,UAAWF,KA1BjBxE,OAAAC,EAAA,EAAAD,CAAA0E,EApJN,GAgLR,CAAC,GAAI,GAAI,KA5BK1E,OAAAC,EAAA,EAAAD,CAAA0E,EAnJE,GAgLR,CAAC,GAAI,GAAI,KA7BH1E,OAAAC,EAAA,EAAAD,CAAA0E,EAlJG,GAgLR,CAAC,GAAI,GAAI,KA9BJ1E,OAAAC,EAAA,EAAAD,CAAA0E,EAjJC,GAgLR,CAAC,GAAI,GAAI,KA/BF1E,OAAAC,EAAA,EAAAD,CAAA0E,EAhJH,GAgLR,CAAC,GAAI,GAAI,KAhCE1E,OAAAC,EAAA,EAAAD,CAAA0E,EA/IF,GAgLR,CAAC,GAAI,GAAI,KAjCC1E,OAAAC,EAAA,EAAAD,CAAA0E,EA9ID,GAgLR,CAAC,GAAI,GAAI,KAlCA1E,OAAAC,EAAA,EAAAD,CAAA0E,EA7IK,GAgLR,CAAC,GAAI,GAAI,KAnCN1E,OAAAC,EAAA,EAAAD,CAAA0E,EA5IG,GAgLR,CAAC,GAAI,GAAI,KApCJ1E,OAAAC,EAAA,EAAAD,CAAA0E,EA1IL,IAgLR,CAAC,aAAc,QAASF,KAtCXE,GAyCnBC,IAAoBC,EAAA,GAAA5E,OAAAC,EAAA,EAAAD,CAAA4E,EAvNH,EA2NR,EAAC,GAAM,GAAM,IAJF5E,OAAAC,EAAA,EAAAD,CAAA4E,EAtNC,EA2NR,EAAC,GAAM,GAAM,IALN5E,OAAAC,EAAA,EAAAD,CAAA4E,EArND,EA2NR,EAAC,GAAM,GAAM,IANJ5E,OAAAC,EAAA,EAAAD,CAAA4E,EApNA,EA2NR,EAAC,GAAM,GAAM,IAPL5E,OAAAC,EAAA,EAAAD,CAAA4E,EAnNJ,EA2NR,EAAC,GAAM,GAAM,IARD5E,OAAAC,EAAA,EAAAD,CAAA4E,EAlNN,IA2NR,EAAC,GAAM,GAAO,IATA5E,OAAAC,EAAA,EAAAD,CAAA4E,EAU5BxB,GAAe,EAAC,GAAM,GAAM,IAVApD,OAAAC,EAAA,EAAAD,CAAA4E,EA9MG,GA0NR,EAAC,GAAM,GAAM,IAZR5E,OAAAC,EAAA,EAAAD,CAAA4E,EA7MH,GA0NR,EAAC,GAAM,GAAM,IAbF5E,OAAAC,EAAA,EAAAD,CAAA4E,EA5ME,GA0NR,EAAC,GAAM,GAAM,IAdP5E,OAAAC,EAAA,EAAAD,CAAA4E,EA3MN,GA0NR,EAAC,GAAM,GAAM,IAfC5E,OAAAC,EAAA,EAAAD,CAAA4E,EA1MA,GA0NR,EAAC,GAAM,GAAM,IAhBL5E,OAAAC,EAAA,EAAAD,CAAA4E,EAzMF,GA0NR,EAAC,GAAM,GAAM,IAjBH5E,OAAAC,EAAA,EAAAD,CAAA4E,EAxMF,GA0NR,EAAC,GAAO,GAAM,IAlBJ5E,OAAAC,EAAA,EAAAD,CAAA4E,EAvMC,GA0NR,EAAC,GAAM,GAAM,IAnBN5E,OAAAC,EAAA,EAAAD,CAAA4E,EAtMD,GA0NR,EAAC,GAAM,GAAM,IApBJ5E,OAAAC,EAAA,EAAAD,CAAA4E,EArMP,GA0NR,EAAC,GAAM,GAAM,IArBE5E,OAAAC,EAAA,EAAAD,CAAA4E,EApML,GA0NR,EAAC,GAAM,GAAM,IAtBA5E,OAAAC,EAAA,EAAAD,CAAA4E,EAnMG,GA0NR,EAAC,GAAM,GAAO,IAvBT5E,OAAAC,EAAA,EAAAD,CAAA4E,EAlMI,GA0NR,EAAC,GAAM,GAAO,IAxBV5E,OAAAC,EAAA,EAAAD,CAAA4E,EAjMC,GA0NR,EAAC,GAAM,GAAM,IAzBN5E,OAAAC,EAAA,EAAAD,CAAA4E,EAhME,IA0NR,EAAC,GAAM,GAAM,IA1BP5E,OAAAC,EAAA,EAAAD,CAAA4E,EA7LP,GAyNR,EAAC,GAAM,GAAM,IA5BE5E,OAAAC,EAAA,EAAAD,CAAA4E,EA5LC,GAyNR,EAAC,GAAM,GAAM,IA7BN5E,OAAAC,EAAA,EAAAD,CAAA4E,EA3LE,GAyNR,EAAC,GAAM,GAAM,IA9BP5E,OAAAC,EAAA,EAAAD,CAAA4E,EA1LA,GAyNR,EAAC,GAAM,GAAM,IA/BL5E,OAAAC,EAAA,EAAAD,CAAA4E,EAzLJ,GAyNR,EAAC,GAAM,GAAM,IAhCD5E,OAAAC,EAAA,EAAAD,CAAA4E,EAxLH,GAyNR,EAAC,GAAM,GAAM,IAjCF5E,OAAAC,EAAA,EAAAD,CAAA4E,EAvLF,GAyNR,EAAC,GAAM,GAAM,IAlCH5E,OAAAC,EAAA,EAAAD,CAAA4E,EAtLI,GAyNR,EAAC,GAAM,GAAM,IAnCT5E,OAAAC,EAAA,EAAAD,CAAA4E,EArLE,GAyNR,EAAC,GAAM,GAAM,IApCP5E,OAAAC,EAAA,EAAAD,CAAA4E,EAnLN,IAyNR,EAAC,GAAM,GAAM,IAtCCA,GAyDpBC,GAAwB,CAvQD,GACN,GACK,GACR,GACM,GACF,GACA,GACG,GACF,GACN,GACE,GACQ,GACC,GACH,GACC,IAyQ/BzB,IAGS0B,GAAsB,CA1RC,GACN,GACK,GACR,GACM,GACF,GACA,GACG,GACF,GACN,GACE,GACQ,GACC,GACH,GACC,IA4R/B1B,IAGS2B,GAAsB,CAtTL,EACI,EACF,EACC,EACJ,EAwTzB3B,IAGS4B,GAAmB,CAC5B,cACA,gBACA,kBACA,YAkTSC,GAAS,CAClBC,EAAO,MACPxD,EAAO,UACPyD,EAAO,cACPC,EAAO,SACPC,EAAO,aACPC,EAAO,YACPC,EAAO,gBACPC,EAAO,WACPC,EAAO,eACPC,EAAO,YACPC,GAAO,gBACPC,GAAO,UACPC,GAAO,cACPlE,GAAO,WACPC,GAAO,eACPC,GAAO,UACPC,GAAO,cACPC,GAAO,UACPC,GAAO,cACPC,GAAO,eACPC,GAAO,mBACPC,GAAO,aACPC,GAAO,iBACPC,GAAO,YACPC,GAAO,iBAIEwD,GAAc,CACvBZ,EAAO,UACPxD,EAAO,UACPyD,EAAO,2BACPC,EAAO,UACPC,EAAO,uBACPC,EAAO,UACPC,EAAO,yBACPC,EAAO,UACPC,EAAO,yBACPC,EAAO,UACPC,GAAO,yBACPC,GAAO,UACPC,GAAO,uBACPlE,GAAO,UACPC,GAAO,uBACPC,GAAO,UACPC,GAAO,yBACPC,GAAO,UACPC,GAAO,uBACPC,GAAO,UACPC,GAAO,2BACPC,GAAO,UACPC,GAAO,yBACPC,GAAO,UACPC,GAAO,WAIEyD,GAAuB,GAQvBC,IAAaC,EAAA,GAAAjG,OAAAC,EAAA,EAAAD,CAAAiG,EANM,EAOR,yBADEjG,OAAAC,EAAA,EAAAD,CAAAiG,EAHW,EAKR,wBAFHjG,OAAAC,EAAA,EAAAD,CAAAiG,EAFW,EAKR,YAHHA,OAMWC,EAAA,GAAAlG,OAAAC,EAAA,EAAAD,CAAAkG,EAZL,EAaR,OADalG,OAAAC,EAAA,EAAAD,CAAAkG,EATA,EAWR,OAFQlG,OAAAC,EAAA,EAAAD,CAAAkG,EARA,EAWR,uBC13BhBC,GAAI,SAAAvH,GACb,OAAc,OAANA,QAAoBC,IAAND,EAAmB,GATtB,SAACwH,EAAKC,EAAKC,GAI9B,IAHA,IAAIC,EAAI,GACJC,EAAIF,GAAQ,IACZG,GAAKJ,GAAO,GAAKD,EAAIM,OAClBH,EAAEG,OAASD,GAAGF,GAAKC,EAC1B,OAAOD,EAAIH,EAImCO,CAAQ/H,EAAEgI,SAAS,IAAIC,cAAe,IAG3EC,GAAK,SAAAC,GAAI,OAAc,OAATA,QAA0BlI,IAATkI,EAAsB,GAAMC,MAAMC,KAAKF,GAAMhE,IAAI,SAAA0D,GAAC,OAAIN,GAAEM,KAAKS,KAAK,MASjGC,GAAgB,SAASC,EAAQC,GAC1C,IAAId,EAAIc,EAAMD,EAAOE,QAAQD,EAAK,IAAMD,EACxC,GAAKb,EAAEG,OAAS,EAAK,EACjB,OAAO,KAEX,GAAiB,IAAbH,EAAEG,OAAc,OAAO,KAE3B,IADA,IAAIvC,EAAI,IAAIoD,WAAWhB,EAAEG,OAAS,GACzBc,EAAE,EAAGA,EAAKjB,EAAEG,OAAS,EAAIc,IAC9BrD,EAAEqD,GAAKC,SAASlB,EAAEmB,OAAW,EAAJF,EAAO,GAAI,IAExC,OAAOrD,GChBEwD,GAAc,IACdC,GAAY,IAGZC,GAAgB,WAIvBC,GAAM,EACNC,GAAM,EACNC,GAAM,EACNC,GAAM,EACNC,GAAM,EAQZ,SAASC,GAAS3J,GACd,OAAQA,GAAwB,kBAATA,IAAsBwI,MAAMoB,QAAQ5J,GASxD,SAAS6J,GAAUC,GAAoB,QAAAC,EAAAC,UAAA9B,OAAT+B,EAAS,IAAAzB,MAAAuB,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATD,EAASC,EAAA,GAAAF,UAAAE,GAE1C,IAAKD,EAAQ/B,OAAQ,OAAO4B,EAE5B,IAAMK,EAASF,EAAQG,QAEvB,GAAIT,GAASG,IAAWH,GAASQ,GAC7B,IAAK,IAAM3E,KAAO2E,EACVR,GAASQ,EAAO3E,KACXsE,EAAOtE,IAAMhE,OAAO6I,OAAOP,EAAdtI,OAAAC,EAAA,EAAAD,CAAA,GAAyBgE,EAAM,KACjDqE,GAAUC,EAAOtE,GAAM2E,EAAO3E,KAE9BhE,OAAO6I,OAAOP,EAAdtI,OAAAC,EAAA,EAAAD,CAAA,GAAyBgE,EAAM2E,EAAO3E,KAKlD,OAAOqE,GAASS,WAAT,GAAUR,GAAVS,OAAqBN,IAGzB,SAASO,GAASC,GACrB,OAAc,OAAVA,QAA4BpK,IAAVoK,GAAwC,IAAjBA,EAAMvC,OAAqB,KAEhE,IADEa,WAAWN,KAAKgC,GAAOC,OAAO,SAACC,EAAeC,GAAhB,OAAiCD,EAAgBC,IACpE,KAAQ,IAOjC,SAASC,GAAYtC,GACjB,OAAIA,EAAK,KAAOY,IACZZ,EAAKA,EAAKuC,WAAa,KAAO1B,GAqKtC,SAAS2B,GAAkBxC,GAMvB,IAyCIyC,EAzCEC,EAAU,GAEZC,EAAM3C,EAAKe,IACX6B,EAAM5C,EAAKgB,IACX6B,EAAM7C,EAAKiB,IACXrE,EAAMoD,EAAKkB,IAIf,OAAQyB,GACJ,KAAK/J,EAEL,KAAKC,EACD,MACJ,QAEI,OADAiK,QAAQC,KAAR,uCAAAf,OAAoD5C,GAAEuD,GAAtD,MACO,KAGf,KAAMC,KAAO7J,GAET,OADA+J,QAAQC,KAAK,oCAAqC3D,GAAEwD,GAAMA,EAAK7J,GACxD,KAaX,GAVA2J,EAAQE,GAAO,GAMfF,EAAQE,GAAKC,GAAO,GAIA,IAAhB7C,EAAKL,OAAc,OAAO+C,EAE9B,KAAM9F,KAAOpC,IAET,OAAO,KAIX,GAAIoC,IAAQvD,EACRoJ,EAAW,YACR,GAAK7F,GAAOtD,GAAyBsD,GAAOjD,GAC9CiD,GAAOhD,GAAyBgD,GAAOzC,IACvCyC,GAAOxC,IAA8BwC,GAAOvC,GAC7CoI,EAAW,eACR,GAAI7F,IAAQtC,GACfmI,EAAW,WACR,IAAI7F,IAAQrC,GAIf,OADAuI,QAAQC,KAAK,iCAAkCnG,GACxC,KAHP6F,EAAW,MAkBf,GAPiB,SAAbA,IAGAC,EAAQE,GAAKC,GAAb,KAjFR,SAAuB7C,GACnB,IAAMV,EAAMU,EAAK,GACjB,OAAO/D,OAAO+G,aAAajB,MAAM,KAAM/B,EAAKiD,MAAM,EAAG,EAAI3D,IA+EzB4D,CAAclD,EAAKiD,MAAM9B,MAIxC,YAAbsB,EAQA,GANAC,EAAQE,GAAKC,GAAK/B,IAAlB7H,OAAAC,EAAA,EAAAD,CAAA,GACK2D,EAAM,CACHuG,MAAO,KAIXnD,EAAKL,OAAS,EAAG,CAGjB,IAAIyD,EAAIpD,EAAKmB,IAEb,GAAIiC,GAAK,GAAQA,GAAK,GAGlB,GAAIpD,EAAKL,OAASwB,GAAM,GAAI,CACxB,IAAI3B,EAvPxB,SAAwBQ,GAapB,MAAO,CACHqD,OAAQrD,EAAK,GAAK,GAAK,EAAI,EAC3BsD,OAAQ,CACJC,QAASvD,EAAK,GACdwD,SAAUxD,EAAK,GACfA,KAAM,CAACA,EAAK,IAAKA,EAAK,IAAKA,EAAK,KAChCyD,OAAQzD,EAAK,MAoOG0D,CAAe1D,EAAKiD,MAAM9B,GAAKA,GAAM,KAC7CuB,EAAQE,GAAKC,GAAK/B,IAAelE,GAAjC,MAA+C4C,EAAE6D,OAAS7D,EAAE8D,YAE5DR,QAAQC,KAAR,gEAAAf,OAA6EhC,EAAKL,QAAUI,GAAGC,SAGhG,GAAIoD,IAAMpE,GAAsB,CAKnC,IAAI2E,EAzOpB,SAAwB3D,GACpB,MAAO,CACH4D,aAAc5D,EAAK,IAuOI6D,CAAe7D,EAAKiD,MAAM9B,GAAKnB,EAAKL,OAAS,IAC5D+C,EAAQE,GAAKC,GAAK/B,IAAelE,GAAO0E,GAAUoB,EAAQE,GAAKC,GAAK/B,IAAelE,GAAM+G,QAEtF,GAAIP,GAAK,IAAQA,GAAK,GAAM,CAK/B,IAAIU,EA1OpB,SAAuB9D,GAcnB,IAPA,IAEI+D,EACA7B,EACA8B,EAJAC,EAAM,CAACd,MAAM,IAMb1C,EAAI,EACDA,EAAET,EAAKL,QAAQ,CAClB,IAAIuE,EAAIlE,EAAKS,GAKb,OAJQ,IAAJA,IACAuD,EAAO,KAAOE,EAAI,IAAQ,EAAI,IAE5BF,KAAQC,EAAId,QAAQc,EAAId,MAAMa,GAAQ,IACpCE,GACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAEDH,EAAW/D,IADXS,GAEAA,IAEIyB,EADa,IAAb6B,EACQ/D,EAAKS,GAELR,MAAMC,KAAKF,EAAKiD,MAAMxC,EAAGA,EAAIsD,IAEzCtD,GAAKsD,EACLE,EAAId,MAAMa,GAAV,cAAmC9B,EACnC,MACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAED6B,EAAW/D,IADXS,GAEAA,IAEIyB,EADa,IAAb6B,EACQ/D,EAAKS,GAELR,MAAMC,KAAKF,EAAKiD,MAAMxC,EAAGA,EAAIsD,IAEzCtD,GAAKsD,EACLE,EAAId,MAAMa,GAAV,iBAAsC9B,EACtC,MACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAED6B,EAAW/D,IADXS,GAEAA,IAEIyB,EADa,IAAb6B,EACQ/D,EAAKS,GAELR,MAAMC,KAAKF,EAAKiD,MAAMxC,EAAGA,EAAIsD,IAEzCtD,GAAKsD,EACLE,EAAId,MAAMa,GAAV,mBAAwC9B,EACxC,MACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAED6B,EAAW/D,IADXS,GAEAA,IAEIyB,EADa,IAAb6B,EACQ/D,EAAKS,GAELR,MAAMC,KAAKF,EAAKiD,MAAMxC,EAAGA,EAAIsD,IAEzCtD,GAAKsD,EACLE,EAAId,MAAMa,GAAV,QAA6B9B,EAC7B,MACJ,KAAK,IACDzB,EAAIT,EAAKL,OACT,MACJ,QAEIc,KAKZ,OAAOwD,EAuImBE,CAAcnE,EAAKiD,MAAM9B,GAAKnB,EAAKL,OAAS,IAC1D+C,EAAQE,GAAKC,GAAK/B,IAAelE,GAAO0E,GAAUoB,EAAQE,GAAKC,GAAK/B,IAAelE,GAAMkH,QAEtF,GAAU,MAANV,EAOP,OADAN,QAAQC,KAAR,uCAAAf,OAAoD5C,GAAEgE,KAC/C,UAIXV,EAAQE,GAAKC,GAAK/B,IAAlB7H,OAAAC,EAAA,EAAAD,CAAA,GACK2D,EAAM,IAOnB,GAAiB,SAAb6F,EAAqB,CAErBC,EAAQE,GAAKC,GAAb,KAA4B,GAG5B,IAAIO,EAAIpD,EAAKmB,IAEb,KAAIiC,GAAK,GAAQA,GAAK,IAYlB,OADAN,QAAQC,KAAR,uCAAAf,OAAoD5C,GAAEgE,KAC/C,KATP,GAAIpD,EAAKL,OAASwB,GAAI,GAAI,CACtB,IAAI3B,EArKpB,SAAwBQ,GACpB,MAAO,CACHqD,OAAQrD,EAAK,GAAK,GAAK,EAAI,EAC3BsD,OAAQ,CACJC,QAASvD,EAAK,GACdwD,SAAUxD,EAAK,GACfA,KAAM,CAACA,EAAK,IAAKA,EAAK,IAAKA,EAAK,OA+JpBoE,CAAepE,EAAKiD,MAAM9B,GAAKA,GAAM,KAC7CuB,EAAQE,GAAKC,GAAb,KAA0BrD,EAAE6D,OAAS7D,EAAE8D,YAEvCR,QAAQC,KAAR,gEAAAf,OAA6EhC,EAAKL,QAAUI,GAAGC,IAqC3G,MA1BiB,QAAbyC,IAEAC,EAAQE,GAAKC,GAAb,IAA2B,IAwBxBH,EAUX,SAAS2B,GAAerE,GAEpB,GAAa,OAATA,EAAe,OAAO,KAO1B,IALA,IAAIsE,EAAU,GAGV7D,EAAI,KAIJA,EAAIT,EAAKuE,QAAQ3D,GAAaH,IACtB,IAHC,CAKTA,IACA,IAAI+D,EAAIxE,EAAKuE,QAAQ1D,GAAWJ,GAE5BgE,EAAmBxE,MAAMC,KAAKF,EAAKiD,MAAMxC,EAAGA,EAAE,IAAIzE,IAAI,SAAA0D,GAAC,OAAIN,GAAEM,KAAKS,KAAK,KAC3E,GAAIsE,IAAoBC,yBAEpB,OADA5B,QAAQ6B,IAAI,6DAA8DlE,EAAG+D,EAAGC,EAAiB,IAAK1E,GAAGC,IAClG,KAGX,GAAkB,MAAdA,EAAKS,EAAE,GAEP,OADAqC,QAAQC,KAAR,uDAAAf,OAAoEhC,EAAKS,EAAE,EAAG,KACvE,KAGX,IAAI6C,EAASd,GAAkBxC,EAAKiD,MAAMxC,EAAG+D,IAEzClB,GACAhC,GAAUgD,EAAShB,GAO3B,OAAOgB,EAqGJ,SAASM,KACZ,IAAIC,EAAM,CACNhM,EACAC,EACAyB,IAEAuK,EAAK7C,GAAS4C,GAElB,OADAA,EAAI7H,KAAK8H,GACFnM,EAAaqJ,OAAO6C,GAMxB,SAASE,GAAcC,GAC1B,IAAIH,EAAM,CACNhM,EACAC,EACAkM,EACAzK,IAEAuK,EAAK7C,GAAS4C,GAElB,OADAA,EAAI7H,KAAK8H,GACFnM,EAAaqJ,OAAO6C,GAMxB,SAASI,GAAiBD,EAAaE,GAI1C,IAAIL,EAAM,CACNhM,EACAC,EACAkM,EACAE,GAEAJ,EAAK7C,GAAS4C,GAElB,OADAA,EAAI7H,KAAK8H,GACFnM,EAAaqJ,OAAO6C,GAwI/B,SAASM,GAA8BH,EAAaE,EAAWlF,GAA2B,IAArBoF,EAAqB3D,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,IAAAA,UAAA,GACtF,OAAOxI,OAAAoM,GAAA,EAAApM,CAjCX,SAA+B+L,EAAaE,EAAWI,GAEnD,KAF8E7D,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,IAAAA,UAAA,MAEzD6D,EAAKC,qBAAsB,MAAO,GAGvD,IAAIV,EAAM,CACNjM,EACAE,EACAkM,EACAE,EACAlG,GACA,EACAsG,EAAI,cAOR,OAHAT,EAAI7H,KAAKiF,GAAS4C,IAGX,CAAClM,EAAaqJ,OAAO6C,IAerBW,CAAsBR,EAAaE,EAAWlF,EAAKlH,GAAekM,GAAalE,IAAeoE,GAAYE,IADjHpD,OAAA/I,OAAAoM,GAAA,EAAApM,CA/HJ,SAA+B+L,EAAaE,EAAW/B,GAInD,IAJ+E,IAArBiC,EAAqB3D,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,IAAAA,UAAA,GAE3EgE,EAAO,GAFoEC,EAIjEzM,OAAO0M,KAAKxC,GAA1ByC,EAAA,EAAAA,EAAAF,EAAA/F,OAAAiG,IAAkC,CAA7B,IAAInF,EAACiF,EAAAE,GAEF5B,EAAOb,EAAM1C,GAEjB,GAAK2E,GAAgBpB,EAAK6B,QAA1B,CAGA,IAAIhB,EAAM,CACNjM,EACAE,EACAkM,EACAE,GAGJL,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGuD,EAAKT,QAAS,GACvCsB,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGuD,EAAKR,SAAU,GACxCqB,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGuD,EAAKhE,KAAK,GAAI,GACvC6E,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGuD,EAAKhE,KAAK,GAAI,GACvC6E,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGuD,EAAKhE,KAAK,GAAI,GACvC6E,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGuD,EAAKP,QAW9BoB,EAAI7H,KAAKiF,GAAS4C,IAGlBY,EAAKzI,KAAKrE,EAAaqJ,OAAO6C,KAKlC,OAAOY,EAuFAK,CAAsBd,EAAaE,EAAWlF,EAAKlH,GAAekM,GAAalE,IAAeoE,GAAhD,MAAqEE,IAF1HnM,OAAAoM,GAAA,EAAApM,CAlFJ,SAAkC+L,EAAaE,EAAW/B,GAItD,IAJkF,IAArBiC,EAAqB3D,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,IAAAA,UAAA,GAE9EgE,EAAO,GAFuEM,EAIpE9M,OAAO0M,KAAKxC,GAA1B6C,EAAA,EAAAA,EAAAD,EAAApG,OAAAqG,IAAkC,CAA7B,IAAIvF,EAACsF,EAAAC,GAEFhC,EAAOb,EAAM1C,GAEjB,GAAK2E,GAAgBpB,EAAKiC,YAA1B,CAGA,IAAIpB,EAAM,CACNjM,EACAE,EACAkM,EACAE,GAWJL,EAAI7H,KAAW,GAALyD,EAAE,GAAO,GAAM,EAAGuD,EAAKkC,cAAe,GAChDrB,EAAI7H,KAAW,GAALyD,EAAE,GAAO,GAAM,EAAGuD,EAAKmC,iBAAkB,GACnDtB,EAAI7H,KAAW,GAALyD,EAAE,GAAO,GAAM,EAAGuD,EAAKoC,mBAAoB,GAErDvB,EAAI7H,KAAW,GAALyD,EAAE,GAAO,GAAM,EAAGuD,EAAKqC,SAGjCxB,EAAI7H,KAAKiF,GAAS4C,IAGlBY,EAAKzI,KAAKrE,EAAaqJ,OAAO6C,KAGlC,OAAOY,EA8CAa,CAAyBtB,EAAaE,EAAWlF,EAAKlH,GAAekM,GAAalE,IAAeoE,GAAhD,MAAqEE,KAoEjI,SAASmB,GAAkCvB,EAAahF,GACpD,OAjEJ,SAAgCgF,EAAawB,GAIzC,IAJwE,IAArBpB,EAAqB3D,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,IAAAA,UAAA,GAEpEgE,EAAO,GAF6DgB,EAI1DxN,OAAO0M,KAAKa,GAA1BE,EAAA,EAAAA,EAAAD,EAAA9G,OAAA+G,IAAqC,CAAhC,IAAIjG,EAACgG,EAAAC,GAEFC,EAAUH,EAAS/F,GAEvB,GAAKkG,EAAQd,SAAYT,EAAzB,CAGA,IAAIP,EAAM,CACNjM,EACAE,EACAkM,EACA1K,IAGJuK,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGkG,EAAQpD,QAAS,GAC1CsB,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGkG,EAAQnD,SAAU,GAC3CqB,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGkG,EAAQ3G,KAAK,GAAI,GAC1C6E,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGkG,EAAQ3G,KAAK,GAAI,GAC1C6E,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGkG,EAAQ3G,KAAK,GAAI,GAC1C6E,EAAI7H,KAAW,GAALyD,EAAE,GAAO,EAAG,EAAGkG,EAAQlD,QAGjCoB,EAAI7H,KAAKiF,GAAS4C,IAGlBY,EAAKzI,KAAKrE,EAAaqJ,OAAO6C,KAGlC,OAAOY,EAiCAmB,CAAuB5B,EAAahF,EAAKlH,GAAekM,GAApB,UCnzBzC6B,cAEF,SAAAA,IAAc,IAAAC,EAAAC,KAAA9N,OAAA+N,EAAA,EAAA/N,CAAA8N,KAAAF,GAAAE,KAuCdE,kBAAoB,WAChBH,EAAKI,aAAeJ,EAAKI,aAxCfH,KAwPdI,UAAY,SAAAtC,GAER,GAAKiC,EAAKM,KAAKC,OAAf,CAIA,IAAIC,EAAM3P,EAAWmP,EAAKM,KAAKC,QAC1BC,EAOLA,EAAIH,UAAUzO,EAAiBmM,GAN3B/B,QAAQC,KAAR,gBAAAf,OAA6B8E,EAAKM,KAAKC,OAAvC,oBALAvE,QAAQC,KAAK,0CA3PPgE,KA6QdQ,UAAY,SAAC1C,EAAK2C,GAAoD,IAArCC,EAAqChG,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAAvB,mBAC3CqF,EAAKY,SAAS,CAACC,MAAM,EAAMF,YAAaA,EAAaG,cAAe,EAAGJ,kBACvEV,EAAKK,UAAUtC,IA9QfkC,KAAK/G,KAAO,KAEZ+G,KAAKc,cAAgB,GACrBd,KAAKe,eAAiB,GACtBf,KAAKgB,eAAiB,GACtBhB,KAAKK,KAAO,CACR7P,OAAQ,GACRG,QAAS,GACTsQ,MAAO,EACPX,OAAQ,GAGZN,KAAKY,MAAO,EACZZ,KAAKU,YAAc,cACnBV,KAAKS,eAAiB,EACtBT,KAAKkB,UAAY,EAEjBlB,KAAKmB,SAAU,EACfnB,KAAKoB,aAAc,EACnBpB,KAAKG,aAAc,EACnBH,KAAKlB,SAAU,sDAaf/C,QAAQ6B,IAAI,qBACZoC,KAAK/G,KAAO,KACZ+G,KAAKgB,eAAiB,oCAO8D,IAAAK,EAAA3G,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAAJ,GAAI4G,EAAAD,EAAhFT,YAAgF,IAAAU,KAAAC,EAAAF,EAAlEX,mBAAkE,IAAAa,EAApD,KAAoDA,EAAAC,EAAAH,EAA9CZ,qBAA8C,IAAAe,GAA7B,EAA6BA,EAAAC,EAAAJ,EAA1BR,qBAA0B,IAAAY,GAAT,EAASA,EAGhFC,EAAOd,IAASZ,KAAKY,KAEzBc,GADAA,EAAOA,GAAyB,OAAhBhB,GAAwBA,IAAgBV,KAAKU,cAC7CD,EAAgB,GAAKA,IAAkBT,KAAKS,cAE5D,IAAIS,GAAY,EACZlB,KAAKS,cAAgB,GAAKI,EAAgB,IAC1CK,EAAsE,EAA3DS,KAAKC,MAAMf,EAAgBb,KAAKS,cAAgB,IAAM,GACjEiB,EAAOA,GAAUR,GAAY,GAAOA,IAAalB,KAAKkB,UAGtDQ,IACI1B,KAAKY,OAASA,IAAMZ,KAAKY,KAAOA,GAChB,OAAhBF,IAAsBV,KAAKU,YAAcA,GACzCD,EAAgB,GAAKA,IAAkBT,KAAKS,gBAAeT,KAAKS,cAAgBA,IACvE,IAATG,GACAZ,KAAKS,eAAiB,EACtBT,KAAKkB,UAAY,IAEbT,EAAgB,IAAGT,KAAKS,cAAgBA,GACxCT,KAAKkB,WAAaA,IAClBlB,KAAKkB,SAAWA,wCAY0D,IAAAW,EAAA7B,KAAA8B,EAAApH,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAAJ,GAAIqH,GAAAD,EAAhFlB,KAAgFkB,EAAlEpB,oBAAkE,IAAAqB,EAApD,KAAoDA,EAAAC,EAAAF,EAA9CrB,qBAA8C,IAAAuB,GAA7B,EAA6BA,EAAAC,EAAAH,EAA1BjB,qBAA0B,IAAAoB,GAAT,EAASA,EACtFC,WAAW,kBAAML,EAAKM,OAAO,CAACvB,MAAM,KAAS,KAC7CZ,KAAKmC,OAAO,CAACvB,MAAM,EAAMF,cAAaD,gBAAeI,qDAGrC,IAAAuB,EAAApC,KAAXqC,EAAW3H,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAAH,EACT2H,EAAQ,EACRrC,KAAKmC,OAAO,CAACvB,MAAM,IAEnBsB,WAAW,kBAAME,EAAKD,OAAO,CAACvB,MAAM,KAASyB,wCAIxCpE,GAET+B,KAAKc,cAAgB7C,wCAGXqE,GAEVtC,KAAKe,eAAiBuB,yCAOXnM,GACX6J,KAAK/G,KAAKlH,GAAeiO,KAAKc,eAAe/G,IAAeiG,KAAKe,gBAAjE,aAAmG5K,EACnG6J,KAAK/G,KAAKlH,GAAeiO,KAAKc,eAAe/G,IAAeiG,KAAKe,gBAAjE,sBAA2G,EAC3Gf,KAAKuC,wBAAwBvC,KAAKe,eAAgB3C,GAA8B4B,KAAKc,cAAed,KAAKe,eAAgBf,KAAK/G,OAC9H+G,KAAKlB,SAAU,kDAGKX,EAAWL,GAC1BkC,KAAKgB,eAAehL,eAAegK,KAAKc,iBACzCd,KAAKgB,eAAehB,KAAKc,eAAiB,IAEzCd,KAAKgB,eAAehB,KAAKc,eAAe9K,eAAe+D,MACxDiG,KAAKgB,eAAehB,KAAKc,eAAe/G,IAAiB,IAE7DiG,KAAKgB,eAAehB,KAAKc,eAAe/G,IAAeoE,GAAaL,2CAGvDG,EAAauE,QAEbzR,IAATyR,GAA+B,OAATA,IAEtBA,EAAK5J,OAAS,EACdmD,QAAQC,KAAR,sCAAAf,OAAmDuH,KAIvDxC,KAAK/G,KAAKlH,GAAekM,GAAzB,KAAgDuE,EAChDxC,KAAK/G,KAAKlH,GAAekM,GAAzB,SAAmD,EAG9C+B,KAAKgB,eAAehL,eAAeiI,KAAc+B,KAAKgB,eAAe/C,GAAe,IACpF+B,KAAKgB,eAAe/C,GAAajI,eAAe,UAASgK,KAAKgB,eAAe/C,GAApB,KAA2C,IAEzG+B,KAAKgB,eAAe/C,GAApB,WD0oBR,SAA8BA,EAAahF,GAGvC,IAAI6E,EAAM,CACNjM,EACAE,EACAkM,EACA3L,EACA,GAGEmG,EAAIQ,EAAKlH,GAAekM,GAApB,KAGVH,EAAI7H,KAAKwC,EAAEG,QAEX,IAAK,IAAIc,EAAE,EAAGA,EAAIjB,EAAEG,OAAQc,IACxBoE,EAAI7H,KAAKwC,EAAEgK,WAAW/I,IAO1B,OAHAoE,EAAI7H,KAAKiF,GAAS4C,IAGX,CAAClM,EAAaqJ,OAAO6C,IClqB4B4E,CAAqBzE,EAAa+B,KAAK/G,MAE3F+G,KAAKlB,SAAU,yDAMUX,EAAWwE,EAAWxM,GAAoC,IAA7ByM,EAA6BlI,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAApBsF,KAAKc,cAIhEhQ,EAAI6I,SAASxD,EAAO,IAExB6J,KAAK/G,KAAKlH,GAAe6Q,GAAQ7I,IAAeoE,GAAhD,MAAoEwE,GAApE,SAA6F7R,EAGzFkP,KAAK/G,KAAKlH,GAAe6Q,GAAQ7I,IAAeoE,GAAhD,MAAoEwE,GAApE,OADA7R,IAAMwE,GACqF,EAEA,EAG/F0K,KAAK/G,KAAKlH,GAAe6Q,GAAQ7I,IAAeoE,GAAhD,MAAoEwE,GAApE,SAA4F,EAE5F3C,KAAKuC,wBAAwBpE,EAAWC,GAA8BwE,EAAQzE,EAAW6B,KAAK/G,OAE9F+G,KAAKlB,SAAU,4CAMDX,EAAWwE,EAAWE,EAAUC,EAAW3M,GAAoC,IAA7ByM,EAA6BlI,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAApBsF,KAAKc,cAE9E/E,QAAQ6B,IAAR,qBAAA3C,OAAiCkD,EAAjC,MAAAlD,OAA+C0H,EAA/C,MAAA1H,OAA6D4H,EAA7D,MAAA5H,OAA0E6H,EAA1E,MAAA7H,OAAwF9E,EAAxF,MAEA,IAAIrF,EAAI6I,SAASxD,EAAO,IAMP,SAAb0M,EACA7C,KAAK/G,KAAKlH,GAAe6Q,GAAQ7I,IAAeoE,GAAhD,MAAoEwE,GAApE,KAAuFG,GAAahS,EAEpGkP,KAAK/G,KAAKlH,GAAe6Q,GAAQ7I,IAAeoE,GAAhD,MAAoEwE,GAAWE,GAAY/R,EAW3F+R,EAASE,WAAW,QACpB/C,KAAK/G,KAAKlH,GAAe6Q,GAAQ7I,IAAeoE,GAAhD,MAAoEwE,GAApE,aAAgG,EAEhG3C,KAAK/G,KAAKlH,GAAe6Q,GAAQ7I,IAAeoE,GAAhD,MAAoEwE,GAApE,SAA4F,EAGhG3C,KAAKuC,wBAAwBpE,EAAWC,GAA8BwE,EAAQzE,EAAW6B,KAAK/G,OAE9F+G,KAAKlB,SAAU,6CAMAkE,EAAcH,EAAUC,EAAW3M,GAElD,IAAIrF,EAAI6I,SAASxD,EAAO,IAElB8M,EAAIjD,KAAKc,cAMU,SAAb+B,EACA7C,KAAK/G,KAAKlH,GAAekR,GAAzB,KAAoCD,GAApC,KAA0DF,GAAahS,EAEvEkP,KAAK/G,KAAKlH,GAAekR,GAAzB,KAAoCD,GAAcH,GAAY/R,EAEjD,aAAb+R,IAEI7C,KAAK/G,KAAKlH,GAAekR,GAAzB,KAAoCD,GAApC,OADAlS,IAAMwE,GACwD,EAEA,GAGtE0K,KAAK/G,KAAKlH,GAAekR,GAAzB,KAAoCD,GAApC,SAA+D,EAE/DhD,KAAKlB,SAAU,EAEVkB,KAAKgB,eAAehL,eAAeiN,KAAIjD,KAAKgB,eAAeiC,GAAK,IAChEjD,KAAKgB,eAAeiC,GAAGjN,eAAe,UAASgK,KAAKgB,eAAeiC,GAApB,KAAiC,IAGrFjD,KAAKgB,eAAeiC,GAApB,WAA0CzD,GAAkCyD,EAAGjD,KAAK/G,yCAoCrFqD,GAEH0D,KAAKK,KAAKC,QAAUN,KAAKK,KAAKY,OAC9BjB,KAAKQ,UAAUxC,GAAc1B,GDjRG,+EC0RxB4G,8FACNC,QAAQC,IAAIF,EAAMjO,IAAN,eAAAoO,EAAAnR,OAAAoR,EAAA,EAAApR,CAAAqR,EAAAlN,EAAAmN,KACd,SAAAC,EAAMC,GAAN,IAAAzK,EAAA,OAAAsK,EAAAlN,EAAAsN,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,YACQJ,EAAKK,KJjTI,QIgTjB,CAAAH,EAAAE,KAAA,QAEQ/H,QAAQC,KAAR,GAAAf,OAAgByI,EAAKlB,KAArB,oBAAAvH,OAA4CyI,EAAKK,OACjDC,EAAKC,WAHbL,EAAAE,KAAA,uBAKQE,EAAKrD,SAAS,CAACC,MAAM,EAAMF,YAAa,oBALhDkD,EAAAM,GAMyBzK,WANzBmK,EAAAE,KAAA,EAM0C,IAAIK,SAAST,GAAMU,cAN7D,OAAAR,EAAAS,GAAAT,EAAAU,KAOY/I,GADEtC,EANd,IAAA2K,EAAAM,GAAAN,EAAAS,KAeYL,EAAK/K,KAAOsB,GAAUyJ,EAAK/K,MAAQ,GAAIqE,GAAerE,IAGtD8C,QAAQ6B,IAAI,2BAA4B5E,GAAGC,EAAKiD,MAAM,EAAG,KAE7D8H,EAAKC,WApBb,yBAAAL,EAAAW,SAAAd,MADc,gBAAAe,GAAA,OAAAnB,EAAArI,MAAAgF,KAAAtF,YAAA,yIA8BR,IAAA+J,EAAAzE,KAGVA,KAAKW,SAAS,CAACC,MAAM,EAAMF,YAAa,oBAExCxO,OAAOwS,oBAAoB1E,KAAKgB,gBAAgB2D,QAC5C,SAAAC,GACI1S,OAAOwS,oBAAoBD,EAAKzD,eAAe4D,IAAWD,QACtD,SAAAE,GACI3S,OAAOwS,oBAAoBD,EAAKzD,eAAe4D,GAAUC,IAAWF,QAChE,SAAAG,GACIL,EAAKzD,eAAe4D,GAAUC,GAAUC,GAAMH,QAC1C,SAAA7G,GACI2G,EAAKrE,UAAUtC,WAW/CoE,WACI,WACIuC,EAAK3F,SAAU,EACf2F,EAAKzD,eAAiB,GACtByD,EAAKM,WAAWN,EAAK3D,gBAEzB,uCA7TJ,OAA4B,IAArBd,KAAKK,KAAKC,QAAoC,IAApBN,KAAKK,KAAKY,eAmUnD+D,mBAASlF,GAAY,CACjB7G,KAAMgM,aACNnE,cAAemE,aACflE,eAAgBkE,aAEhBjE,eAAgBiE,aAChB5E,KAAM4E,aAENC,UAAWC,WACXvE,KAAMqE,aACNvE,YAAauE,aACb/D,SAAU+D,aACV9D,QAAS8D,aACT7D,YAAa6D,aACb9E,YAAa8E,aACbnG,QAASmG,eAIN,IAAMG,GAAQ,IAAItF,sfC/EVuF,iKA/SP,OACIC,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBAEXF,EAAAjP,EAAAkP,cAAA,0BAEAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,4DACQD,EAAAjP,EAAAkP,cAAA,KAAGE,KAAK,0CAA0CjL,OAAO,SAASkL,IAAI,uBAAtE,gBADR,KAEAJ,EAAAjP,EAAAkP,cAAA,4BAAmBD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,UAAnB,QAA8DF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,SAA9D,2DACoCF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,OADpC,yCAEAF,EAAAjP,EAAAkP,cAAA,wEACAD,EAAAjP,EAAAkP,cAAA,6CAAoCD,EAAAjP,EAAAkP,cAAA,KAAGE,KAAK,kDAAkDjL,OAAO,SAASkL,IAAI,uBAA9E,0BAApC,MAGJJ,EAAAjP,EAAAkP,cAAA,yBAEAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,+IACAD,EAAAjP,EAAAkP,cAAA,mJAA0ID,EAAAjP,EAAAkP,cAAA,KAAGE,KAAK,4DAA4DjL,OAAO,SAASkL,IAAI,uBAAxF,aAA1I,MAGJJ,EAAAjP,EAAAkP,cAAA,mCACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,mFACAD,EAAAjP,EAAAkP,cAAA,4DACAD,EAAAjP,EAAAkP,cAAA,qEACAD,EAAAjP,EAAAkP,cAAA,SAAGD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,QAAhB,OAAH,KACAF,EAAAjP,EAAAkP,cAAA,OAAKI,IAAI,gBAAgBC,IAAI,KAC7BN,EAAAjP,EAAAkP,cAAA,SAAGD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,QAAhB,WAAH,KACAF,EAAAjP,EAAAkP,cAAA,OAAKI,IAAI,oBAAoBC,IAAI,KACjCN,EAAAjP,EAAAkP,cAAA,yHAGJD,EAAAjP,EAAAkP,cAAA,6BACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,uBAAcD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,OAAd,WAAyDF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,eAAhB,WAAzD,iCACyBF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,OADzB,0CAEAF,EAAAjP,EAAAkP,cAAA,0DAAiDD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,QAAhB,SAAjD,0EACmDF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,QAAhB,QADnD,8BAGAF,EAAAjP,EAAAkP,cAAA,8EAEAD,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,wBACAD,EAAAjP,EAAAkP,cAAA,wDAA+CD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,MAA/C,KACAF,EAAAjP,EAAAkP,cAAA,gCAAuBD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,MAAvB,KACAF,EAAAjP,EAAAkP,cAAA,gKACgBD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,QAAhB,UADhB,uDAEAF,EAAAjP,EAAAkP,cAAA,yBAAgBD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,UAAhB,8BAAiFF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,KAAjF,uBAAsIF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,KAAtI,MAGJF,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,wBACAD,EAAAjP,EAAAkP,cAAA,wDAA+CD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,MAA/C,KACAF,EAAAjP,EAAAkP,cAAA,gCAAuBD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,MAAvB,KACAF,EAAAjP,EAAAkP,cAAA,wDAA+CD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,MAA/C,2DACAF,EAAAjP,EAAAkP,cAAA,yBAAgBD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,UAAhB,8BAAiFF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,KAAjF,uBAAsIF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,UAAhB,KAAtI,OAKRF,EAAAjP,EAAAkP,cAAA,+BACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,iHACAD,EAAAjP,EAAAkP,cAAA,qDAA4CD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,eAAhB,QAA5C,+LAGAF,EAAAjP,EAAAkP,cAAA,SAAOC,UAAU,gBACbF,EAAAjP,EAAAkP,cAAA,aACAD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,UAAID,EAAAjP,EAAAkP,cAAA,WAAJ,QACAD,EAAAjP,EAAAkP,cAAA,UAAID,EAAAjP,EAAAkP,cAAA,WAAJ,eACAD,EAAAjP,EAAAkP,cAAA,mBAAUD,EAAAjP,EAAAkP,cAAA,WAAV,SACAD,EAAAjP,EAAAkP,cAAA,mBAAUD,EAAAjP,EAAAkP,cAAA,WAAV,UACAD,EAAAjP,EAAAkP,cAAA,mBAAUD,EAAAjP,EAAAkP,cAAA,WAAV,SACAD,EAAAjP,EAAAkP,cAAA,mBAAUD,EAAAjP,EAAAkP,cAAA,WAAV,UACAD,EAAAjP,EAAAkP,cAAA,mBAAUD,EAAAjP,EAAAkP,cAAA,WAAV,SACAD,EAAAjP,EAAAkP,cAAA,mBAAUD,EAAAjP,EAAAkP,cAAA,WAAV,YAGJD,EAAAjP,EAAAkP,cAAA,aACAD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,aACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,2FACAF,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,eAAd,4BACAF,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,eAAd,4BACAF,EAAAjP,EAAAkP,cAAA,oBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,cACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,sDACAF,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,eAAd,oCACAF,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,eAAd,gCACAF,EAAAjP,EAAAkP,cAAA,oBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,WACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,SACAF,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,yBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,uBACAD,EAAAjP,EAAAkP,cAAA,oBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,QACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,8DACAF,EAAAjP,EAAAkP,cAAA,kBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,sBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,iBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,eACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,mEACAF,EAAAjP,EAAAkP,cAAA,kBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,sBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,iBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,kBACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,iEACAF,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,sBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,sBACAD,EAAAjP,EAAAkP,cAAA,oBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,gBACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,yCACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,gBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,iBACAD,EAAAjP,EAAAkP,cAAA,oBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,eACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,8DACAF,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,iBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,iBACAD,EAAAjP,EAAAkP,cAAA,oBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,aACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,4DACAF,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,iBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,iBACAD,EAAAjP,EAAAkP,cAAA,oBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,wBACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,uCACAF,EAAAjP,EAAAkP,cAAA,uBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,iBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,iBACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,wBACAF,EAAAjP,EAAAkP,cAAA,kBACAD,EAAAjP,EAAAkP,cAAA,oBAAWD,EAAAjP,EAAAkP,cAAA,WAAX,UAAwBD,EAAAjP,EAAAkP,cAAA,WAAxB,WACAD,EAAAjP,EAAAkP,cAAA,mBACAD,EAAAjP,EAAAkP,cAAA,kBAASD,EAAAjP,EAAAkP,cAAA,WAAT,QAAoBD,EAAAjP,EAAAkP,cAAA,WAApB,QAA+BD,EAAAjP,EAAAkP,cAAA,WAA/B,SACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,iBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,iBACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,+BACAF,EAAAjP,EAAAkP,cAAA,oBACAD,EAAAjP,EAAAkP,cAAA,UAAID,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,YAAhB,oBAAkDF,EAAAjP,EAAAkP,cAAA,WAAtD,YAAqED,EAAAjP,EAAAkP,cAAA,WAArE,cACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,gBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,iBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,kBACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,sCACAF,EAAAjP,EAAAkP,cAAA,uBACAD,EAAAjP,EAAAkP,cAAA,0BAAiBD,EAAAjP,EAAAkP,cAAA,WAAjB,iBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,gBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,iBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,eACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,2CACAF,EAAAjP,EAAAkP,cAAA,4BACAD,EAAAjP,EAAAkP,cAAA,oBAAWD,EAAAjP,EAAAkP,cAAA,WAAX,OAAqBD,EAAAjP,EAAAkP,cAAA,WAArB,SAAiCD,EAAAjP,EAAAkP,cAAA,WAAjC,UACAD,EAAAjP,EAAAkP,cAAA,kBACAD,EAAAjP,EAAAkP,cAAA,iCACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,iBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,gBACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,8CACAF,EAAAjP,EAAAkP,cAAA,4BACAD,EAAAjP,EAAAkP,cAAA,oBAAWD,EAAAjP,EAAAkP,cAAA,WAAX,OAAqBD,EAAAjP,EAAAkP,cAAA,WAArB,SAAiCD,EAAAjP,EAAAkP,cAAA,WAAjC,UACAD,EAAAjP,EAAAkP,cAAA,uBACAD,EAAAjP,EAAAkP,cAAA,0BAAiBD,EAAAjP,EAAAkP,cAAA,WAAjB,iBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,iBAEJD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,OACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,aAAd,wDACAF,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,gBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,gBACAD,EAAAjP,EAAAkP,cAAA,MAAIC,UAAU,UAAd,YACAF,EAAAjP,EAAAkP,cAAA,oBAMZD,EAAAjP,EAAAkP,cAAA,gCACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,+BACAD,EAAAjP,EAAAkP,cAAA,4CACAD,EAAAjP,EAAAkP,cAAA,wDACAD,EAAAjP,EAAAkP,cAAA,iCACAD,EAAAjP,EAAAkP,cAAA,+EACAD,EAAAjP,EAAAkP,cAAA,iEAAwDD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,QAAhB,mBAAxD,6DAGJF,EAAAjP,EAAAkP,cAAA,kCAEAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,oEACAD,EAAAjP,EAAAkP,cAAA,OAAKI,IAAI,cAAcC,IAAI,MAE/BN,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,iJACAD,EAAAjP,EAAAkP,cAAA,OAAKI,IAAI,cAAcC,IAAI,OAInCN,EAAAjP,EAAAkP,cAAA,iBAEAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,SAAGD,EAAAjP,EAAAkP,cAAA,iCAGPD,EAAAjP,EAAAkP,cAAA,0BAEAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,kHACAD,EAAAjP,EAAAkP,cAAA,6FAGJD,EAAAjP,EAAAkP,cAAA,wBAEAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,kFACAD,EAAAjP,EAAAkP,cAAA,iDACWD,EAAAjP,EAAAkP,cAAA,KAAGE,KAAK,iDAAiDjL,OAAO,SAASkL,IAAI,uBAA7E,iBACXJ,EAAAjP,EAAAkP,cAAA,8GAGJD,EAAAjP,EAAAkP,cAAA,oBAEAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OACXF,EAAAjP,EAAAkP,cAAA,qNAzSDM,oCC+DNC,GAAkB,SAAAxJ,GAC3B,IAAIyJ,EAAKpM,SAAS2C,GAClB,GAAW,IAAPyJ,EAAU,MAAO,UAErB,IAAIzP,EAAIqL,KAAKqE,OAAOD,EAAK,GAAK,GAC1BrM,GAAKqM,EAAK,GAAK,EAAI,EACvB,OAAO7Q,OAAO+G,aAAa3F,EAAI,IAAMoD,EAAEZ,6cCpD3C,IAAMmN,GAAY,SAAA5E,GAAkB,IAAf5B,EAAe4B,EAAf5B,SACjB,OAAiB,OAAbA,QAAkC1O,IAAb0O,EAA+B,KAEpD6F,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBACXF,EAAAjP,EAAAkP,cAAA,aACID,EAAAjP,EAAAkP,cAAA,aACAD,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIW,QAAS,EAAGV,UAAU,QAA1B,kBAEHtT,OAAO0M,KAAKa,GAAUxK,IAAI,SAAAyE,GACvB,IAAIyM,EAAI5Q,GAAUkK,EAAS/F,GAAT,UAIlB,ONqLO,KMxLH+F,EAAS/F,GAAT,WACAyM,EAAIA,EAAI,IAAMC,KAAc3G,EAAS/F,GAAT,KAAoB,IAAI,GAAQ,SAAW+F,EAAS/F,GAAT,KAAoB,IAG3F4L,EAAAjP,EAAAkP,cAAA,MAAIrP,IAAKwD,GACL4L,EAAAjP,EAAAkP,cAAA,sBAAc7L,GACd4L,EAAAjP,EAAAkP,cAAA,iBAASlN,GAAEoH,EAAS/F,GAAT,UACX4L,EAAAjP,EAAAkP,cAAA,iBAASlN,GAAEoH,EAAS/F,GAAT,WACX4L,EAAAjP,EAAAkP,cAAA,UAAKY,GACLb,EAAAjP,EAAAkP,cAAA,UAAKvM,GAAGyG,EAAS/F,GAAT,OAER4L,EAAAjP,EAAAkP,cAAA,UAAK9F,EAAS/F,GAAT,OAAwB,SAAW,cAU9D2M,GAAe,SAAAvE,GAAkB,IAAfrC,EAAeqC,EAAfrC,SACpB,OAAiB,OAAbA,EAA0B,KAE1B6F,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAACe,GAAD,CAAW7G,SAAUA,MAK3B8G,GAAe,SAAAlD,GAAqB,IAAlBxN,EAAkBwN,EAAlBxN,IAAK0G,EAAa8G,EAAb9G,OACzB,OAAe,OAAXA,QAA8BxL,IAAXwL,EAA6B,KAEhD+I,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBACXF,EAAAjP,EAAAkP,cAAA,aACID,EAAAjP,EAAAkP,cAAA,aACID,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIW,QAAS,GAAIV,UAAU,QAAQ7R,GAAkBkC,KAEzDyP,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,kBACAD,EAAAjP,EAAAkP,cAAA,iBACAD,EAAAjP,EAAAkP,cAAA,kBACAD,EAAAjP,EAAAkP,cAAA,kBACAD,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,oBACAD,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,oBACAD,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,uBAEHrT,OAAO0M,KAAKrC,EAAM,OAAWtH,IAAI,SAAAyE,GAC9B,IAAIyM,EAAI5Q,GAAUgH,EAAM,MAAU7C,GAAhB,UNoIf,KMnIC6C,EAAM,MAAU7C,GAAhB,WACAyM,EAAIA,EAAI,IAAMC,KAAc7J,EAAM,MAAU7C,GAAhB,KAA2B,IAAI,GAAQ,SAAW6C,EAAM,MAAU7C,GAAhB,KAA2B,IAE7G,IAAM8M,EAAKjK,EAAM,MAAU7C,GAAhB,mBACL+M,EAAKlK,EAAM,MAAU7C,GAAhB,iBACX,OACI4L,EAAAjP,EAAAkP,cAAA,MAAIrP,IAAG,GAAA+E,OAAKpF,EAAL,KAAAoF,OAAYvB,IACf4L,EAAAjP,EAAAkP,cAAA,UAAK7L,GACL4L,EAAAjP,EAAAkP,cAAA,UAAKlN,GAAEkE,EAAM,MAAU7C,GAAhB,UACP4L,EAAAjP,EAAAkP,cAAA,UAAKlN,GAAEkE,EAAM,MAAU7C,GAAhB,WACP4L,EAAAjP,EAAAkP,cAAA,UAAKvM,GAAGuD,EAAM,MAAU7C,GAAhB,OACR4L,EAAAjP,EAAAkP,cAAA,UAAKY,GACLb,EAAAjP,EAAAkP,cAAA,UAAKhJ,EAAM,MAAU7C,GAAhB,OAA+B,SAAW,OAC/C4L,EAAAjP,EAAAkP,cAAA,UAAKlN,GAAEkE,EAAM,MAAU7C,GAAhB,UACP4L,EAAAjP,EAAAkP,cAAA,UAAKkB,KAAMtP,GAASA,GAAOsP,GAAMpO,GAAEoO,IACnCnB,EAAAjP,EAAAkP,cAAA,UAAKiB,KAAMrP,GAASA,GAAOqP,GAAMnO,GAAEmO,IACnClB,EAAAjP,EAAAkP,cAAA,UAAKlN,GAAEkE,EAAM,MAAU7C,GAAhB,mBAInB4L,EAAAjP,EAAAkP,cAAA,UACID,EAAAjP,EAAAkP,cAAA,MAAIW,QAAS,IAAb,iBAAgChO,GAAcqE,EAAM,oBAStEmK,GAAW,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAChB,OAAiB,OAAbA,QAAkC7V,IAAb6V,EAA+B,KAEpDtB,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,iBACVtT,OAAO0M,KAAKgI,GAAU3R,IAAI,SAAAY,GAAG,OAAIyP,EAAAjP,EAAAkP,cAACsB,GAAD,CAAc3Q,IAAKL,EAAKA,IAAKA,EAAK0G,OAAQqK,EAAS/Q,SAK3FiR,GAAS,SAAAC,GAAqB,IAAlBzK,EAAkByK,EAAlBzK,MAAOrD,EAAW8N,EAAX9N,KACrB,OAAa,OAATA,QAA0BlI,IAATkI,EAA2B,KAE5CqM,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,oBAAYO,GAAgBnM,SAAS2C,EAAO,KAA5C,MAAqDA,EAArD,MAA+DrD,EAAI,MAEnEqM,EAAAjP,EAAAkP,cAACyB,GAAD,CAAUJ,SAAU3N,EAAI,WACxBqM,EAAAjP,EAAAkP,cAAC0B,GAAD,CAAcxH,SAAUxG,EAAI,SAclCiO,iKAGE,IAAMjO,EAAO+G,KAAKmH,MAAM/B,MAAMnM,KAE9B,OAAKA,GACL8C,QAAQ6B,IAAI,oBAER0H,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aACXF,EAAAjP,EAAAkP,cAAA,WACKrT,OAAO0M,KAAK3F,EAAKlH,IAAgBkD,IAAI,SAAA6G,GAAG,OAAIwJ,EAAAjP,EAAAkP,cAAC6B,GAAD,CAAQlR,IAAK4F,EAAKQ,MAAOR,EAAK7C,KAAMA,EAAKlH,GAAe+J,UAL/F,YALF+J,aAiBTwB,eAAO,QAAPA,CAAgBC,YAASJ,scCnJxC,SAASK,GAAgBrR,EAAKC,GAC1B,MAAwB,kBAAVA,EAAqB,KAAOkC,GAAElC,GAASA,EAGzD,SAASqR,GAAevO,GAEpB,OAAa,OAATA,EAAsB,KAC1B,CAAQY,IAARoB,OAAA/I,OAAAoM,GAAA,EAAApM,CAAwBP,GAAxBO,OAAAoM,GAAA,EAAApM,CAA4C+G,GAA5C,CAAkDa,SA0SvC2N,sMAnRXrC,MAAQ,CACJ9E,OAAQ,KACRrH,KAAM,KACNyO,SAAU,CAAC,CACPlF,KAAM,sBACN7G,QAASqC,GAAc,GACvByC,cAAe,KAChB,CACC+B,KAAM,iBACN7G,QAASqC,GAAc,GACvByC,cAAe,KAChB,CACC+B,KAAM,mCACN7G,QAASuC,GAAiB,EAAG,IAC7BuC,cAAe,GAChB,CACC+B,KAAM,qCACN7G,QAASkC,KACT4C,cAAe,OAEnBkH,cAAe,MAMnBhH,SAAW,WAAsF,IAAAU,EAAA3G,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAAR,GAAQ6G,GAAAF,EAApFT,KAAoFS,EAAtEX,oBAAsE,IAAAa,EAAxD,KAAwDA,EAAAC,EAAAH,EAAlDZ,qBAAkD,IAAAe,GAAjC,EAAiCA,EAAAC,EAAAJ,EAA9BR,qBAA8B,IAAAY,GAAb,EAAaA,EAE7FS,WAAW,kBAAMnC,EAAKoH,MAAMhF,OAAO,CAACvB,MAAM,KAAS,KACnDb,EAAKoH,MAAMhF,OAAO,CAACvB,MAAM,EAAMF,cAAaD,gBAAeI,qBAiF/D+G,oBAAsB,SAACC,GACnB,IAAIpP,GAAKoP,EAAMrN,OAAOrE,MAAM4C,cAAc+O,MAAM,gBAAkB,IAAI1O,KAAK,IAC3E2G,EAAKgI,SAAS,CACVJ,cAAelP,OAIvBuP,qBAAuB,WACnB,GAAIjI,EAAKqF,MAAMuC,eAA8C,KAA7B5H,EAAKqF,MAAMuC,cAAsB,CAC7D,IAAIxK,EAAI9D,GAAc0G,EAAKqF,MAAMuC,cAAe,MAChD,GAAIxK,EAAG,CACH,IAAIlE,EAAOC,MAAMC,KAAKgE,GAEtB,GAAIlE,GAAQA,EAAKL,OAAS,EAKtB,OAJAK,EAAKhD,KAAKiF,GAASjC,IAInB,CAAQrH,GAARqJ,OAAA/I,OAAAoM,GAAA,EAAApM,CAAyBiL,KAKrC,OAAO,QAGX8K,kBAAoB,WAChB,IAAI9K,EAAI4C,EAAKiI,uBACT7K,GAAKA,EAAEvE,OAAS,IAChBmH,EAAKY,SAAS,CAACC,MAAM,EAAMF,YAAa,oBAAqBG,cAAe,EAAGJ,eAAgB,IAC/FV,EAAKK,UAAUjD,OAWvB+K,YAAc,SAACpK,GACXiC,EAAKY,SAAS,CAACC,MAAM,EAAMF,YAAa,oBAAqBG,cAAe,EAAGJ,cAAe3C,EAAI2C,gBAClGV,EAAKoH,MAAM/B,MAAMhF,UAAUtC,EAAInC,iEAc/B,IARK,IAAAkG,EAAA7B,KAAAmI,EAEqCnI,KAAKoF,MAAvCnM,EAFHkP,EAEGlP,KAAMyO,EAFTS,EAEST,SAAUC,EAFnBQ,EAEmBR,cAElB5J,EAAK7C,GAAS7B,GAAcsO,EAAe,OAE7CS,EAAU,GACV3P,GAAKkP,EAAc5O,cAAc+O,MAAM,eAAiB,IAAI1O,KAAK,IAC5DM,EAAE,EAAGA,EAAIjB,EAAEG,OAAQc,IACnBA,EAAI,GAAOA,EAAI,IAAM,IAAI0O,GAAW,KACzCA,GAAW3P,EAAEiB,GAGjB,IACI5I,EADI0W,GAAexH,KAAKgI,wBAChBK,KAAKC,UAAUhL,GAAe7D,WAAWN,KAAKqO,GAAexH,KAAKgI,0BAA2BT,GAAiB,GAAK,GAE/H,OACIjC,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAcXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAEXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,6BACXF,EAAAjP,EAAAkP,cAAA,4BACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,+BACdkC,EAASzS,IAAI,SAAC6I,EAAKpE,GAAN,OACV4L,EAAAjP,EAAAkP,cAAA,OAAKrP,IAAKwD,EAAG8L,UAAU,gBACnBF,EAAAjP,EAAAkP,cAAA,UAAQgD,QAAS,kBAAM1G,EAAKqG,YAAYpK,KAAxC,QACAwH,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,cAAexM,GAAGrH,EAAgBsJ,OAAO6C,EAAInC,QAAQO,MAAM,EAAG,KAA9E,KACAoJ,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,QAASxM,GAAG8E,EAAInC,QAAQO,MAAM,GAAI,IAAlD,KACAoJ,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,cAAhB,IAA+BxM,GAAG8E,EAAInC,QAAQO,OAAO,KACrDoJ,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,gBAAhB,IAAiC1H,EAAI0E,WAMjD8C,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAAA,6BACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,+BACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBACXF,EAAAjP,EAAAkP,cAAA,UAAQgD,QAASvI,KAAKiI,kBAAmBO,SAAW/P,EAAEG,OAAS,IAAO,GAAtE,QACA0M,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,cAAcxM,GAAGrH,GAAjC,IAAoDqH,GAAGpH,GAAvD,KACA0T,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,OAAOjD,UAAU,OAAOzB,KAAK,KAAK5N,MAAOwR,EAC9Ce,YAAa,kBAAmBC,SAAU3I,KAAK4H,sBACtDtC,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,cAAhB,IAA+BnN,GAAE0F,KAGrCuH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,cAAcxM,GAAGrH,GAAjC,IAAoDqH,GAAGpH,IAD3D,IACkFwW,EADlF,IAC2F9C,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,cAAcnN,GAAE0F,KAG3HuH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,SACV1U,EAAIwU,EAAAjP,EAAAkP,cAAA,WAAMzU,GAAWwU,EAAAjP,EAAAkP,cAAA,yDAMlCD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAAA,uBACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,+BACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBACXF,EAAAjP,EAAAkP,cAACqD,GAAD,CAAW3P,KAAMA,OAK7BqM,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,iCAhPfK,odClCpB,IAAMgD,GAAWvB,YAAS,SAAAjG,GAAmD,IAAhDyH,EAAgDzH,EAAhDyH,KAAM7K,EAA0CoD,EAA1CpD,YAAa8K,EAA6B1H,EAA7B0H,QAASvG,EAAoBnB,EAApBmB,KAAM+F,EAAclH,EAAdkH,QAIvD7P,EAAI,WACFsQ,EAAW/K,IAAgBmH,GAAMtE,cAIvC,OAHIkI,IAAUtQ,GAAK,cACdsQ,GAAYD,IAASrQ,GAAK,WAEvB4M,EAAAjP,EAAAkP,cAAA,OAAKC,UAAW9M,EAAG6P,QAAS,kBAAMA,EAAQtK,KAC9CqH,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,aAAasD,GADzB,IACsCxD,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,eAAehD,MAK3EyG,sMAEFC,aAAe,SAAC5M,GACZyD,EAAKoH,MAAM/B,MAAM8D,aAAa5M,GAC9B,IAAMrD,EAAO8G,EAAKoH,MAAM/B,MAAMnM,MACvB8G,EAAKoH,MAAM/B,MAAMjF,aAAelH,GAAQA,EAAKlH,IAAkBkH,EAAKlH,GAAeuK,IACtFyD,EAAKoH,MAAM/B,MAAML,WAAWzI,EAAO,4EAIlC,IAAAuF,EAAA7B,KAAAmJ,EACyBnJ,KAAKmH,MAAM/B,MAAlCnM,EADFkQ,EACElQ,KAAM6H,EADRqI,EACQrI,cAEb,OACIwE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,oBACXF,EAAAjP,EAAAkP,cAACsD,GAAD,CAAUC,KAAM,UAAW7K,YAAa,IAAKuE,KAAM,GAAI4G,YAAatI,EAAeyH,QAASvI,KAAKkJ,aAAchT,IAAK,IACpHoP,EAAAjP,EAAAkP,cAAA,YACAD,EAAAjP,EAAAkP,cAAA,YACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,cACXF,EAAAjP,EAAAkP,cAAA,aACID,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,WAAWY,QAASrJ,KAAKmH,MAAM/B,MAAMjF,YAAawI,SAAU3I,KAAKmH,MAAM/B,MAAMlF,oBAD7F,2BAMA,CAAC,IAAK,IAAK,IAAK,KAAKjL,IACjB,SAAAqU,GAAM,OACFhE,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,CAAUrT,IAAKoT,GAEXpQ,MAAMC,KAAKD,MAAM,GAAG0F,QAAQ3J,IACxB,SAAAuU,GACI,IHyBbC,EGzBiBX,EAAOQ,GAAUE,EAAQ,GACzBlN,GH6B7B,IALYmN,EGxByCX,GH2BtDrG,WAAW,GAAK,IACpB9I,SAAS8P,EAAG,GAAI,KACF3Q,WG5BoBiQ,EAAU9P,GAAQA,EAAKlH,IAAkBkH,EAAKlH,GAAeuK,GAC7DkG,EAAOuG,EAAU9P,EAAKlH,GAAeuK,GAApB,KAAqC,GAC1D,OAAOgJ,EAAAjP,EAAAkP,cAACsD,GAAD,CAAUC,KAAMA,EAAM7K,YAAa3B,EAAOyM,QAASA,EAASvG,KAAMA,EAAMtM,IAAKoG,EAAOiM,QAAS1G,EAAKqH,6BApCxHrD,aAgDdwB,eAAO,QAAPA,CAAgBC,YAAS2B,4cClExC,IAAMS,GAAU,SAAArI,GAAgD,IAA7CmB,EAA6CnB,EAA7CmB,KAAMF,EAAuCjB,EAAvCiB,aAAc0G,EAAyB3H,EAAzB2H,SAAUW,EAAetI,EAAfsI,SAE7C,OACIrE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAWwD,EAAW,oBAAsB,kBAAmBT,QAAS,kBAAMoB,EAASrH,KACxFgD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,QAAQhD,KAM7BoH,sMAEFC,cAAgB,SAAC1L,GACb4B,EAAKoH,MAAM/B,MAAMyE,cAAc1L,2DAG1B,IAAA0D,EAAA7B,KACCtH,EAAIsH,KAAKmH,MAAM/B,MAAMrE,eAC3B,OACIuE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,YACVpQ,GAAaH,IAAI,SAAAiB,GAAG,OAAIoP,EAAAjP,EAAAkP,cAACuE,GAAD,CAAS5T,IAAKA,EAAKsM,KAAM/O,GAASyC,GAAMoM,aAAcpM,EAAK8S,SAAU9S,IAAQwC,EAAGiR,SAAU9H,EAAKgI,kBACvHxU,GAAUJ,IAAI,SAAAiB,GAAG,OAAIoP,EAAAjP,EAAAkP,cAACuE,GAAD,CAAS5T,IAAKA,EAAKsM,KAAM/O,GAASyC,GAAMoM,aAAcpM,EAAK8S,SAAU9S,IAAQwC,EAAGiR,SAAU9H,EAAKgI,kBACrHvE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,cAAf,QACCxQ,GAAkBC,IAAI,SAAAiB,GAAG,OAAIoP,EAAAjP,EAAAkP,cAACuE,GAAD,CAAS5T,IAAKA,EAAKsM,KAAM/O,GAASyC,GAAMoM,aAAcpM,EAAK8S,SAAU9S,IAAQwC,EAAGiR,SAAU9H,EAAKgI,kBAC7HvE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,cAAf,QACCrQ,GAAqBF,IAAI,SAAAiB,GAAG,OAAIoP,EAAAjP,EAAAkP,cAACuE,GAAD,CAAS5T,IAAKA,EAAKsM,KAAM/O,GAASyC,GAAMoM,aAAcpM,EAAK8S,SAAU9S,IAAQwC,EAAGiR,SAAU9H,EAAKgI,0BAflHhE,aAqBfwB,eAAO,QAAPA,CAAgBC,YAASsC,oBC3BjC,SAASG,GAAyB5L,GACrC,OAAQxE,SAASwE,IACb,KAAK5L,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACD,OAAO+D,GACX,KAAK9D,EACL,KAAKC,GACL,KAAKC,GACL,KAAKC,GACD,OAAO4D,GACX,KAAK3D,GACL,KAAKC,GACD,OAAO2D,GACX,QACI,MAAO,ICKZ,IAAM+S,GAAiB,SAAA3I,GAA6C,IAA1C4I,EAA0C5I,EAA1C4I,QAAS9T,EAAiCkL,EAAjClL,MAAO2M,EAA0BzB,EAA1ByB,UAAW6F,EAAetH,EAAfsH,SAExD,IAAK9R,GAAqBoT,GAASnH,GAAY,MAAO,GAEtD,OAAQmH,GAEJ,KAAK3U,GACD,MAAO,GAEX,KX0KmB,GWzKnB,KX0KyB,GWzKrB,OAAkB,IAAdwN,EACOwC,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,OAAOtS,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,UAG1FmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,QAAQqP,UAAU,SAC1FtM,MAAMC,KAAKD,MAAM,KAAK0F,QAAQ3J,IAAI,SAAAyE,GAC9B,IAAMf,EAAIyN,KAAc1M,GAAG,GAC3B,OAAO4L,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKwD,EAAGvD,MAAOuD,GAAIf,EAA3B,KAAgCe,EAAhC,QAM3B,KXqK0B,GWpKtB,OAAkB,IAAdoJ,EAEIwC,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,SACxE/D,EAAY6C,IAAI,SAACuF,EAAQ8B,GACrB,OAAO9B,EAAS8K,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKoG,EAAOnG,MAAOmG,GAAQ9B,GAAmB,QAK9E8K,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,SACxEmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,KACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,KACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,KACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,KACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,KACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,MAIhB,KXkJ2B,IWjJvB,OAAkB,IAAd2M,EACOwC,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,OAAOtS,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,UAG1FmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS,OAAQ7F,EAAW+E,EAAMrN,OAAOrE,SAChF/D,EAAY6C,IAAI,SAACuF,EAAQ8B,GACrB,OAAO9B,EAAS8K,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKoG,EAAOnG,MAAOmG,GAAQ9B,GAAmB,QAK1F,KXkIoB,GWjIhB,OAAkB,IAAdsI,EAEIwC,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,SACxEmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,eACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,iBACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,mBACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,aAIJmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,SACxEmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,WACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,WACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,WACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,YAIhB,KXgH4B,GW/G5B,KX4H6B,GW3HzB,OAAkB,IAAd2M,EAEIwC,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,SACvE9D,EAAc4C,IAAI,SAACuN,EAAMlG,GAAP,OAAiBgJ,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKoG,EAAOnG,MAAOmG,GAAQkG,MAGxE,GAGf,KXiFsB,EWhFtB,KXiF0B,EWhF1B,KXiFwB,EWhFxB,KXiFyB,EWhFzB,KXiFqB,EWhFrB,KXiFmB,IWhFnB,KXoF4B,GWnF5B,KXoFsB,GWnFtB,KXoF2B,GWnF3B,KXsFuB,GWrFvB,KXsFuB,GWrFvB,KXsF0B,GWrF1B,KXsFwB,GWrFxB,KXsFkB,GWrFlB,KXwF6B,GWvF7B,KX4FkB,GW3FlB,KX4F0B,GW3F1B,KX4F2B,GW3F3B,KX4FyB,GW3FzB,KX4FqB,GW3FrB,KX4FsB,GW3FtB,KX4FuB,GW3FvB,KX6F2B,GW5F3B,KX8FmB,IW7FnB,QACI,OAAO8C,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,OAAOtS,MAAOA,EAAOwS,SAAU,SAACd,GAAD,OAAWc,EAAS7F,EAAW+E,EAAMrN,OAAOrE,6cCrI1G,IAAM+T,GAAU,SAAA7I,GAAiC,IAA9B8I,EAA8B9I,EAA9B8I,cAAexB,EAAetH,EAAfsH,SAC9B,OACIrD,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOgU,EAAexB,SAAU,SAACd,GAAD,OAAWc,EAASd,EAAMrN,OAAOrE,SACrEmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAM,KAAd,KACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAM,KAAd,OAKNiU,GAAW,SAAAtI,GAAiC,IAA9BqI,EAA8BrI,EAA9BqI,cAAexB,EAAe7G,EAAf6G,SAC/B,OACIrD,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOgU,EAAexB,SAAU,SAACd,GAAD,OAAWc,EAASd,EAAMrN,OAAOrE,SACpEjE,OAAO0M,KAAKzH,IAAQlC,IAAI,SAAAoV,GAAU,OAAI/E,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKmU,EAAYlU,MAAOkU,GAAalT,GAAOkT,QAKjGC,GAAS,SAAAjH,GAAiC,IAA9B8G,EAA8B9G,EAA9B8G,cAAexB,EAAetF,EAAfsF,SAC7B,OACIrD,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOgU,EAAexB,SAAU,SAACd,GAAD,OAAWc,EAASd,EAAMrN,OAAOrE,SACrEmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAM,KAAd,WACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAM,KAAd,OACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAM,KAAd,UACAmP,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAM,KAAd,YAqBNoU,GAAOjD,YAAS,SAAAX,GAAmD,IAiDjE6D,EAAIC,EAAIC,EAjDSzM,EAAgD0I,EAAhD1I,YAAaE,EAAmCwI,EAAnCxI,UAAWwE,EAAwBgE,EAAxBhE,UAAWpG,EAAaoK,EAAbpK,OAIlDoO,EAAa,SAAC7H,EAAW3M,GAC3BiP,GAAMwF,kBAAkBzM,EAAWwE,EAAW,OAAQG,EAAW3M,EAAO8H,IAKtE4M,EAAY,SAACC,EAAK3U,GACpBiP,GAAMwF,kBAAkBzM,EAAWwE,EAAWmI,EAAK,KAAM3U,EAAO8H,IAOpE,OAJe1B,EAAOE,WAAanH,GAM3BgQ,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,KACIjE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,QAAuC7C,EAAvC,KACA2C,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOoG,EAAOE,SAAUkM,SAAU,SAACd,GAAD,OAAWzC,GAAM2F,6BAA6B5M,EAAWwE,EAAWkF,EAAMrN,OAAOrE,MAAO8H,KAC7H8L,GAAyB5L,GAAWlJ,IAAI,SAAA+V,GAAK,OAAI1F,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAK8U,EAAO7U,MAAO6U,GAAQvV,GAAmBuV,QAGhH1F,EAAAjP,EAAAkP,cAAA,YAEAD,EAAAjP,EAAAkP,cAAA,YAEAD,EAAAjP,EAAAkP,cAAA,YAEAD,EAAAjP,EAAAkP,cAAA,YAEAD,EAAAjP,EAAAkP,cAAA,YAEAD,EAAAjP,EAAAkP,cAAA,YAEAD,EAAAjP,EAAAkP,cAAA,YAEAD,EAAAjP,EAAAkP,cAAA,aAMPhJ,EAAOtD,MAGZuR,EAAKlF,EAAAjP,EAAAkP,cAAC0F,GAAD,CAAgBhB,QAAS1N,EAAOE,SAAUtG,MAAOoG,EAAOtD,KAAK,GAAI6J,UAAW,EAAG6F,SAAUgC,IAC9FF,EAAKnF,EAAAjP,EAAAkP,cAAC0F,GAAD,CAAgBhB,QAAS1N,EAAOE,SAAUtG,MAAOoG,EAAOtD,KAAK,GAAI6J,UAAW,EAAG6F,SAAUgC,IAC9FD,EAAKpF,EAAAjP,EAAAkP,cAAC0F,GAAD,CAAgBhB,QAAS1N,EAAOE,SAAUtG,MAAOoG,EAAOtD,KAAK,GAAI6J,UAAW,EAAG6F,SAAUgC,IAK1FrF,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,KACIjE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,QAAuC7C,EAAvC,KACA2C,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOoG,EAAOE,SAAUkM,SAAU,SAACd,GAAD,OAAWzC,GAAM2F,6BAA6B5M,EAAWwE,EAAWkF,EAAMrN,OAAOrE,MAAO8H,KAC7H8L,GAAyB5L,GAAWlJ,IAAI,SAAA+V,GAAK,OAAI1F,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAK8U,EAAO7U,MAAO6U,GAAQvV,GAAmBuV,QAGhH1F,EAAAjP,EAAAkP,cAAA,WAAMiF,EAAGlF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aAAa7O,GAAoB4F,EAAOE,UAAY9F,GAAoB4F,EAAOE,UAAU,GAAK,KACtH6I,EAAAjP,EAAAkP,cAAA,WAAMkF,EAAGnF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aAAa7O,GAAoB4F,EAAOE,UAAY9F,GAAoB4F,EAAOE,UAAU,GAAK,KACtH6I,EAAAjP,EAAAkP,cAAA,WAAMmF,EAAGpF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aAAa7O,GAAoB4F,EAAOE,UAAY9F,GAAoB4F,EAAOE,UAAU,GAAK,KACtH6I,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAOoG,EAAOC,QAASmM,SAAU,SAACd,GAAD,OA7D9B1R,EA6DuD0R,EAAMrN,OAAOrE,WA5DvFiP,GAAMwF,kBAAkBzM,EAAWwE,EAAW,UAAW,KAAMxM,EAAO8H,GADpD,IAAC9H,IA8DN+C,MAAMC,KAAKD,MAAM,IAAI0F,QAAQ3J,IAAI,SAAAyE,GAAC,OAAI4L,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKwD,EAAGvD,MAAOuD,GAAU,IAANA,EAAU,SAAWA,OAG/F4L,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAC2F,GAAD,CAAUf,cAAe5N,EAAO8C,mBAAoBsJ,SAAU,SAACxS,GAAD,OAAW0U,EAAU,qBAAsB1U,OAE7GmP,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAC2F,GAAD,CAAUf,cAAe5N,EAAO6C,iBAAkBuJ,SAAU,SAACxS,GAAD,OAAW0U,EAAU,mBAAoB1U,OAEzGmP,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAC4F,GAAD,CAAQhB,cAAe5N,EAAO+C,QAASqJ,SAAU,SAACxS,GAAD,OAAW0U,EAAU,UAAW1U,OAErFmP,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAC6F,GAAD,CAASjB,cAAe5N,EAAO4C,cAAewJ,SAAU,SAACxS,GAAD,OAAW0U,EAAU,gBAAiB1U,SAnCjF,OAyCvBkV,iKAEO,IAAAtL,EAAAC,KAEC5D,EAAQ4D,KAAKmH,MAAM/B,MAAMnM,KAAKlH,GAAeiO,KAAKmH,MAAMlJ,aAAalE,IAAeiG,KAAKmH,MAAMhJ,WAAvF,MAMd,OACImH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,SACXF,EAAAjP,EAAAkP,cAAA,YACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,QACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,UACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,UACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,UACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,YACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,WACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,UACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,WACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,YACCtT,OAAO0M,KAAKxC,GAAOnH,IAAI,SAAA0N,GAAS,OAC7B2C,EAAAjP,EAAAkP,cAACgF,GAAD,CAAMrU,IAAKyM,EAAW1E,YAAa8B,EAAKoH,MAAMlJ,YAAaE,UAAW4B,EAAKoH,MAAMhJ,UAAWwE,UAAWA,EAAWpG,OAAQH,EAAMuG,eAvBnHkD,aA8BlBwB,eAAO,QAAPA,CAAgBC,YAAS+D,cCjKzBC,UAXW,SAACnE,GACvB,OACI7B,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBACXF,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,mBAAhB,iBACAF,EAAAjP,EAAAkP,cAAA,UAAQoD,SAAU,SAACd,GAAD,OAAWV,EAAMoE,SAAS1D,EAAMrN,OAAOrE,QAAQA,MAAOgR,EAAM5I,MACzErM,OAAO0M,KAAK1G,IAAejD,IAAI,SAAAiB,GAAG,OAAIoP,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKA,EAAKC,MAAOD,GAAMgC,GAAchC,+cCL9FsV,sMAEFC,aAAe,SAAC5D,GACZ9H,EAAKoH,MAAM/B,MAAMsG,iBAAiB3L,EAAKoH,MAAMlJ,YAAa4J,EAAMrN,OAAOrE,MAAMyC,OAAS,EAAIiP,EAAMrN,OAAOrE,MAAMyD,OAAO,EAAG,GAAKiO,EAAMrN,OAAOrE,+DAIzI4F,QAAQ6B,IAAI,2BACZ,IAAM4E,EAAMxC,KAAKmH,MAAM/B,MAAMnM,KAAKlH,GAAeiO,KAAKmH,MAAMlJ,aAAhD,KACZ,OACIqH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,sBACXF,EAAAjP,EAAAkP,cAAA,SAAOoG,aAAcnJ,EAAMmG,SAAU3I,KAAKyL,aAAc1H,KAAM,IADlE,sDAVmB8B,aAkBhBwB,eAAO,QAAPA,CAAgBC,YAASkE,KC4CzBI,GA3BQtE,YAAS,WAC5B,OAAIlC,GAAMpE,gBAAkB9O,OAAOwS,oBAAoBU,GAAMpE,gBAAgBpI,OAErE0M,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,oBACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,yBAAf,2CAGItT,OAAOwS,oBAAoBU,GAAMpE,gBAAgB/L,IAC7C,SAAC2P,EAAUlL,GACP,OAAOxH,OAAOwS,oBAAoBU,GAAMpE,eAAe4D,IAAW3P,IAC9D,SAAC4P,EAAUgH,GACP,OAAO3Z,OAAOwS,oBAAoBU,GAAMpE,eAAe4D,GAAUC,IAAW5P,IACxE,SAAC6P,EAAMrH,GACH,OA1BtB,SAACmH,EAAUC,EAAUC,EAAM4C,GAC7C,OAAQ7C,GACJ,IAAK,WACD,OAAOS,EAAAjP,EAAAkP,cAAA,OAAKrP,IAAG,GAAA+E,OAAK2J,EAAL,KAAA3J,OAAiB6J,EAAjB,UAAR,YAAgDgB,GAAgBlB,GAAhE,aAAqFjR,GAAkBmR,IAClH,IAAK,OACD,OAAOQ,EAAAjP,EAAAkP,cAAA,OAAKrP,IAAG,GAAA+E,OAAK2J,EAAL,KAAA3J,OAAiB6J,EAAjB,UAAR,YAAgDgB,GAAgBlB,GAAhE,UACX,IAAK,OACD,OAAOU,EAAAjP,EAAAkP,cAAA,OAAKrP,IAAG,GAAA+E,OAAK2J,EAAL,KAAA3J,OAAiB6J,EAAjB,UAAR,YAAgDgB,GAAgBlB,GAAhE,UACX,QACI,OAAO,MAiBgCkH,CAAclH,EAAUC,EAAUC,EAAMM,GAAMpE,eAAe4D,GAAUC,GAAUC,WAUrH,4cC1DTiH,4CAEF,SAAAA,EAAY5E,GAAO,IAAApH,EAAA,OAAA7N,OAAA+N,EAAA,EAAA/N,CAAA8N,KAAA+L,IACfhM,EAAAiM,EAAAC,KAAAjM,KAAMmH,IAIV+E,YAAc,SAAC7P,GACX0D,EAAKoM,iBAAiBC,QAAQC,SANftM,EASnBuM,aAAe,SAACjQ,GACZ,IAAIqH,EAAOrH,EAAE7B,OAAO0I,MAAM,GAEtBQ,GACA3D,EAAKoH,MAAM/B,MAAMmH,UAAU,CAAC7I,KAbjB3D,EAiBnByM,UAAY,WACRzM,EAAKoH,MAAM/B,MAAMqH,SAhBjB1M,EAAKoM,iBAAmBO,IAAMC,YAFf5M,uDAkCV,IAAA8B,EAAA7B,KAEC/G,EAAO+G,KAAKmH,MAAM/B,MAAMnM,KAIxB2T,EAAU5M,KAAKmH,MAAM/B,MAAMF,UAC3B2H,EAAW7M,KAAKmH,MAAM/B,MAAMF,WAAalF,KAAKmH,MAAM/B,MAAMtG,QAEhE,OACIwG,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,kBAEVoH,GACDtH,EAAAjP,EAAAkP,cAAA,UAAQC,UAAU,OACX+C,QAAS,kBAAM1G,EAAKsF,MAAM/B,MAAM5E,UAAU3C,KdhCvB,OciCnBiP,MAAM,+BAFb,eAGEF,GAAWtH,EAAAjP,EAAAkP,cAAA,YAEZsH,GAAYvH,EAAAjP,EAAAkP,cAAA,UAAQC,UAAU,SAAS+C,QAAS,kBAAM1G,EAAKsF,MAAM/B,MAAM2H,gBAA3D,iBACXF,GAAYvH,EAAAjP,EAAAkP,cAAA,YAEdD,EAAAjP,EAAAkP,cAAA,SAAOyH,IAAKhN,KAAKmM,iBAAkB1D,KAAK,OAAOwE,MAAO,CAACC,QAAQ,QAASvE,SAAU3I,KAAKsM,eACvFhH,EAAAjP,EAAAkP,cAAA,UAAQgD,QAASvI,KAAKkM,aAAtB,4BAEA5G,EAAAjP,EAAAkP,cAAA,YAGCtM,GAAQqM,EAAAjP,EAAAkP,cAAA,UAAQgD,QAASvI,KAAKwM,WAAtB,cACPvT,GAAQqM,EAAAjP,EAAAkP,cAAA,YAEVD,EAAAjP,EAAAkP,cAAA,oBAlEYM,aAgFbwB,eAAO,QAAPA,CAAgBC,YAASyE,4cC9DxCoB,cAAc,OAERrG,4CAEF,SAAAA,EAAYK,GAAO,IAAApH,EAAA,OAAA7N,OAAA+N,EAAA,EAAA/N,CAAA8N,KAAA8G,IACf/G,EAAAiM,EAAAC,KAAAjM,KAAMmH,IAOViG,YAAc,WACVrN,EAAKgI,SAAS,CACVsF,gBAAgB,KAVLtN,EAcnBuN,YAAa,WACTvN,EAAKgI,SAAS,CACVsF,gBAAgB,KAhBLtN,EAwBnBwN,OAAS,SAACrK,GACNnD,EAAKoH,MAAM/B,MAAMqH,QACjB1M,EAAKoH,MAAM/B,MAAMtG,SAAU,EAC3BiB,EAAKgI,SACD,CAAEsF,gBAAgB,GAClB,WAAQtN,EAAKoH,MAAM/B,MAAMmH,UAAUrJ,MA7BxBnD,EAoCnByN,kBAAoB,SAACrP,EAAWhI,GAC5B4J,EAAKoH,MAAM/B,MAAMqI,eAAe9T,SAASxD,EAAO,MArCjC4J,EAwCnB2N,eAAiB,SAACC,EAAcC,KAtC5B7N,EAAKqF,MAAQ,CACTiI,gBAAgB,EAChBK,eAAgB,MAJL3N,uDA2EV,IAAA8B,EAAA7B,KAGGqN,EAAmBrN,KAAKoF,MAAxBiI,eAEFpP,EAAc+B,KAAKmH,MAAM/B,MAAMtE,cAC/B3C,EAAY6B,KAAKmH,MAAM/B,MAAMrE,eAC7B9H,EAAO+G,KAAKmH,MAAM/B,MAAMnM,KAGxB4U,GAFiB7N,KAAKmH,MAAM/B,MAAMpE,eAGpC/H,GACClH,KAAiBkH,GACjBgF,KAAehF,EAAKlH,IACpBgI,MAAiBd,EAAKlH,GAAekM,IACrCE,KAAalF,EAAKlH,GAAekM,GAAalE,KAC9C,UAAWd,EAAKlH,GAAekM,GAAalE,IAAeoE,IACiC,IAA5FjM,OAAO0M,KAAK3F,EAAKlH,GAAekM,GAAalE,IAAeoE,GAAhD,OAAqEvF,QAElFkV,EAAc,GAQlB,OAPI7U,GACClH,KAAiBkH,GACjBgF,KAAehF,EAAKlH,IACpB,SAAUkH,EAAKlH,GAAekM,KAC/B6P,EAAchI,GAAgB7H,GAAe,IAAMhF,EAAKlH,GAAekM,GAApB,MAInDqH,EAAAjP,EAAAkP,cAACwI,GAAA,EAAD,CACIC,cAAY,EACZf,MAAO,CAAChc,SAAU,YAClBsc,OAAQvN,KAAKuN,OACbH,YAAapN,KAAKoN,YAClBE,YAAatN,KAAKsN,aAEjBD,GACD/H,EAAAjP,EAAAkP,cAAA,OAAK0H,MAAOjc,GAAZ,sBAIAsU,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAEXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,6BACXF,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,oBACXF,EAAAjP,EAAAkP,cAAC0I,GAAD,MACA3I,EAAAjP,EAAAkP,cAAC2I,GAAD,QAIPjV,GAAQA,EAAKlH,GAAekM,IAC7BqH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAAA,yBACAD,EAAAjP,EAAAkP,cAAC4I,GAAD,CAAkBlQ,YAAaA,KAGnCqH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,KACIjE,EAAAjP,EAAAkP,cAAA,iCAAyBuI,GACxBjd,EAAMoN,IAAgBqH,EAAAjP,EAAAkP,cAAC6I,GAAD,MAqBtBP,GACDvI,EAAAjP,EAAAkP,cAAC8I,GAAD,CAAoBpQ,YAAaA,EAAaE,UAAWA,IAExD0P,GACDvI,EAAAjP,EAAAkP,cAAC+I,GAAD,CACInQ,UAAWA,EACXI,KAAMtF,EAAKlH,GAAekM,GAAalE,IAAeoE,GAAhD,aACNoN,SAAU,SAACpV,GAAD,OAAW0L,EAAK2L,kBAAkBrP,EAAWhI,OAEzDtF,EAAMoN,IAAgBqH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,UAAf,sBAK/BxF,KAAKmH,MAAM/B,MAAMtG,SAAWkB,KAAKmH,MAAM/B,MAAM/E,KAAKC,QACnDgF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAAA,kDACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WACXF,EAAAjP,EAAAkP,cAAA,UAAQC,UAAU,SAAS+C,QAAS,kBAAM1G,EAAKsF,MAAM/B,MAAM2H,gBAA3D,kBAcRzH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAACgJ,GAAD,iBA/LP1I,aA6MNwB,eAAO,QAAPA,CAAgBC,YAASR,gdCpNzB0H,iKAXP,OACIlJ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBAAf,gDACiDF,EAAAjP,EAAAkP,cAAA,KAAGE,KAAK,uCAAuCjL,OAAO,SAASkL,IAAI,uBAAnE,iDAN3CG,aCeP4I,UAfA,WACX,OACInJ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,UACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,MACXF,EAAAjP,EAAAkP,cAAA,KAAGE,KAAK,iDAAiDjL,OAAO,SAASkL,IAAI,uBAA7E,oCAEJJ,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,wJACqCD,EAAAjP,EAAAkP,cAAA,KAAGE,KAAK,+CAA+CjL,OAAO,SAASkL,IAAI,uBAA3E,iCADrC,sDCSDgJ,yLAbP,OACIpJ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAEXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,MAAMyH,MAAO,CAAC0B,UAAW,SAAxC,uDAPK9I,0CCgHR+I,UAAgB,SAACC,EAAUC,EAAcC,GAIlD,IACIC,EADAtH,EAAW,GAGf,OAAO,WAGHuH,aAAaD,GAEb,IAAInH,EAAQnN,UAAU,GAKlBmN,EAAM5O,KAAK,KAAOY,IAKtB6N,EAASzR,KAAK4R,EAAM5O,MAEpB6V,EAAapH,EAAS9O,QAEtBoW,EAAU9M,WAAW,WACjBnG,QAAQ6B,IAAI,kCACZoR,EAAU,KACVH,EAASnH,GACTA,EAAW,IACZqH,IAbChT,QAAQ6B,IAAI,2eC1HlBsR,sMAEFC,qBAAuBP,GACnB,SAAAlH,GAGI,IAAIzO,EAAO8G,EAAKoH,MAAM/B,MAAMnM,KAHpBmW,GAAA,EAAAC,GAAA,EAAAC,OAAAve,EAAA,IAIR,QAAAwe,EAAAC,EAAc9H,EAAd+H,OAAAC,cAAAN,GAAAG,EAAAC,EAAA1L,QAAA6L,MAAAP,GAAA,EAAwB,KAAfQ,EAAeL,EAAApZ,MAChBoF,GAAYqU,GACZ3W,EAAOsB,GAAUtB,GAAQ,GAAIqE,GAAesS,IAE5C7T,QAAQ6B,IAAI,sCAAuC5E,GAAG4W,KARtD,MAAAC,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,GAYRvT,QAAQ6B,IAAI,cAWZmC,EAAKoH,MAAM/B,MAAMnM,KAAOA,EACxB8G,EAAKoH,MAAM/B,MAAMjD,OAAO,CAACvB,MAAM,KAEnC,SAACjI,GAGGoH,EAAKoH,MAAM/B,MAAMjD,OAAO,CAACvB,MAAM,EAAMC,cAAelI,KAExD,OAGJoX,aAAe,SAAAC,GACPA,IACIA,EAAKC,YAAY,QAAS,MAAOlQ,EAAKoP,sBACtCpT,QAAQ6B,IAAR,iFAEA7B,QAAQ6B,IAAR,sEACAoS,EAAKE,YAAY,QAAS,MAAOnQ,EAAKoP,sBACtCpT,QAAQ6B,IAAI,iBAAkBoS,EAAKxN,WAK/C2N,gBAAkB,SAAAH,GACVA,IACIA,EAAKI,gBAAgBJ,EAAKI,iBAC9BrU,QAAQ6B,IAAR,0BAAA3C,OAAsC+U,EAAK3f,GAA3C,sBAQRggB,cAAgB,SAAAL,GACRA,GACAjU,QAAQ6B,IAAR,yBAAA3C,OAAqC+U,EAAK3f,GAA1C,kBAIRigB,iBAAmB,WACfvU,QAAQ6B,IAAR,4CAGJ2S,iBAAmB,WACf,GAAIxQ,EAAKoH,MAAMqJ,cACXzU,QAAQ6B,IAAR,sCAAA3C,OAAkD8E,EAAKoH,MAAMqJ,eACxDzQ,EAAKoH,MAAM/B,MAAM/E,KAAKY,OAAO,KAAAwP,GAAA,EAAAC,GAAA,EAAAC,OAAA5f,EAAA,IAC9B,QAAA6f,EAAAC,EAAiB9Q,EAAKoH,MAAM/B,MAAM/E,KAAK7P,OAAvCif,OAAAC,cAAAe,GAAAG,EAAAC,EAAA/M,QAAA6L,MAAAc,GAAA,EAA+C,KAAtCT,EAAsCY,EAAAza,MAC3C,GAAkB,UAAd6Z,EAAKvH,MAAiF,MAA5DuH,EAAKxN,KAAKsF,MAAM,IAAIgJ,OAAO/Q,EAAKoH,MAAMqJ,YAAa,MAAgB,CAC7FzU,QAAQ6B,IAAR,kCAAA3C,OAA8C+U,EAAKxN,OACnDzC,EAAKgI,SAAS,CAAC9G,MAAO+O,EAAK3f,KAC3B0P,EAAKoH,MAAM/B,MAAM/E,KAAKY,MAAQ+O,EAAK3f,GACnC0P,EAAKgQ,aAAaC,GAClB,QAPsB,MAAAH,GAAAa,GAAA,EAAAC,EAAAd,EAAA,YAAAY,GAAA,MAAAI,EAAAf,QAAAe,EAAAf,SAAA,WAAAY,EAAA,MAAAC,QAc1CI,kBAAoB,WAChB,GAAIhR,EAAKoH,MAAMqJ,cACXzU,QAAQ6B,IAAR,uCAAA3C,OAAmD8E,EAAKoH,MAAMqJ,eACzDzQ,EAAKoH,MAAM/B,MAAM/E,KAAKC,QAAQ,KAAA0Q,GAAA,EAAAC,GAAA,EAAAC,OAAAngB,EAAA,IAC/B,QAAAogB,EAAAC,EAAiBrR,EAAKoH,MAAM/B,MAAM/E,KAAK1P,QAAvC8e,OAAAC,cAAAsB,GAAAG,EAAAC,EAAAtN,QAAA6L,MAAAqB,GAAA,EAAgD,KAAvChB,EAAuCmB,EAAAhb,MAC5C,GAAkB,WAAd6Z,EAAKvH,MAAkF,MAA5DuH,EAAKxN,KAAKsF,MAAM,IAAIgJ,OAAO/Q,EAAKoH,MAAMqJ,YAAa,MAAgB,CAC9FzU,QAAQ6B,IAAR,qDAAA3C,OAAiE+U,EAAKxN,OACtEzC,EAAKoH,MAAM/B,MAAM/E,KAAKC,OAAS0P,EAAK3f,GACpC0P,EAAKsQ,cAAcL,GACnB,QANuB,MAAAH,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,QAa3CG,eAAiB,WACbtR,EAAKoH,MAAM/B,MAAM/E,KAAK7P,OAASD,SAAe+gB,OAAO,SAAAtB,GAAI,OAAyD,MAArDA,EAAKxN,KAAKsF,MAAM,IAAIgJ,OAAO/Q,EAAKoH,MAAMoK,KAAM,QACzGxR,EAAKwQ,sBAGTiB,gBAAkB,WACdzR,EAAKoH,MAAM/B,MAAM/E,KAAK1P,QAAUJ,UAAgB+gB,OAAO,SAAAtB,GAAI,OAAyD,MAArDA,EAAKxN,KAAKsF,MAAM,IAAIgJ,OAAO/Q,EAAKoH,MAAMoK,KAAM,QAC3GxR,EAAKgR,uBAGTU,iBAAmB,WACf1V,QAAQ6B,IAAI,yBACZmC,EAAKoQ,gBAAgB/f,EAAS2P,EAAKoH,MAAM/B,MAAM/E,KAAKY,QACpDlB,EAAKoH,MAAM/B,MAAM/E,KAAKY,MAAQ,KAC9BlB,EAAKoH,MAAM/B,MAAM/E,KAAK7P,OAAS,MAGnCkhB,kBAAoB,WAChB3V,QAAQ6B,IAAI,0BACZmC,EAAKuQ,mBACLvQ,EAAKoH,MAAM/B,MAAM/E,KAAKC,OAAS,KAC/BP,EAAKoH,MAAM/B,MAAM/E,KAAK1P,QAAU,MAGpCghB,uBAAyB,SAAAtV,GAGN,iBAAXA,EAAEoM,OACF1I,EAAKoQ,gBAAgB9T,EAAE2T,KAAK3f,IAC5B0P,EAAKuQ,oBAELjU,EAAE2T,KAAKxN,KAAKsF,MAAM,IAAIgJ,OAAO/Q,EAAKoH,MAAMoK,KAAM,OAC1B,UAAhBlV,EAAE2T,KAAKvH,MAGP1I,EAAKsR,iBAEW,WAAhBhV,EAAE2T,KAAKvH,MAEP1I,EAAKyR,mBAGTzV,QAAQ6B,IAAR,8CAAA3C,OAA0DoB,EAAE2T,KAAKxN,UAMzEoP,gBAAkB,SAAC/J,GACX9H,EAAKoH,MAAM/B,MAAM/E,KAAKY,OACtBlB,EAAKoQ,gBAAgB/f,EAAS2P,EAAKoH,MAAM/B,MAAM/E,KAAKY,QAExD,IAAM+O,EAAO5f,EAASyX,EAAMrN,OAAOrE,OAC/B6Z,GACAjQ,EAAKoH,MAAM/B,MAAM/E,KAAKY,MAAQ+O,EAAK3f,GACnC0P,EAAKgQ,aAAaC,IAElBjU,QAAQC,KAAK,kCAAmC6L,EAAMrN,OAAOrE,UAIrE0b,iBAAmB,SAAChK,GACZ9H,EAAKoH,MAAM/B,MAAM/E,KAAKC,QACtBP,EAAKuQ,iBAAiBlgB,EAAS2P,EAAKoH,MAAM/B,MAAM/E,KAAKC,SAEzD,IAAM0P,EAAO5f,EAASyX,EAAMrN,OAAOrE,OAC/B6Z,GACAjQ,EAAKoH,MAAM/B,MAAM/E,KAAKC,OAAS0P,EAAK3f,GACpC0P,EAAKsQ,cAAcL,IAEnBjU,QAAQC,KAAK,mCAAoC6L,EAAMrN,OAAOrE,UAItE2b,OAAS,SAAAjC,GACDA,EACA9T,QAAQC,KAAK,6CAA8C6T,IAE3D9T,QAAQ6B,IAAI,gCACZrN,cAAoB,YAAawP,EAAK4R,wBACtCphB,cAAoB,eAAgBwP,EAAK4R,4FAK7C5V,QAAQ6B,IAAR,8CAAA3C,OAA0D1K,YACtDA,WACAwL,QAAQ6B,IAAR,8DACAoC,KAAKqR,iBACLrR,KAAKwR,mBAGLjhB,SAAeyP,KAAK8R,QAAQ,kDAKhC/V,QAAQ6B,IAAI,kDACZoC,KAAKyR,mBACLzR,KAAK0R,qDAIL,OACIpM,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,cACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,eACAF,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO6J,KAAKmH,MAAM/B,MAAM/E,KAAKY,MAAO0H,SAAU3I,KAAK4R,iBACvDtM,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,cACC6J,KAAKmH,MAAM/B,MAAM/E,KAAK7P,OAAOyE,IAC1B,SAAC+a,EAAM1T,GAAP,OAAiBgJ,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAK8Z,EAAK3f,GAAI8F,MAAO6Z,EAAK3f,IAAK2f,EAAKxN,SAGrE8C,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,gBACAF,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO6J,KAAKmH,MAAM/B,MAAM/E,KAAKC,OAAQqI,SAAU3I,KAAK6R,kBACxDvM,EAAAjP,EAAAkP,cAAA,UAAQpP,MAAO,GAAf,cACC6J,KAAKmH,MAAM/B,MAAM/E,KAAK1P,QAAQsE,IAC3B,SAAC+a,EAAM1T,GAAP,OAAiBgJ,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAK8Z,EAAK3f,GAAI8F,MAAO6Z,EAAK3f,IAAK2f,EAAKxN,iBA3NlEqD,aAoOJwB,eAAO,QAAPA,CAAgBC,YAAS4H,yBChMzB6C,GA3CG,SAAA1Q,GAAoC,IAAjC2Q,EAAiC3Q,EAAjC2Q,aAAcC,EAAmB5Q,EAAnB4Q,aAI/B,OACI3M,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,cAIVtT,OAAO0M,KAAKoT,GAAc/c,IAAI,SAACuN,EAAMlG,GAAP,OAC3BgJ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OAAOtP,IAAKoG,GACvBgJ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aAAahD,GAC3BwP,EAAaxP,GAAMvB,OACpBqE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,eACXF,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,cACYjE,EAAAjP,EAAAkP,cAAC2M,GAAA7b,EAAD,CACJsS,SAAU,kBAAMsJ,EAAaD,EAAaxP,GAAMvB,MAAM5Q,KACtDgZ,QAAS2I,EAAaxP,GAAMvB,MAAM+H,SAClCxD,UAAU,eACVnV,GAAE,UAAA4K,OAAY+W,EAAaxP,GAAMvB,MAAM5Q,IACvC8hB,OAAQ,GAAIC,MAAO,OAI9BJ,EAAaxP,GAAMlC,QACpBgF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,eACXF,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,eACajE,EAAAjP,EAAAkP,cAAC2M,GAAA7b,EAAD,CACLsS,SAAU,kBAAMsJ,EAAaD,EAAaxP,GAAMlC,OAAOjQ,KACvDgZ,QAAS2I,EAAaxP,GAAMlC,OAAO0I,SACnCxD,UAAU,eACVnV,GAAE,UAAA4K,OAAY+W,EAAaxP,GAAMlC,OAAOjQ,IACxC8hB,OAAQ,GAAIC,MAAO,YC2IpCC,iNA9JXjN,MAAQ,CACJnM,KAAM,QAMV0H,SAAW,WAAsF,IAAAU,EAAA3G,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAAR,GAAQ6G,GAAAF,EAApFT,KAAoFS,EAAtEX,oBAAsE,IAAAa,EAAxD,KAAwDA,EAAAC,EAAAH,EAAlDZ,qBAAkD,IAAAe,GAAjC,EAAiCA,EAAAC,EAAAJ,EAA9BR,qBAA8B,IAAAY,GAAb,EAAaA,EAC7FS,WAAW,kBAAMnC,EAAKoH,MAAMhF,OAAO,CAACvB,MAAM,KAAS,KACnDb,EAAKoH,MAAMhF,OAAO,CAACvB,MAAM,EAAMF,cAAaD,gBAAeI,qBAG/DoD,SAAW,WAAe,IAAd5B,EAAc3H,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAAN,EACZ2H,EAAQ,EACRtC,EAAKoH,MAAMhF,OAAO,CAACvB,MAAM,IAEzBsB,WAAW,kBAAMnC,EAAKoH,MAAMhF,OAAO,CAACvB,MAAM,KAASyB,MAmC3D+K,YAAc,WACVrN,EAAKgI,SAAS,CACVsF,gBAAgB,OAIxBC,YAAa,WACTvN,EAAKgI,SAAS,CACVsF,gBAAgB,OAQxBE,OAAS,SAACrK,GACNnD,EAAKgI,SACL,CAEQsF,gBAAgB,GAE5B,WAAOtN,EAAKwM,UAAUrJ,QAGtBiM,qBAAuB,SAACtH,GAGhBtM,GAAYsM,EAAM5O,MAElB8G,EAAKgI,SACDuK,aAAQ,SAAAC,GACJA,EAAMtZ,KAAOsB,GAAUgY,EAAMtZ,MAAQ,GAAIqE,GAAeuK,EAAM5O,UAKtE8C,QAAQ6B,IAAI,6JA/DJsF,+FACNC,QAAQC,IAAIF,EAAMjO,IAAN,eAAA6M,EAAA5P,OAAAsgB,GAAA,EAAAtgB,CAAAugB,GAAApc,EAAAmN,KACd,SAAAC,EAAMC,GAAN,IAAAzK,EAAA,OAAAwZ,GAAApc,EAAAsN,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,YACQJ,EAAKK,KAhCH,SA+BV,CAAAH,EAAAE,KAAA,QAEQ/H,QAAQC,KAAR,GAAAf,OAAgByI,EAAKlB,KAArB,oBAAAvH,OAA4CyI,EAAKK,OACjDlC,EAAKoC,WAHbL,EAAAE,KAAA,uBAKQjC,EAAKlB,SAAS,CAACC,MAAM,EAAMF,YAAa,oBALhDkD,EAAAM,GAMyBzK,WANzBmK,EAAAE,KAAA,EAM0C,IAAIK,SAAST,GAAMU,cAN7D,OAAAR,EAAAS,GAAAT,EAAAU,KAOY/I,GADEtC,EANd,IAAA2K,EAAAM,GAAAN,EAAAS,KAQYxC,EAAKkG,SACDuK,aAAQ,SAAAC,GACJA,EAAMtZ,KAAOsB,GAAUgY,EAAMtZ,MAAQ,GAAIqE,GAAerE,OAIhE8C,QAAQ6B,IAAI,2BAA4B5E,GAAGC,EAAKiD,MAAM,EAAG,KAE7D2F,EAAKoC,WAhBb,yBAAAL,EAAAW,SAAAd,EAAAzD,SADc,gBAAAwE,GAAA,OAAA1C,EAAA9G,MAAAgF,KAAAtF,YAAA,yIAuEb,IAAAyN,EAE4BnI,KAAKoF,MAA9BnM,EAFHkP,EAEGlP,KAAMoU,EAFTlF,EAESkF,eAEd,OAEI/H,EAAAjP,EAAAkP,cAACwI,GAAA,EAAD,CACIC,cAAY,EACZf,MAAO,CAAChc,SAAU,YAClBsc,OAAQvN,KAAKuN,OACbH,YAAapN,KAAKoN,YAClBE,YAAatN,KAAKsN,aAEjBD,GACD/H,EAAAjP,EAAAkP,cAAA,OAAK0H,MAAOjc,GAAZ,sBAIAsU,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAEXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aACXF,EAAAjP,EAAAkP,cAACmN,GAAD,CAAMnB,KxBpID,KwBoIsBf,YxB/Hf,UwBgINmC,cAAe,SAACX,EAAcC,GAAf,OAAgC3M,EAAAjP,EAAAkP,cAACqN,GAAD,CAAWZ,aAAcA,EAAcC,aAAcA,KACpGY,YAAY,QACZC,iBAAkB9S,KAAKmP,sBACzB7J,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAAf,iDAIRF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAEXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,eAAf,iCACkCF,EAAAjP,EAAAkP,cAAA,WADlC,mCAKJD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,6BACXF,EAAAjP,EAAAkP,cAACqD,GAAD,CAAW3P,KAAMA,eAzInB4M,odCF1B,IAAMkN,GAAW,SAAA1R,GAAwB,IAArB2R,EAAqB3R,EAArB2R,KAAMrK,EAAetH,EAAfsH,SACtB,OACIrD,EAAAjP,EAAAkP,cAAA,UAAQoD,SAAU,SAACd,GAAD,OAAWc,EAASd,EAAMrN,OAAOrE,QAAQA,MAAO6c,GAE1D9Z,MAAMC,KAAKD,MAAM,KAAK0F,QAAQ3J,IAC1B,SAAAyE,GACI,IAAIf,EAAIyN,KAAc1M,GAAG,GACzB,OAAO4L,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKwD,EAAGvD,MAAOuD,GAAIf,OAOpDsa,GAAU3L,YAAS,SAAAxF,GAAwB,IAuBzC0I,EAAIC,EAAIC,EAvBYpO,EAAqBwF,EAArBxF,MAAOC,EAAcuF,EAAdvF,OAM/B,OAFeA,EAAOE,WAAanH,GAI3BgQ,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,KACIjE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,sBAAf,WAA6ClJ,EAA7C,KACAgJ,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,UAAQoD,SAAU,SAACd,GAAD,OAAWzC,GAAM8N,mBAAmB5W,EAAO,WAAY,KAAMuL,EAAMrN,OAAOrE,QAAQA,MAAOoG,EAAOE,UAC7G7G,GAA+BX,IAAI,SAAAnE,GAAC,OAAIwU,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKpF,EAAEoF,IAAKC,MAAOrF,EAAEoF,KAAMpF,EAAEqF,WAGtFmP,EAAAjP,EAAAkP,cAAA,YACAD,EAAAjP,EAAAkP,cAAA,YACAD,EAAAjP,EAAAkP,cAAA,YACAD,EAAAjP,EAAAkP,cAAA,czB2KW,KyBrKnBhJ,EAAOE,UACP+N,EAAKlF,EAAAjP,EAAAkP,cAAC4N,GAAD,CAAUH,KAAMzW,EAAOtD,KAAK,GAAI0P,SAAU,SAACxS,GAAD,OAAWiP,GAAM8N,mBAAmB5W,EAAO,OAAQ,EAAGnG,MACrGsU,EAAKnF,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,OAAOtS,MAAOoG,EAAOtD,KAAK,GAAI0P,SAAU,SAACd,GAAD,OAAWzC,GAAM8N,mBAAmB5W,EAAO,OAAQ,EAAGuL,EAAMrN,OAAOrE,UAC5HuU,EAAK,KAELF,EAAKlF,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,OAAOtS,MAAOoG,EAAOtD,KAAK,GAAI0P,SAAU,SAACd,GAAD,OAAWzC,GAAM8N,mBAAmB5W,EAAO,OAAQ,EAAGuL,EAAMrN,OAAOrE,UAC5HsU,EAAKnF,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,OAAOtS,MAAOoG,EAAOtD,KAAK,GAAI0P,SAAU,SAACd,GAAD,OAAWzC,GAAM8N,mBAAmB5W,EAAO,OAAQ,EAAGuL,EAAMrN,OAAOrE,UAC5HuU,EAAKpF,EAAAjP,EAAAkP,cAAA,SAAOkD,KAAK,OAAOtS,MAAOoG,EAAOtD,KAAK,GAAI0P,SAAU,SAACd,GAAD,OAAWzC,GAAM8N,mBAAmB5W,EAAO,OAAQ,EAAGuL,EAAMrN,OAAOrE,WAI5HmP,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,KACIjE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,sBAAf,WAA6ClJ,EAA7C,KACAgJ,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,UAAQoD,SAAU,SAACd,GAAD,OAAWzC,GAAM8N,mBAAmB5W,EAAO,WAAY,KAAMuL,EAAMrN,OAAOrE,QAAQA,MAAOoG,EAAOE,UAC7G7G,GAA+BX,IAAI,SAAAnE,GAAC,OAAIwU,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKpF,EAAEoF,IAAKC,MAAOrF,EAAEoF,KAAMpF,EAAEqF,WAGtFmP,EAAAjP,EAAAkP,cAAA,WAAMiF,EAAGlF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aAAa7O,GAAoB4F,EAAOE,UAAU,KAC1E6I,EAAAjP,EAAAkP,cAAA,WAAMkF,EAAGnF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aAAa7O,GAAoB4F,EAAOE,UAAU,KAC1E6I,EAAAjP,EAAAkP,cAAA,WAAMmF,EAAGpF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,aAAa7O,GAAoB4F,EAAOE,UAAU,KAC1E6I,EAAAjP,EAAAkP,cAAA,WACID,EAAAjP,EAAAkP,cAAA,UAAQoD,SAAU,SAACd,GAAD,OAAWzC,GAAM8N,mBAAmB5W,EAAO,UAAW,KAAMuL,EAAMrN,OAAOrE,QAAQA,MAAOoG,EAAOC,SAC5GtD,MAAMC,KAAKD,MAAM,IAAI0F,QAAQ3J,IAAI,SAAAyE,GAAC,OAAI4L,EAAAjP,EAAAkP,cAAA,UAAQrP,IAAKwD,EAAGvD,MAAOuD,GAAU,IAANA,EAAU,SAAWA,WAOrG0Z,iKAIE,IAAM3T,EAAWO,KAAKmH,MAAM/B,MAAMnM,KAAKlH,GAAeiO,KAAKmH,MAAM/B,MAAMtE,eAAtD,KAEjB,OACIwE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,YACXF,EAAAjP,EAAAkP,cAAA,YACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,sBAAf,QACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,sBAAf,UACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,sBAAf,UACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,sBAAf,UACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,sBAAf,YACCtT,OAAO0M,KAAKa,GAAUxK,IAAI,SAAAyE,GAAC,OACxB4L,EAAAjP,EAAAkP,cAAC0N,GAAD,CAAS/c,IAAKwD,EAAG4C,MAAO5C,EAAG6C,OAAQkD,EAAS/F,eAf/BmM,aAsBlBwB,eAAO,QAAPA,CAAgBC,YAAS8L,0cCzFlCC,4CAEF,SAAAA,EAAYlM,GAAO,IAAApH,EAAA,OAAA7N,OAAA+N,EAAA,EAAA/N,CAAA8N,KAAAqT,IACftT,EAAAiM,EAAAC,KAAAjM,KAAMmH,IAMViG,YAAc,WACVrN,EAAKgI,SAAS,CACVsF,gBAAgB,KATLtN,EAanBuN,YAAa,WACTvN,EAAKgI,SAAS,CACVsF,gBAAgB,KAfLtN,EAuBnBwN,OAAS,SAACrK,GACNnD,EAAKoH,MAAM/B,MAAMqH,QACjB1M,EAAKoH,MAAM/B,MAAMtG,SAAU,EAC3BiB,EAAKgI,SACD,CAACsF,gBAAgB,GACjB,WAAQtN,EAAKoH,MAAM/B,MAAMmH,UAAUrJ,MA1BvCnD,EAAKqF,MAAQ,CACTiI,gBAAgB,GAHLtN,uDAiCV,IAAA8B,EAAA7B,KAEGqN,EAAmBrN,KAAKoF,MAAxBiI,eAEFpP,EAAc+B,KAAKmH,MAAM/B,MAAMtE,cAC/B7H,EAAO+G,KAAKmH,MAAM/B,MAAMnM,KAG1B4U,GAFmB7N,KAAKmH,MAAM/B,MAAMpE,gBAEvB,GASjB,OAPIhB,KAAKmH,MAAM/B,MAAMnM,OACjB4U,EAAc9b,KAAiBkH,GACjBgF,KAAehF,EAAKlH,IACpB,SAAUkH,EAAKlH,GAAekM,IACmC,KAAjE/L,OAAO0M,KAAK3F,EAAKlH,GAAekM,GAApB,MAA0CrF,QAKpE0M,EAAAjP,EAAAkP,cAACwI,GAAA,EAAD,CACIC,cAAY,EACZf,MAAO,CAAChc,SAAU,YAClBsc,OAAQvN,KAAKuN,OACbH,YAAapN,KAAKoN,YAClBE,YAAatN,KAAKsN,aAEjBD,GACD/H,EAAAjP,EAAAkP,cAAA,OAAK0H,MAAOjc,GAAZ,sBAIAsU,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAcXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,6BACXF,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,oBACXF,EAAAjP,EAAAkP,cAAC0I,GAAD,MACA3I,EAAAjP,EAAAkP,cAAC2I,GAAD,QAIPL,GACDvI,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,KACIjE,EAAAjP,EAAAkP,cAAA,kCACAD,EAAAjP,EAAAkP,cAAC+N,GAAD,QAIPtT,KAAKmH,MAAM/B,MAAMtG,SAAWkB,KAAKmH,MAAM/B,MAAM/E,KAAKC,QACnDgF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,KACIjE,EAAAjP,EAAAkP,cAAA,kDACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WACXF,EAAAjP,EAAAkP,cAAA,UAAQC,UAAU,SAAS+C,QAAS,kBAAM1G,EAAKsF,MAAM/B,MAAM2H,gBAA3D,mBAgBZzH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAACgJ,GAAD,iBAvHH1I,aAqIVwB,eAAO,QAAPA,CAAgBC,YAAS+L,KCrGzBE,iNAzCXC,YAAc,SAAC3L,GAEX,IAAI4L,EAAMC,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAAC9T,EAAKoH,MAAMlO,MAAO,CAACwP,KAAM,8BAEpEqL,EAAW/T,EAAKoH,MAAM2M,SAE1B,GAAI/T,EAAKoH,MAAM4M,aAAc,CACzB,IAAIC,EAAM,IAAIC,KAQdH,GAAY,KANRE,EAAIE,iBAAmB,KACtB,KAAOF,EAAIG,cAAgB,IAAIjY,OAAO,GAAK,KAC3C,IAAM8X,EAAII,cAAclY,OAAO,GAAK,KACpC,IAAM8X,EAAIK,eAAenY,OAAO,IAChC,IAAM8X,EAAIM,iBAAiBpY,OAAO,IAClC,IAAM8X,EAAIO,iBAAiBrY,OAAO,IAI3C,IAAIsY,EAAaC,SAASlP,cAAc,KACxCiP,EAAWE,SAAWZ,EAAW,OACjCU,EAAWvH,MAAMC,QAAU,OAC3BsH,EAAW/O,KAAOgO,EAElBgB,SAASE,KAAKC,YAAYJ,GAC1BA,EAAWnI,QACXoI,SAASE,KAAKE,YAAYL,GAE1BtS,WAAW,WACP,OAAOwR,OAAOC,IAAImB,gBAAgBrB,IACnC,gFAKH,OACInO,EAAAjP,EAAAkP,cAAA,UAAQgD,QAASvI,KAAKwT,YAAahO,UAAWxF,KAAKmH,MAAM3B,WAAYxF,KAAKmH,MAAM4N,cArCrElP,aC6CRmP,iNA3CXxB,YAAc,SAAC3L,GAEX,IAAM4L,EAAM,gCAAkCwB,mBAAmB5M,KAAKC,UAAUvI,EAAKoH,MAAMlO,OAIvF6a,EAAW/T,EAAKoH,MAAM2M,SAE1B,GAAI/T,EAAKoH,MAAM4M,aAAc,CACzB,IAAIC,EAAM,IAAIC,KAQdH,GAAY,KANRE,EAAIE,iBAAmB,KACtB,KAAOF,EAAIG,cAAgB,IAAIjY,OAAO,GAAK,KAC3C,IAAM8X,EAAII,cAAclY,OAAO,GAAK,KACpC,IAAM8X,EAAIK,eAAenY,OAAO,IAChC,IAAM8X,EAAIM,iBAAiBpY,OAAO,IAClC,IAAM8X,EAAIO,iBAAiBrY,OAAO,IAI3C,IAAIsY,EAAaC,SAASlP,cAAc,KACxCiP,EAAWE,SAAWZ,EAAW,QACjCU,EAAWvH,MAAMC,QAAU,OAC3BsH,EAAW/O,KAAOgO,EAElBgB,SAASE,KAAKC,YAAYJ,GAC1BA,EAAWnI,QACXoI,SAASE,KAAKE,YAAYL,GAE1BtS,WAAW,WACP,OAAOwR,OAAOC,IAAImB,gBAAgBrB,IACnC,gFAKH,OACInO,EAAAjP,EAAAkP,cAAA,UAAQgD,QAASvI,KAAKwT,YAAahO,UAAWxF,KAAKmH,MAAM3B,WAAYxF,KAAKmH,MAAM4N,cAvCjElP,6dCmBPA,0BCcpB,IAAMqP,GAAU5N,YAAS,SAAAjG,GAA6B,IAA1B1F,EAA0B0F,EAA1B1F,QAASwZ,EAAiB9T,EAAjB8T,WAEjC,GAAgB,OAAZxZ,QAAgC5K,IAAZ4K,GAA0BA,EAAQyZ,cAAgBljB,QAA0C,IAAhCA,OAAO0M,KAAKjD,GAAS/C,OAAe,OAAO,KAU/H,IARA,IAAMuN,EAAIxK,EAAO,SAIX0Z,EAAO1e,GAAoBwP,GAC3BlN,EAAO0C,EAAO,KAEhBwB,EAAI,CAAC,KAAM,KAAM,MACZzD,EAAE,EAAGA,EAAE,EAAGA,IACX2b,EAAK3b,KAAOhD,KAChByG,EAAEzD,GAAKyb,EAAa9c,GAAEY,EAAKS,IAAMT,EAAKS,GAC5B,IAANA,G9BqKe,K8BrKJyM,IACXhJ,EAAEzD,IAAM,KAAO0M,KAAcnN,EAAKS,IAAI,GAAQ,MAItD,IAAI8C,EAAU,GAEVA,EADA2Y,EACU9c,GAAEsD,EAAO,SAEc,IAAvBA,EAAO,QAAoB,aAA3B,OAAAV,OAAiDU,EAAO,SAGtE,IAAI2Z,EAAU,KACVC,EAAW,KACX5Z,EAAO,kBAAwBA,EAAO,qBACtC2Z,EAA0C,MAAhC3Z,EAAO,iBAA+B,EAAOA,EAAO,iBAC9D4Z,EAA6C,MAAlC5Z,EAAO,mBAAiC,EAAOA,EAAO,oBAErE,IAAM6Z,EAAeF,EAAU,GAAKC,EAAW,EAI/C,OACIjQ,EAAAjP,EAAAkP,cAACgE,EAAA,SAAD,KACIjE,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,oBACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,yBzBgBD,SAAA7J,GAE1B,GAAgB,OAAZA,QAAgC5K,IAAZ4K,EAAuB,MAAO,GAEtD,IAAM1C,EAAO0C,EAAO,KACpB,OAAQA,EAAO,UAEX,KLyGsB,EKzGD,WAAAV,OAAYhC,EAAK,GAAjB,SAAAgC,OAA2BhC,EAAK,GAAhC,SAAAgC,OAA0ChC,EAAK,IACpE,KLyG0B,EKzGD,oBAAAgC,OAAqBhC,EAAK,GAA1B,KAAAgC,OAAgChC,EAAK,GAArC,MAAAgC,OAA4ChC,EAAK,IAC1E,KLyGwB,EKzGD,oBAAAgC,OAAqBhC,EAAK,GAA1B,KAAAgC,OAAgChC,EAAK,GAArC,KAAAgC,OAA2ChC,EAAK,IACvE,KLyGyB,EKzGD,mBAAAgC,OAAoBhC,EAAK,GAAzB,SAAAgC,OAAmChC,EAAK,IAChE,KLyGqB,EKzGD,qBAAAgC,OAAsBhC,EAAK,GAA3B,SAAAgC,OAAqChC,EAAK,IAC9D,KLyGmB,IKzGD,kBAAAgC,OAAmBhC,EAAK,IAC1C,KAAK3D,GAAc,YAEnB,KL0G4B,GK1GD,WAAA2F,OAAYhC,EAAK,GAAjB,YAAAgC,OAA8BhC,EAAK,GAAnC,YAAAgC,OAAgDhC,EAAK,IAChF,KL0GsB,GK1GD,WAAAgC,OAAYhC,EAAK,GAAjB,KAAAgC,OAlBV,UAkBUA,OAAoChC,EAAK,GAAzC,KAAAgC,OAnBZ,UAmBYA,OAA0DhC,EAAK,IACpF,KL0G2B,GK1GD,WAAAgC,OAAYhC,EAAK,GAAjB,UAAAgC,OAA4BhC,EAAK,GAAjC,QAAAgC,OAA0ChC,EAAK,IAEzE,KLyGmB,GKzGD,cAAAgC,OAAehC,EAAK,GAApB,SAAAgC,OAA8BhC,EAAK,IACrD,KLyGyB,GKzGD,qBAAAgC,OAAsBhC,EAAK,GAA3B,SAAAgC,OAAqChC,EAAK,IAElE,KLwGuB,GKxGD,kBAAAgC,OAAmBhC,EAAK,GAAxB,KAAAgC,OAA8BhC,EAAK,GAAnC,KAAAgC,OAAyChC,EAAK,IACpE,KLwGuB,GKxGD,kBAAAgC,OAAmBhC,EAAK,GAAxB,QAAAgC,OAAiChC,EAAK,IAE5D,KLuG0B,GKvGD,gBAAAgC,OAAiBhC,EAAK,GAAtB,KAAAgC,OAA4BhC,EAAK,GAAjC,KAAAgC,OAAuChC,EAAK,IACrE,KLuGwB,GKvGD,gBAAAgC,OAAiBhC,EAAK,GAAtB,KAAAgC,OAA4BhC,EAAK,GAAjC,KAAAgC,OAAuChC,EAAK,IAEnE,KLsGkB,GKtGD,gBAAAgC,OAAiBhC,EAAK,GAAtB,SAAAgC,OAAgChC,EAAK,IAEtD,KLqGoB,GKrGD,eAAAgC,OAAgBhC,EAAK,GAArB,KAAAgC,OAA2B/D,GAAiB+B,EAAK,KAEpE,KLoG4B,GKpGD,uBAAAgC,OAAwB5I,EAAc4G,EAAK,KACtE,KLoG6B,GKpGD,gBAAAgC,OAAiBhC,EAAK,GAAG,MAAM,OAE3D,KLmG0B,GKnGD,SAAAgC,OAAU7I,EAAY6G,EAAK,IAA3B,UAAAgC,OAAuChC,EAAK,IACrE,KLmG2B,IKnGD,cAAAgC,OAAehC,EAAK,GAAG,MAAM,MAA7B,MAAAgC,OAAuC7I,EAAY6G,EAAK,IAAxD,KAE1B,KLoGkB,GKpGD,oBAAAgC,OAAqBhC,EAAK,GAA1B,KAAAgC,OAAgChC,EAAK,GAArC,KAAAgC,OAA2ChC,EAAK,IACjE,KLoG0B,GKpGD,gBAAAgC,OAAiBhC,EAAK,IAC/C,KLoG2B,GKpGD,oBAAAgC,OAAqBhC,EAAK,GAA1B,KAAAgC,OAAgChC,EAAK,GAArC,KAAAgC,OAA2ChC,EAAK,IAC1E,KLoGyB,GKpGD,oBAAAgC,OAAqBhC,EAAK,GAA1B,KAAAgC,OAAgChC,EAAK,GAArC,KAAAgC,OAA2ChC,EAAK,IACxE,KLoGqB,GKpGD,mBAAAgC,OAAoBhC,EAAK,GAAzB,SAAAgC,OAAmChC,EAAK,IAC5D,KLoGsB,GKpGD,qBAAAgC,OAAsBhC,EAAK,GAA3B,SAAAgC,OAAqChC,EAAK,IAC/D,KLoGuB,GKpGD,aAAAgC,OAAchC,EAAK,GAAnB,QAAAgC,OAA4BhC,EAAK,IACvD,KLoG6B,GKpGD,oBAAAgC,OAAqBhC,EAAK,GAA1B,QAAAgC,OAAmChC,EAAK,IACpE,KLoG2B,GKpGD,sBAAAgC,OAAuB7I,EAAY6G,EAAK,IAAxC,OAAAgC,OAAiDhC,EAAK,GAAtD,QAAAgC,OAA+DhC,EAAK,IAE9F,KLoGmB,IKpGD,WAAAgC,OAAYhC,EAAK,GAAjB,KAAAgC,OAAuBhC,EAAK,IAE9C,QAAS,UAAAgC,OAAWU,EAAO,SAAlB,MAAAV,OAAmChC,EAAK,GAAxC,KAAAgC,OAA8ChC,EAAK,GAAnD,KAAAgC,OAAyDhC,EAAK,KyBlEvBwc,CAAe9Z,KAE1DA,EAAO,WAAiBrG,IACzBgQ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,8BACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,oBAAoBhJ,GAClCgZ,GACDlQ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAAWyH,MAAO,CAACyI,gBAAiB1d,GAAYsd,IAAWxI,MAAO3V,GAAOme,KACxFhQ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,YAAYyH,MAAO,CAACyI,gBAAiB1d,GAAYud,IAAYzI,MAAO3V,GAAOoe,UAOxGhL,GAAOjD,YAAS,SAAAxF,GAA0B,IAAvB7E,EAAuB6E,EAAvB7E,KAAMkY,EAAiBrT,EAAjBqT,WAC3B,OAAa,OAATlY,QAA0BlM,IAATkM,EAA2B,KACzB,IAAnBA,EAAI,OAAyB,KAE7BqI,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,iBACXF,EAAAjP,EAAAkP,cAAC2P,GAAD,CAASvZ,QAASsB,EAAMkY,WAAYA,OAK1CzL,GAAUiM,aAAWrO,YAAS,WAAwF,IAAAjE,EAAA3I,UAAA9B,OAAA,QAAA7H,IAAA2J,UAAA,GAAAA,UAAA,GAAP,GAA9Ekb,EAAqFvS,EAArFuS,QAAS3X,EAA4EoF,EAA5EpF,YAAaqE,EAA+De,EAA/Df,aAAcuT,EAAiDxS,EAAjDwS,QAASV,EAAwC9R,EAAxC8R,WAAwCW,EAAAzS,EAA5B0S,mBAA4B,IAAAD,KAQxH,GAAgB,OAAZD,QAAgC9kB,IAAZ8kB,EAAuB,OAAO,KAEtD,IAAKA,EAAO,MAAc,OAAO,KAEjC,IAAMG,EAAiB9jB,OAAO0M,KAAKiX,EAAO,OAAcvE,OAAO,SAAA3Y,GAAC,OAAIkd,EAAO,MAAald,GAApB,OAAiC,IAAGC,OAExG,OACI0M,EAAAjP,EAAAkP,cAAA,OAAKC,UAAS,oBAAAvK,OAAsB8a,EAAY,cAAc,IAAMxN,QAbrD,WACfnD,GAAM8D,aAAajL,GACnBmH,GAAMyE,cAAcvH,GACpBsT,EAAQ3f,KAAK,YAU4E6W,MAAM,iBAC3FxH,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,kBACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBAAgB/R,GAAS6O,IAEvC0T,EAAiB,GAAK1Q,EAAAjP,EAAAkP,cAAA,WAAMrN,GAAc2d,EAAO,gBAErD3jB,OAAO0M,KAAKiX,EAAO,OAAc5gB,IAAI,SAAA0D,GAAC,OAAI2M,EAAAjP,EAAAkP,cAAC0Q,GAAD,CAAM/f,IAAKyC,EAAGsE,KAAM4Y,EAAO,MAAald,GAAIwc,WAAYA,UAMzGzO,GAAWY,YAAS,SAAAX,GAAwD,IAArD1I,EAAqD0I,EAArD1I,YAAa2I,EAAwCD,EAAxCC,SAAUuO,EAA8BxO,EAA9BwO,WAAY/T,EAAkBuF,EAAlBvF,YAC5D,GAAiB,OAAbwF,QAAkC7V,IAAb6V,EAAwB,OAAO,KAExD,IAAMO,EAAQ,CAAClJ,cAAakX,cAC5B,OACI7P,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,qBACVpE,GAAehM,GAAaH,IAAI,SAAAkJ,GAAS,OAAImH,EAAAjP,EAAAkP,cAAC2Q,GAADhkB,OAAA6I,OAAA,CAAS7E,IAAKiI,EAAWmE,aAAcnE,EAAW0X,QAASjP,EAASzI,IAAgBgJ,EAApF,CAA2F4O,aAAa,OACrJ3U,GAAe/L,GAAUJ,IAAI,SAAAkJ,GAAS,OAAImH,EAAAjP,EAAAkP,cAAC2Q,GAADhkB,OAAA6I,OAAA,CAAS7E,IAAKiI,EAAWmE,aAAcnE,EAAW0X,QAASjP,EAASzI,IAAgBgJ,EAApF,CAA2F4O,aAAa,OACnJzQ,EAAAjP,EAAAkP,cAAA,YACCvQ,GAAkBC,IAAI,SAAAkJ,GAAS,OAAImH,EAAAjP,EAAAkP,cAAC2Q,GAADhkB,OAAA6I,OAAA,CAAS7E,IAAKiI,EAAWmE,aAAcnE,EAAW0X,QAASjP,EAASzI,IAAgBgJ,MACxH7B,EAAAjP,EAAAkP,cAAA,YACCpQ,GAAqBF,IAAI,SAAAkJ,GAAS,OAAImH,EAAAjP,EAAAkP,cAAC2Q,GAADhkB,OAAA6I,OAAA,CAAS7E,IAAKiI,EAAWmE,aAAcnE,EAAW0X,QAASjP,EAASzI,IAAgBgJ,SAKjIgP,GAAc7O,YAAS,SAAAP,GAA6B,IAA1BnH,EAA0BmH,EAA1BnH,QAASuV,EAAiBpO,EAAjBoO,WACrC,OAAgB,OAAZvV,QAAgC7O,IAAZ6O,EAA8B,KACjDA,EAAO,SACRA,EAAQnD,WAAanH,GAAqB,KAE1CgQ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,iBACXF,EAAAjP,EAAAkP,cAAC2P,GAAD,CAASvZ,QAASiE,EAASuV,WAAYA,KAJd,OAS/B9O,GAAeiB,YAAS,SAAA8O,GAA8B,IAA3B3W,EAA2B2W,EAA3B3W,SAAU0V,EAAiBiB,EAAjBjB,WAEvC,OAAiB,OAAb1V,QAAkC1O,IAAb0O,EAA+B,KAEpD6F,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,0BACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBAAf,QACCtT,OAAO0M,KAAKa,GAAUxK,IAAI,SAAAyE,GAAC,OACxB4L,EAAAjP,EAAAkP,cAAC4Q,GAAD,CAAajgB,IAAKwD,EAAG4C,MAAO5C,EAAGkG,QAASH,EAAS/F,GAAIyb,WAAYA,SAM3ErO,GAASQ,YAAS,SAAA+O,GAA8C,IAA3C/Z,EAA2C+Z,EAA3C/Z,MAAOrD,EAAoCod,EAApCpd,KAAMkc,EAA8BkB,EAA9BlB,WAAY/T,EAAkBiV,EAAlBjV,YAChD,OAAa,OAATnI,QAA0BlI,IAATkI,EAA2B,KAG5CqM,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBACXF,EAAAjP,EAAAkP,cAAA,UAAKO,GAAgBnM,SAAS2C,EAAO,KAArC,KAA4CgJ,EAAAjP,EAAAkP,cAAA,QAAMC,UAAU,QAAQvM,EAAI,OACxEqM,EAAAjP,EAAAkP,cAAC+Q,GAAD,CAAUrY,YAAa3B,EAAOsK,SAAU3N,EAAI,SAAckc,WAAYA,EAAY/T,YAAaA,IAtJ3G,SAAuBwB,GACnB,GAAIA,GAAUA,EAAM,KAChB,IAAK,IAAI7M,KAAQ6M,EAAOvC,KAAM,CAC1B,IAAMuP,EAAIhN,EAAOvC,KAAKtK,GACtB,GAAI6Z,EAAE5Z,eAAe,aACb4Z,EAAEnT,WAAanH,GAAc,OAAO,EAIpD,OAAO,EA8IEihB,CAActd,IAASqM,EAAAjP,EAAAkP,cAACiR,GAAD,CAAc/W,SAAUxG,EAAI,KAAUkc,WAAYA,OAKhFsB,GAAUnP,YAAS,SAAAoP,GAA0C,IAAvCnZ,EAAuCmZ,EAAvCnZ,QAAS4X,EAA8BuB,EAA9BvB,WAAY/T,EAAkBsV,EAAlBtV,YAC7C,OAAgB,OAAZ7D,QAAgCxM,IAAZwM,EAA8B,KAElD+H,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,oBACVtT,OAAO0M,KAAKrB,GAAStI,IAAI,SAAAgJ,GAAW,OAAIqH,EAAAjP,EAAAkP,cAACoR,GAAD,CAAQzgB,IAAK+H,EAAa3B,MAAO2B,EAAahF,KAAMsE,EAAQU,GAAckX,WAAYA,EAAY/T,YAAaA,SAerJwV,GAVQtP,YAAS,SAAAuP,GAAuC,IAApC5d,EAAoC4d,EAApC5d,KAAMkc,EAA8B0B,EAA9B1B,WAAY/T,EAAkByV,EAAlBzV,YACjD,OAAa,OAATnI,QAA0BlI,IAATkI,EAA2B,KAG5CqM,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,YACXF,EAAAjP,EAAAkP,cAACuR,GAAD,CAASvZ,QAAStE,EAAKlH,GAAgBojB,WAAYA,EAAY/T,YAAaA,kdCxLlF2V,4CAEF,SAAAA,EAAY5P,GAAO,IAAApH,EAAA,OAAA7N,OAAA+N,EAAA,EAAA/N,CAAA8N,KAAA+W,IACfhX,EAAAiM,EAAAC,KAAAjM,KAAMmH,IAQViG,YAAc,WACVrN,EAAKgI,SAAS,CACVsF,gBAAgB,KAXLtN,EAenBuN,YAAa,WACTvN,EAAKgI,SAAS,CACVsF,gBAAgB,KAjBLtN,EAyBnBwN,OAAS,SAACrK,GACNnD,EAAKoH,MAAM/B,MAAMqH,QACjB1M,EAAKoH,MAAM/B,MAAMtG,SAAU,EAC3BiB,EAAKgI,SACD,CAAEsF,gBAAgB,GAClB,WAAOtN,EAAKoH,MAAM/B,MAAMmH,UAAUrJ,MA5BtCnD,EAAKqF,MAAQ,CACTiI,gBAAgB,GAHLtN,uDAqCV,IAGGsN,EAAmBrN,KAAKoF,MAAxBiI,eACFpU,EAAO+G,KAAKmH,MAAM/B,MAAMnM,KAE9B,OACIqM,EAAAjP,EAAAkP,cAACwI,GAAA,EAAD,CACIC,cAAY,EACZf,MAAO,CAAChc,SAAU,YAClBsc,OAAQvN,KAAKuN,OACbH,YAAapN,KAAKoN,YAClBE,YAAatN,KAAKsN,aAEjBD,GACD/H,EAAAjP,EAAAkP,cAAA,OAAK0H,MAAOjc,GAAZ,sBAIAsU,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,WAEXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,6BACXF,EAAAjP,EAAAkP,cAAA,qBACAD,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,oBACXF,EAAAjP,EAAAkP,cAAC0I,GAAD,MACA3I,EAAAjP,EAAAkP,cAAC2I,GAAD,QAIR5I,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,uBACXF,EAAAjP,EAAAkP,cAACyR,GAAD,CAAgB/d,KAAMA,EAAMkc,YAAanV,KAAKmH,MAAM/B,MAAMjE,QAASC,YAAapB,KAAKmH,MAAM/B,MAAMhE,yBAtEtGyE,aAkFRwB,eAAO,QAAPA,CAAgBC,YAASyP,0cCxFlCE,iKAEO,IAAA9N,EACmCnJ,KAAKmH,MAAM/B,MAA3CxE,EADHuI,EACGvI,KAAMF,EADTyI,EACSzI,YAAaQ,EADtBiI,EACsBjI,SAC3B,OAAON,EACH0E,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,QACV9E,EAEAQ,GAAY,GAAKoE,EAAAjP,EAAAkP,cAAA,gBAAQrE,EAAR,OAEpB,YAVc2E,aAebwB,eAAO,QAAPA,CAAgBC,YAAS2P,4cCExC,IAAMC,GAAW,SAAA7V,GAAA,IAAG0T,EAAH1T,EAAG0T,MAAOoC,EAAV9V,EAAU8V,GAAIC,EAAd/V,EAAc+V,oBAAd,OACb9R,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CACIC,KAAMH,EACNI,MAAOH,EACPI,SAAU,SAAA1V,GAAA,IAAGgG,EAAHhG,EAAGgG,MAAH,OACNxC,EAAAjP,EAAAkP,cAAA,OAAKC,UAAWsC,EAAQ,qBAAuB,eAC3CxC,EAAAjP,EAAAkP,cAACkS,GAAA,EAAD,CAAMN,GAAIA,GAAKpC,QAMzB2C,GAAU,kBACZpS,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,gBACXF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,SAAf,iBAiEOmS,iKAvDP,IAAMC,EAAKC,SAAkBnE,OAAOoE,SAASC,QACvCC,IAAQJ,EAAEI,OAAoB,MAAZJ,EAAEI,MAE1B,OACI1S,EAAAjP,EAAAkP,cAAC0S,EAAA,EAAD,CAAU7S,MAAO8S,IACjB5S,EAAAjP,EAAAkP,cAAC4S,GAAA,EAAD,KACI7S,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,OAEXF,EAAAjP,EAAAkP,cAAA,UAAQC,UAAU,UACdF,EAAAjP,EAAAkP,cAAC6S,GAAD,CAAUhB,qBAAqB,EAAMD,GAAG,IAAIpC,MAAM,aAClDzP,EAAAjP,EAAAkP,cAAC6S,GAAD,CAAUjB,GAAG,UAAUpC,MAAM,oBAC7BzP,EAAAjP,EAAAkP,cAAC6S,GAAD,CAAUjB,GAAG,cAAcpC,MAAM,gBACjCzP,EAAAjP,EAAAkP,cAAC6S,GAAD,CAAUjB,GAAG,UAAUpC,MAAM,WAE7BzP,EAAAjP,EAAAkP,cAAC6S,GAAD,CAAUjB,GAAG,WAAWpC,MAAM,YAC7BiD,GAAS1S,EAAAjP,EAAAkP,cAAC6S,GAAD,CAAUjB,GAAG,eAAepC,MAAM,iBAC3CiD,GAAS1S,EAAAjP,EAAAkP,cAAC6S,GAAD,CAAUjB,GAAG,SAASpC,MAAM,UACtCzP,EAAAjP,EAAAkP,cAAC6S,GAAD,CAAUjB,GAAG,QAAQpC,MAAM,SAC3BzP,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,UAAf,KACAF,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,mBAAf,gBACkB6S,QADlB,OACoD/S,EAAAjP,EAAAkP,cAAA,KAAGE,KAAK,0BAA0BjL,OAAO,SAASkL,IAAI,uBAAtD,oBAIxDJ,EAAAjP,EAAAkP,cAAA,OAAKC,UAAU,iBACXF,EAAAjP,EAAAkP,cAACmN,GAAD,CAAMnB,KjCnED,KiCmEsBf,YjC9Df,YiC+DZlL,EAAAjP,EAAAkP,cAAC+S,GAAD,OAGJhT,EAAAjP,EAAAkP,cAACgT,GAAA,EAAD,KACIjT,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAOE,OAAO,EAAMD,KAAK,IAAIkB,OAAQ,SAAArR,GAAK,OAAI7B,EAAAjP,EAAAkP,cAACkT,GAAD,CAAUT,MAAOA,OAC/D1S,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAOC,KAAK,UAAUkB,OAAQ,SAAArR,GAAK,OAAI7B,EAAAjP,EAAAkP,cAACmT,GAAD,CAAQV,MAAOA,OACtD1S,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAOC,KAAK,cAAckB,OAAQ,SAAArR,GAAK,OAAI7B,EAAAjP,EAAAkP,cAACoT,GAAD,CAAYX,MAAOA,OAC9D1S,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAOC,KAAK,UAAUkB,OAAQ,SAAArR,GAAK,OAAI7B,EAAAjP,EAAAkP,cAACqT,GAAD,CAAQZ,MAAOA,OAGtD1S,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAOC,KAAK,WAAWkB,OAAQ,SAAArR,GAAK,OAAI7B,EAAAjP,EAAAkP,cAACsT,GAAD,CAASb,MAAOA,OACvDA,GAAS1S,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAOC,KAAK,eAAekB,OAAQ,SAAArR,GAAK,OAAI7B,EAAAjP,EAAAkP,cAACuT,GAAD,CAAad,MAAOA,OACzEA,GAAS1S,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAOC,KAAK,SAASkB,OAAQ,SAAArR,GAAK,OAAI7B,EAAAjP,EAAAkP,cAACwT,GAAD,CAAOf,MAAOA,OAC9D1S,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAOE,OAAO,EAAMD,KAAK,QAAQkB,OAAQ,SAAArR,GAAK,OAAI7B,EAAAjP,EAAAkP,cAACyT,GAAD,SAClD1T,EAAAjP,EAAAkP,cAAC8R,GAAA,EAAD,CAAO4B,UAAWvB,MAOtBpS,EAAAjP,EAAAkP,cAAC2T,GAAD,gBAnDFrT,aC5BEsT,QACW,cAA7BzF,OAAOoE,SAASsB,UAEe,UAA7B1F,OAAOoE,SAASsB,UAEhB1F,OAAOoE,SAASsB,SAAStR,MACvB,2DCXN,SAASuR,MAELtd,QAAQ6B,IAAMyb,GACdtd,QAAQC,KAAOqd,GACftd,QAAQud,MAAQD,GAGpBE,IAASf,OAAOlT,EAAAjP,EAAAkP,cAACiU,GAAD,MAAS/E,SAASgF,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.350c6e29.chunk.js","sourcesContent":["import WebMidi from \"webmidi\";\n\nfunction portById(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputById(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\nfunction outputById(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = inputById(id);\n    return i ? i.name : null;\n}\n\nfunction outputName(id) {\n    let i = outputById(id);\n    return i ? i.name : null;\n}\n\n\nexport {\n    portById,\n    inputById,\n    inputName,\n    outputName,\n    outputById\n}\n","\nexport const MAX_FILE_SIZE = 200 * 1024;\n\n// export const MAX_STATUS_MESSAGES = 40;\n\nexport function isVal(v) {\n    return v !== undefined && v !== null && v !== '' && v >= 0;\n}\n\nexport function sortObject(obj) {\n    let arr = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort((a, b) => a.value.localeCompare(b.value));\n    return arr;\n}\n\n\nexport const dropOverlayStyle = {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    paddingTop: '4rem',\n    background: 'rgba(0,0,0,0.4)',\n    textAlign: 'center',\n    color: '#fff',\n    fontSize: '4rem'\n};\n","import {sortObject} from \"../utils/misc\";\n\nexport const ANY_MIDI_PORT = \".*\";\n\n// export const PACER_MIDI_PORT_NAME = \"vmpk.*\";            // DEBUG\n// export const PACER_MIDI_INPUT_PORT_NAME = \"vmpk.*\";      // DEBUG\n// export const PACER_MIDI_OUTPUT_PORT_NAME = \"vmpk.*\";     // DEBUG\nexport const PACER_MIDI_PORT_NAME = \"Pacer.*\";          // can be a regex\nexport const PACER_MIDI_INPUT_PORT_NAME = \"Pacer.*\";\nexport const PACER_MIDI_OUTPUT_PORT_NAME = \"Pacer.*\";\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\nexport const SYSEX_HEADER = [0x7F];\n\nexport const COMMAND_SET = 0x01;\nexport const COMMAND_GET = 0x02;\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\nexport const TARGET_NAME = [\n    \"switch 1\",     // 1\n    \"switch 2\",     // 2\n    \"switch 3\",     // 3\n    \"switch 4\",     // 4\n    \"switch 5\",     // 5\n    \"switch 6\",     // 6\n    null,           // 7\n    \"switch A\",     // 8\n    \"switch B\",     // 9\n    \"switch C\",     // 10    A\n    \"switch D\",     // 11    B\n    \"FS 1\",         // 12    C\n    \"FS 2\",         // 13    D\n    \"FS 3\",         // 14    E\n    \"FS 4\",         // 15    F\n    \"EXP 1\",        // 16   10\n    \"EXP 2\"         // 17   11\n];\n/*\nexport const TARGET_NAME = [\n    null,           // 0\n    \"switch 1\",     // 1\n    \"switch 2\",     // 2\n    \"switch 3\",     // 3\n    \"switch 4\",     // 4\n    \"switch 5\",     // 5\n    \"switch 6\",     // 6\n    null,           // 7\n    \"switch A\",     // 8\n    \"switch B\",     // 9\n    \"switch C\",     // 10    A\n    \"switch D\",     // 11    B\n    \"FS 1\",         // 12    C\n    \"FS 2\",         // 13    D\n    \"FS 3\",         // 14    E\n    \"FS 4\",         // 15    F\n    \"EXP 1\",        // 16   10\n    \"EXP 2\"         // 17   11\n];\n*/\n\n/*\nexport const TARGET_NAME_LONG = [\n    \"\",\n    \"SW-1\",\n    \"SW-2\",\n    \"SW-3\",\n    \"SW-4\",\n    \"SW-5\",\n    \"SW-6\",\n    \"\",\n    \"SW-A\",\n    \"SW-B\",\n    \"SW-C\",\n    \"SW-D\",\n    \"Footswitch 1\",\n    \"Footswitch 2\",\n    \"Footswitch 3\",\n    \"Footswitch 4\",\n    \"Expression Pedal 1\",\n    \"Expression Pedal 2\"\n];\n*/\n\nexport const PRESET_TARGET = [\n    \"Current\",      // 0x01\n    \"Track\",        // 0x02\n    \"Transport\",    // 0x03\n    \"A1\", // 0x04\n    \"A2\", // 0x05\n    \"A3\", // 0x06\n    \"A4\", // 0x07\n    \"A5\", // 0x08\n    \"A6\", // 0x09\n    \"B1\", // 0x0A\n    \"B2\", // 0x0B\n    \"B3\", // 0x0C\n    \"B4\", // 0x0D\n    \"B5\", // 0x0E\n    \"B6\", // 0x0F\n    \"C1\", // 0x10\n    \"C2\", // 0x11\n    \"C3\", // 0x12\n    \"C4\", // 0x13\n    \"C5\", // 0x14\n    \"C6\", // 0x15\n    \"D1\", // 0x16\n    \"D2\", // 0x17\n    \"D3\", // 0x18\n    \"D4\", // 0x19\n    \"D5\", // 0x1A\n    \"D6\"    // 0x1B\n]\n\nexport const CONTROL_NAME = 0x01;\nexport const CONTROL_STOMPSWITCH_1 = 0x0D;\nexport const CONTROL_STOMPSWITCH_2 = 0x0E;\nexport const CONTROL_STOMPSWITCH_3 = 0x0F;\nexport const CONTROL_STOMPSWITCH_4 = 0x10;\nexport const CONTROL_STOMPSWITCH_5 = 0x11;\nexport const CONTROL_STOMPSWITCH_6 = 0x12;\nexport const CONTROL_RESERVED = 0x13;\nexport const CONTROL_STOMPSWITCH_A = 0x14;\nexport const CONTROL_STOMPSWITCH_B = 0x15;\nexport const CONTROL_STOMPSWITCH_C = 0x16;\nexport const CONTROL_STOMPSWITCH_D = 0x17;\nexport const CONTROL_FOOTSWITCH_1 = 0x18;\nexport const CONTROL_FOOTSWITCH_2 = 0x19;\nexport const CONTROL_FOOTSWITCH_3 = 0x1A;\nexport const CONTROL_FOOTSWITCH_4 = 0x1B;\nexport const CONTROL_EXPRESSION_PEDAL_1 = 0x36;\nexport const CONTROL_EXPRESSION_PEDAL_2 = 0x37;\nexport const CONTROL_MIDI = 0x7E;\nexport const CONTROL_ALL = 0x7F;\n\n// objects:\nexport const CONTROLS = {\n    [CONTROL_NAME]: \"name\",\n    [CONTROL_STOMPSWITCH_1]: \"1\",\n    [CONTROL_STOMPSWITCH_2]: \"2\",\n    [CONTROL_STOMPSWITCH_3]: \"3\",\n    [CONTROL_STOMPSWITCH_4]: \"4\",\n    [CONTROL_STOMPSWITCH_5]: \"5\",\n    [CONTROL_STOMPSWITCH_6]: \"6\",\n    [CONTROL_RESERVED]: \"RESERVED\",\n    [CONTROL_STOMPSWITCH_A]: \"A\",\n    [CONTROL_STOMPSWITCH_B]: \"B\",\n    [CONTROL_STOMPSWITCH_C]: \"C\",\n    [CONTROL_STOMPSWITCH_D]: \"D\",\n    [CONTROL_FOOTSWITCH_1]: \"FS 1\",\n    [CONTROL_FOOTSWITCH_2]: \"FS 2\",\n    [CONTROL_FOOTSWITCH_3]: \"FS 3\",\n    [CONTROL_FOOTSWITCH_4]: \"FS 4\",\n    [CONTROL_EXPRESSION_PEDAL_1]: \"EXP 1\",\n    [CONTROL_EXPRESSION_PEDAL_2]: \"EXP 2\",\n    [CONTROL_MIDI]: \"MIDI configuration\",\n    [CONTROL_ALL]: \"ALL\"\n};\n\nexport const CONTROLS_FULLNAME = {      //FIXME: use constants for the key, like CONTROLS above\n    0x01: \"Preset Name\",\n    0x0D: \"Stompswitch 1\",\n    0x0E: \"Stompswitch 2\",\n    0x0F: \"Stompswitch 3\",\n    0x10: \"Stompswitch 4\",\n    0x11: \"Stompswitch 5\",\n    0x12: \"Stompswitch 6\",\n    0x13: \"RESERVED\",\n    0x14: \"Stompswitch A\",\n    0x15: \"Stompswitch B\",\n    0x16: \"Stompswitch C\",\n    0x17: \"Stompswitch D\",\n    0x18: \"Footswitch 1\",\n    0x19: \"Footswitch 2\",\n    0x1A: \"Footswitch 3\",\n    0x1B: \"Footswitch 4\",\n    0x36: \"Expression Pedal 1\",\n    0x37: \"Expression Pedal 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n//FIXME: add FS when ready\nexport const CONTROLS_WITH_SEQUENCE = [\n    0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17  //, 0x18, 0x19, 0x1A, 0x1B\n];\n\n// subsets of CONTROLS keys:        // we convert to string because this ID will be used as object property (keys)\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17].map(String);\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17].map(String);\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12].map(String);\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B].map(String);\nexport const EXPPEDALS = [0x36, 0x37].map(String);\n\n// message types EXP PEDALS:\nexport const MSG_AD_MIDI_CC = 0x00;\nexport const MSG_AD_NRPN_COARSE = 0x03;\nexport const MSG_AD_NRPN_FINE = 0x04;\nexport const MSG_AD_PITCH_BEND = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\n// message types STOMPSWITCHES and FOOTSWITCHES:\nexport const MSG_SW_MIDI_CC_TGGLE = 0x47;\nexport const MSG_SW_MIDI_CC = 0x40;\nexport const MSG_SW_MIDI_CC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRG_BANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPN_COARSE = 0x57;\nexport const MSG_SW_NRPN_FINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESET_SELECT = 0x62;\nexport const MSG_SW_PRESET_INC_DEC = 0x56;\nexport const MSG_SW_STEP_SELECT = 0x63;\nexport const MSG_SW_STEP_INC_DEC = 0x64;\n\n// message types ENCODER:\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPN_COARSE = 0x15;\nexport const MSG_ENC_NRPN_FINE = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESET_SELECT = 0x17;\nexport const MSG_ENC_STEP_SELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDI_CC]: \"CC\",\n    [MSG_AD_NRPN_COARSE]: \"NRPN C\",\n    [MSG_AD_NRPN_FINE]: \"NRPN F\",\n    [MSG_AD_PITCH_BEND]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRG_BANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPN_FINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESET_SELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESET_INC_DEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEP_SELECT]: \"STEP SELECT\",\n    [MSG_SW_STEP_INC_DEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPN_COARSE]: \"NRPN C\",\n    [MSG_ENC_NRPN_FINE]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESET_SELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEP_SELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\nexport const MSG_TYPES_SHORT_NAMES = {      // used in overview\n\n    [MSG_AD_MIDI_CC]: \"CC\",\n    [MSG_AD_NRPN_COARSE]: \"NRPN C\",\n    [MSG_AD_NRPN_FINE]: \"NRPN F\",\n    [MSG_AD_PITCH_BEND]: \"Pitch\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW\",\n    [MSG_CTRL_OFF]: \"OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC tggl\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note tggl\",\n    [MSG_SW_PRG_BANK]: \"Prg bank\",\n    [MSG_SW_PRG_STEP]: \"Prg step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN C\",\n    [MSG_SW_NRPN_FINE]: \"NRPN F\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"Relay\",\n    [MSG_SW_PRESET_SELECT]: \"Preset sel\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset +/-\",\n    [MSG_SW_STEP_SELECT]: \"Step sel\",\n    [MSG_SW_STEP_INC_DEC]: \"Step +/-\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC rel\",\n    [MSG_ENC_NRPN_COARSE]: \"NRPN C\",\n    [MSG_ENC_NRPN_FINE]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"Pitch\",\n    [MSG_ENC_ATCHAN]: \"AT chan\",\n    [MSG_ENC_PROGRAM]: \"Prg\",\n    [MSG_ENC_PRESET_SELECT]: \"Preset sel\",\n    [MSG_ENC_STEP_SELECT]: \"Step sel\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\n// Message types for stompswitches\nexport const MSG_TYPES_FULLNAME = {\n    [MSG_CTRL_OFF]: \"OFF\",\n\n    [MSG_AD_MIDI_CC]: \"CC\",\n    [MSG_AD_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_AD_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_AD_PITCH_BEND]: \"Pitch Bend\",\n    [MSG_AD_ATCHAN]: \"Channel AfterTouch\",\n    [MSG_DAWFUNC]: \"DAW Function\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC Toggle\",\n    [MSG_SW_MIDI_CC]: \"CC Trigger\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC Step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note Toggle\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_PRG_STEP]: \"Program Step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_SW_PRESET_SELECT]: \"Preset Select\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset Inc/Dec\",\n    [MSG_SW_STEP_SELECT]: \"Step Select\",\n    [MSG_SW_STEP_INC_DEC]: \"Step Inc/Dec\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_ENC_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_ENC_PITCH]: \"Pitch Bend\",\n    [MSG_ENC_ATCHAN]: \"AT Chan.\",\n    [MSG_ENC_PROGRAM]: \"Program\",\n    [MSG_ENC_PRESET_SELECT]: \"Preset Sel\",\n    [MSG_ENC_STEP_SELECT]: \"Step Sel\"\n};\n\n// export const MSG_TYPES_FULLNAME_SW_SORTED = sortObject(MSG_TYPES_FULLNAME);\n\n\n// Preset Midi Settings\nexport const MSG_TYPES_FULLNAME_MIDI = {\n    [MSG_LOAD_CC]: \"Load CC\",\n    [MSG_SW_NOTE]: \"MIDI Note\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_DAWFUNC]: \"DAW Func.\",\n    [MSG_CTRL_OFF]: \"OFF\"\n};\n\nexport const MSG_TYPES_FULLNAME_MIDI_SORTED = sortObject(MSG_TYPES_FULLNAME_MIDI);\n\nexport const NOT_USED = \"not used\";\n\nexport const MSG_TYPES_DATA_HELP = {\n\n    // each value must be a array of 3 values\n    [MSG_CTRL_OFF]: [\"\", \"\", \"\"],\n\n    [MSG_AD_MIDI_CC]: [\"Controller\", \"Min\", \"Max\"],\n    [MSG_AD_NRPN_COARSE]: [\"Max\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_AD_NRPN_FINE]: [\"Max\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_AD_PITCH_BEND]: [NOT_USED, \"Min\", \"Max\"],\n    [MSG_AD_ATCHAN]: [NOT_USED, \"Min\", \"Max\"],\n    [MSG_DAWFUNC]: [\"function\", NOT_USED, NOT_USED],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [\"controller\", \"value 1\", \"value 2\"],\n    [MSG_SW_MIDI_CC]: [\"controller\", \"down\", \"up\"],\n    [MSG_SW_MIDI_CC_STEP]: [\"controller\", \"start\", \"end\"],\n    [MSG_SW_NOTE]: [\"note\", \"velocity\", NOT_USED],\n    [MSG_SW_NOTE_TGGLE]: [\"note\", \"velocity\", NOT_USED],\n    [MSG_SW_PRG_BANK]: [\"program\", \"bank LSB\", \"bank MSB\"],\n    [MSG_SW_PRG_STEP]: [NOT_USED, \"start\", \"end\"],\n    [MSG_SW_NRPN_COARSE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_NRPN_FINE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_MMC]: [\"device\", \"command\", NOT_USED],\n    [MSG_SW_RELAY]: [\"mode\", \"relay #\", NOT_USED],\n    [MSG_SW_PRESET_SELECT]: [\"preset\", NOT_USED, NOT_USED],\n    [MSG_SW_PRESET_INC_DEC]: [\"inc/dec\", NOT_USED, NOT_USED],\n    [MSG_SW_STEP_SELECT]: [\"target\", \"step\", NOT_USED],\n    [MSG_SW_STEP_INC_DEC]: [\"target\", \"inc/dec\", NOT_USED],\n\n    [MSG_ENC_CC]: [\"\", \"\", \"\"],\n    [MSG_ENC_MIDICC_REL]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPN_COARSE]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPN_FINE]: [\"\", \"\", \"\"],\n    [MSG_ENC_PITCH]: [\"\", \"\", \"\"],\n    [MSG_ENC_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_ENC_PROGRAM]: [\"\", \"\", \"\"],\n    [MSG_ENC_PRESET_SELECT]: [\"\", \"\", \"\"],\n    [MSG_ENC_STEP_SELECT]: [\"\", \"\", \"\"],\n\n    [MSG_LOAD_CC]: [\"controller\", \"value\", NOT_USED]\n};\n\nexport const MSG_TYPES_DATA_USAGE = {\n\n    // each value must be a array of 3 values\n\n    [MSG_AD_MIDI_CC]: [true, true, true],\n    [MSG_AD_NRPN_COARSE]: [true, true, true],\n    [MSG_AD_NRPN_FINE]: [true, true, true],\n    [MSG_AD_PITCH_BEND]: [true, true, true],\n    [MSG_AD_ATCHAN]: [true, true, true],\n    [MSG_DAWFUNC]: [true, false, false],\n    [MSG_CTRL_OFF]: [true, true, true],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [true, true, true],\n    [MSG_SW_MIDI_CC]: [true, true, true],\n    [MSG_SW_MIDI_CC_STEP]: [true, true, true],\n    [MSG_SW_NOTE]: [true, true, false],\n    [MSG_SW_NOTE_TGGLE]: [true, true, false],\n    [MSG_SW_PRG_BANK]: [true, true, true],\n    [MSG_SW_PRG_STEP]: [false, true, true],\n    [MSG_SW_NRPN_COARSE]: [true, true, true],\n    [MSG_SW_NRPN_FINE]: [true, true, true],\n    [MSG_SW_MMC]: [true, true, false],\n    [MSG_SW_RELAY]: [true, true, false],\n    [MSG_SW_PRESET_SELECT]: [true, false, false],\n    [MSG_SW_PRESET_INC_DEC]: [true, false, false],\n    [MSG_SW_STEP_SELECT]: [true, true, false],\n    [MSG_SW_STEP_INC_DEC]: [true, true, false],\n\n    [MSG_ENC_CC]: [true, true, true],\n    [MSG_ENC_MIDICC_REL]: [true, true, true],\n    [MSG_ENC_NRPN_COARSE]: [true, true, true],\n    [MSG_ENC_NRPN_FINE]: [true, true, true],\n    [MSG_ENC_PITCH]: [true, true, true],\n    [MSG_ENC_ATCHAN]: [true, true, true],\n    [MSG_ENC_PROGRAM]: [true, true, true],\n    [MSG_ENC_PRESET_SELECT]: [true, true, true],\n    [MSG_ENC_STEP_SELECT]: [true, true, true],\n\n    [MSG_LOAD_CC]: [true, true, false]\n};\n\n\n\n// MSG_DAWFUNC,\n//     MSG_ENC_CC,\n// MSG_ENC_MIDICC_REL,\n// MSG_ENC_NRPNC,\n// MSG_ENC_NRPNF,\n// MSG_ENC_PITCH,\n// MSG_ENC_ATCHAN,\n// MSG_ENC_PROGRAM,\n// MSG_ENC_PRESETSELECT,\n// MSG_ENC_STEPSELECT,\n//\n// MSG_LOAD_CC,\n\n\nexport const MSG_TYPES_STOMPSWITCH = [\n    MSG_SW_MIDI_CC_TGGLE,\n    MSG_SW_MIDI_CC,\n    MSG_SW_MIDI_CC_STEP,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE,\n    MSG_SW_PRG_BANK,\n    MSG_SW_PRG_STEP,\n    MSG_SW_NRPN_COARSE,\n    MSG_SW_NRPN_FINE,\n    MSG_SW_MMC,\n    MSG_SW_RELAY,\n    MSG_SW_PRESET_SELECT,\n    MSG_SW_PRESET_INC_DEC,\n    MSG_SW_STEP_SELECT,\n    MSG_SW_STEP_INC_DEC,\n    MSG_CTRL_OFF\n];\n\nexport const MSG_TYPES_FOOTWITCH = [\n    MSG_SW_MIDI_CC_TGGLE,\n    MSG_SW_MIDI_CC,\n    MSG_SW_MIDI_CC_STEP,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE,\n    MSG_SW_PRG_BANK,\n    MSG_SW_PRG_STEP,\n    MSG_SW_NRPN_COARSE,\n    MSG_SW_NRPN_FINE,\n    MSG_SW_MMC,\n    MSG_SW_RELAY,\n    MSG_SW_PRESET_SELECT,\n    MSG_SW_PRESET_INC_DEC,\n    MSG_SW_STEP_SELECT,\n    MSG_SW_STEP_INC_DEC,\n    MSG_CTRL_OFF\n];\n\nexport const MSG_TYPES_EXP_PEDAL = [\n    MSG_AD_MIDI_CC,\n    MSG_AD_NRPN_COARSE,\n    MSG_AD_NRPN_FINE,\n    MSG_AD_PITCH_BEND,\n    MSG_AD_ATCHAN,\n    MSG_CTRL_OFF\n];\n\nexport const RELAY_MODE_LABEL = [\n    \"Auto Detect\",\n    \"Normally Open\",\n    \"Normally Closed\",\n    \"Latching\"\n];\n\nexport const RELAY_MODE_LABEL_SHORT = [\n    \"Auto\",\n    \"N. Open\",\n    \"N. Closed\",\n    \"Latching\"\n];\n\n/*\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n*/\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const COLORS = {\n    0x00 : \"Off\",\n    0x01 : \"1A Pink\",\n    0x02 : \"1B Dim Pink\",\n    0x03 : \"2A Red\",\n    0x04 : \"2B Dim Red\",\n    0x05 : \"3A Orange\",\n    0x06 : \"3B Dim Orange\",\n    0x07 : \"4A Amber\",\n    0x08 : \"4B Dim Amber\",\n    0x09 : \"5A Yellow\",\n    0x0A : \"5B Dim Yellow\",\n    0x0B : \"6A Lime\",\n    0x0C : \"6B Dim Lime\",\n    0x0D : \"7A Green\",\n    0x0E : \"7B Dim Green\",\n    0x0F : \"8A Teal\",\n    0x10 : \"8B Dim Teal\",\n    0x11 : \"9A Blue\",\n    0x12 : \"9B Dim Blue\",\n    0x13 : \"10A Lavender\",\n    0x14 : \"10B Dim Lavender\",\n    0x15 : \"11A Purple\",\n    0x16 : \"11B Dim Purple\",\n    0x17 : \"12A White\",\n    0x18 : \"12B Dim White\",\n};\n\n\nexport const COLORS_HTML = {        // https://en.wikipedia.org/wiki/Web_colors\n    0x00 : \"#000000\",\n    0x01 : \"#FFC0CB\",\n    0x02 : \"rgba(255, 192, 203, 0.5)\", // 50% transparent\n    0x03 : \"#FF0000\",\n    0x04 : \"rgba(255, 0, 0, 0.5)\",\n    0x05 : \"#FF8C00\",\n    0x06 : \"rgba(255, 140, 0, 0.5)\",\n    0x07 : \"#FFBF00\",                // https://simple.wikipedia.org/wiki/Amber_(color)\n    0x08 : \"rgba(255, 191, 0, 0.5)\",\n    0x09 : \"#FFFF00\",\n    0x0A : \"rgba(255, 255, 0, 0.5)\",\n    0x0B : \"#00FF00\",\n    0x0C : \"rgba(0, 255, 0, 0.5)\",\n    0x0D : \"#008000\",\n    0x0E : \"rgba(0, 128, 0, 0.5)\",\n    0x0F : \"#008080\",\n    0x10 : \"rgba(0, 128, 128, 0.5)\",\n    0x11 : \"#0000FF\",\n    0x12 : \"rgba(0, 0, 255, 0.5)\",\n    0x13 : \"#E6E6FA\",                // https://en.wikipedia.org/wiki/Lavender_(color)\n    0x14 : \"rgba(230, 230, 250, 0.5)\",\n    0x15 : \"#800080\",\n    0x16 : \"rgba(128, 0, 128, 0.5)\",\n    0x17 : \"#FFFFFF\",\n    0x18 : \"#FFFFFF\"\n};\n\n\nexport const CONTROL_MODE_ELEMENT = 0x60;\n\nexport const CONTROL_MODE_ALL = 0x00;\n// export const CONTROL_MODE_EXT_STEP = 0x01;\n// export const CONTROL_MODE_SEQUENCE = 0x02;\nexport const CONTROL_MODE_EXT_STEP = 0x02;\nexport const CONTROL_MODE_SEQUENCE = 0x01;\n\nexport const CONTROL_MODES = {\n    [CONTROL_MODE_ALL]: \"All steps in one shot\",\n    [CONTROL_MODE_EXT_STEP]: \"External Step Select\",\n    [CONTROL_MODE_SEQUENCE]: \"Sequence\",\n};\n\nexport const CONTROL_MODES_SHORT_NAME = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"ESS\",\n    [CONTROL_MODE_SEQUENCE]: \"Seq\",\n};\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const h = v => {\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n","import {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"../utils/hexstring\";\nimport {\n    COMMAND_GET,\n    COMMAND_SET,\n    CONTROL_ALL,\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_EXPRESSION_PEDAL_2,\n    CONTROL_FOOTSWITCH_4,\n    CONTROL_MIDI,\n    CONTROL_MODE_ELEMENT,\n    CONTROL_NAME,\n    CONTROL_STOMPSWITCH_1,\n    CONTROL_STOMPSWITCH_6,\n    CONTROL_STOMPSWITCH_A,\n    CONTROLS,\n    SYSEX_HEADER,\n    TARGET_PRESET,\n    TARGETS\n} from \"./constants\";\n\nexport const SINGLE_PRESET_EXPECTED_BYTES = 189;    // FIXME: unit is not bytes but messages\nexport const ALL_PRESETS_EXPECTED_BYTES = 4536;     // FIXME: unit is not bytes but messages\n\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// data structure keys:\nexport const CONTROLS_DATA = \"controls\";\nexport const STEPS_DATA = \"steps\";\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n\n    if (!sources.length) return target;\n\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return (128 - (sum % 128)) % 128;\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\n/*\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n*/\n\nfunction getControlStep(data) {\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlMode(data) {\n    return {\n        control_mode: data[2]\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // 0x40\t<data>-MIDICtrl\tStep 1: LED MIDI Ctrl\n    // 0x41\t<data>-Color\tStep 1: LED Active Color\n    // 0x42\t<data>-Color\tStep 1: LED Inactive Color\n    // 0x43\t<data>-LEDNum\tStep 1: LED num\n\n    let cfg = {steps:{}};\n\n    let data_len;\n    let bytes;\n    let step;\n\n    let i = 0;\n    while (i<data.length) {\n        let d = data[i];\n        if (i===0) {\n            step = \"\" + ((d - 0x40) / 4 + 1);\n        }\n        if (!(step in cfg.steps)) cfg.steps[step] = {};\n        switch (d) {\n            case 0x40:\n            case 0x44:\n            case 0x48:\n            case 0x4C:\n            case 0x50:\n            case 0x54:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_midi_ctrl\"] = bytes;\n                break;\n            case 0x41:\n            case 0x45:\n            case 0x49:\n            case 0x4D:\n            case 0x51:\n            case 0x55:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_active_color\"] = bytes;\n                break;\n            case 0x42:\n            case 0x46:\n            case 0x4A:\n            case 0x4E:\n            case 0x52:\n            case 0x56:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_inactive_color\"] = bytes;\n                break;\n            case 0x43:\n            case 0x47:\n            case 0x4B:\n            case 0x4F:\n            case 0x53:\n            case 0x57:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_num\"] = bytes;\n                break;\n            case 0x7F:\n                i = data.length;\n                break;\n            default:\n                // console.log(`getControlLED: ignore byte ${h(d)}`);\n                i++;\n                break;\n        }\n    }\n\n    return cfg;\n}\n\nfunction getMidiSetting(data) {\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n}\n\nfunction getPresetName(data) {\n    const len = data[1];\n    return String.fromCharCode.apply(null, data.slice(2, 2 + len));\n}\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    //TODO: verify checksum\n\n    // console.log(\"parseSysexMessage\", data, JSON.stringify(data));\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    // console.log(\"parseSysexMessage\", idx);\n\n    switch (cmd) {\n        case COMMAND_SET:\n            break;\n        case COMMAND_GET:\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        // console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    message[tgt][idx] = {   //NOTE: idx is transformed in string here (Property names must be strings, https://stackoverflow.com/questions/3633362/is-there-any-way-to-use-a-numeric-type-as-an-object-key)\n        // bytes: data      // FIXME: consolidate data per preset\n    };\n\n    if (data.length === 7) return message;\n\n    if (!(obj in CONTROLS)) {\n        // console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === CONTROL_NAME) {\n        obj_type = \"name\";\n    } else if ((obj >= CONTROL_STOMPSWITCH_1 && obj <= CONTROL_STOMPSWITCH_6) ||\n        (obj >= CONTROL_STOMPSWITCH_A && obj <= CONTROL_FOOTSWITCH_4) ||\n        (obj >= CONTROL_EXPRESSION_PEDAL_1 && obj <= CONTROL_EXPRESSION_PEDAL_2)) {\n        obj_type = \"control\";\n    } else if (obj === CONTROL_MIDI) {\n        obj_type = \"midi\";\n    } else if (obj === CONTROL_ALL) {\n        obj_type = \"all\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // if (data.length === 8) return message;\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    // console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n\n        // NAME\n        message[tgt][idx][\"name\"] = getPresetName(data.slice(ELM));\n\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][CONTROLS_DATA] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        if (data.length > 9) {\n\n            // which element?\n            let e = data[ELM];\n\n            if (e >= 0x01 && e <= 0x24) {\n\n                // STEPS\n                if (data.length > ELM + 22) {\n                    let s = getControlStep(data.slice(ELM, ELM + 23));\n                    message[tgt][idx][CONTROLS_DATA][obj][\"steps\"][s.index] = s.config;\n                } else {\n                    console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n                }\n\n            } else if (e === CONTROL_MODE_ELEMENT) {\n\n                // CONTROL MODE\n                // console.log('parseSysexMessage: CONTROL MODE', idx, obj, ELM, data.slice(ELM, data.length - 1), data);\n\n                let mode_cfg = getControlMode(data.slice(ELM, data.length - 1));\n                message[tgt][idx][CONTROLS_DATA][obj] = mergeDeep(message[tgt][idx][CONTROLS_DATA][obj], mode_cfg);\n\n            } else if (e >= 0x40 && e <= 0x57) {\n\n                // LED\n                // console.log('parseSysexMessage: LED');\n\n                let led_cfg = getControlLED(data.slice(ELM, data.length - 1));\n                message[tgt][idx][CONTROLS_DATA][obj] = mergeDeep(message[tgt][idx][CONTROLS_DATA][obj], led_cfg);\n\n            } else if (e === 0x7F) {\n\n                // ALL\n                // console.log('parseSysexMessage: ALL');\n\n            } else {\n                console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n                return null;\n            }\n        } else {\n\n            message[tgt][idx][CONTROLS_DATA] = {\n                [obj]: {}\n            };\n\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n\n        message[tgt][idx][\"midi\"] = {};\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x60) {\n\n            // SETTINGS\n            if (data.length > ELM+19) {\n                let s = getMidiSetting(data.slice(ELM, ELM + 20));\n                message[tgt][idx][\"midi\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n\n    if (obj_type === \"all\") {\n\n        message[tgt][idx][\"all\"] = {};\n\n        // // which element?\n        // let e = data[ELM];\n        //\n        // if (e >= 0x01 && e <= 0x60) {\n        //\n        //     // SETTINGS\n        //     if (data.length > ELM+19) {\n        //         let s = getMidiSetting(data.slice(ELM, ELM + 20));\n        //         message[tgt][idx][\"midi\"][s.index] = s.config;\n        //     } else {\n        //         console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n        //     }\n        //\n        // } else {\n        //     console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n        //     return null;\n        // }\n\n    }\n\n    // console.log(JSON.stringify(message));\n\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    if (data === null) return null;\n\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        if (config) {\n            mergeDeep(presets, config);\n        }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n\n\n/**\n * Split a dump into individual sysex messages\n * @param data\n * @param stripManufacturer\n * returns a array of sysex messages. The messages do not contains the sysex \"start of sysex\" 0xF0 and \"end of sysex\" 0xF7 bytes.\n */\nfunction splitDump(data, stripManufacturer) {\n\n    if (data === null) return [];\n\n    let messages = [];\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: dump does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        messages.push(data.slice(i+3, k));  // data.slice(i, k) are the data between MANUFACTURER and SYSEX_END\n\n    } // while\n\n    return messages;\n}\n\n\n/**\n * Split a sysex dump into individual presets\n *\n * input: binay data\n * output: collection (key-value obj) of binary data\n */\n/*\nfunction splitDump(data) {\n\n    if (data === null) return {};\n\n    let presets = [];   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return {};\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return {};\n        }\n\n        let d = data.slice(i, k);\n\n        // let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        // if (config) {\n        //     mergeDeep(presets, config);\n        // }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n*/\n\n\n/**\n *\n */\nexport function requestAllPresets() {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(presetIndex) {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPresetObj(presetIndex, controlId) {\n\n    // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n    // return requestPreset(presetIndex);\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,      // preset #\n        controlId         // (control)\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * Return an array of sysex messages to update a control's steps.\n * @param presetIndex\n * @param controlId\n * @param steps\n * @returns {*}\n */\nfunction buildControlStepSysex(presetIndex, controlId, steps, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!forceUpdate && !step.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n/*\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n*/\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // msgs.map(m => console.log(\"buildControlStepSysex\", hs(m)));\n\n    return msgs;\n}\n\nfunction buildControlStepLedSysex(presetIndex, controlId, steps, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!forceUpdate && !step.led_changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        // msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        // msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        // msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        // msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        // msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        // msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        // msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    return msgs;\n}\n\n/**\n *\n * @param presetIndex\n * @param controlId\n * @param mode\n * @returns {number[]}\n */\nfunction buildControlModeSysex(presetIndex, controlId, mode, forceUpdate = false) {\n\n    if (!forceUpdate && !mode.control_mode_changed) return [];   // order important because \"control_mode_change\" could be undefined\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        controlId,\n        CONTROL_MODE_ELEMENT,\n        0x01,   // 1 byte of data\n        mode[\"control_mode\"]\n    ];\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return the result:\n    return [SYSEX_HEADER.concat(msg)];  // we need to return an array of messages, even if it'sonly one message\n}\n\n/**\n * Wihtout Control Mode config\n * Without LED config\n *\n * @param presetIndex\n * @param controlId\n * @param data\n * @param forceUpdate\n * @returns {*}\n */\nfunction getControlUpdateSysexMessages(presetIndex, controlId, data, forceUpdate = false) {\n    return [\n        ...buildControlModeSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId], forceUpdate)  ,\n        ...buildControlStepSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"], forceUpdate),\n        ...buildControlStepLedSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"], forceUpdate)\n    ];\n}\n\nfunction buildMidiSettingsSysex(presetIndex, settings, forceUpdate = false) {\n\n    let msgs = [];\n\n    for (let i of Object.keys(settings)) {\n\n        let setting = settings[i];\n\n        if (!setting.changed && !forceUpdate) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            CONTROL_MIDI];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, setting.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, setting.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, setting.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, setting.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, setting.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, setting.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    return msgs;\n}\n\n\nfunction buildPresetNameSysex(presetIndex, data) {\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_NAME,\n        0x00            // when setting the name this byte can be anything\n    ];\n\n    const s = data[TARGET_PRESET][presetIndex][\"name\"];\n\n    // add data:\n    msg.push(s.length);\n\n    for (let i=0; i < s.length; i++) {\n        msg.push(s.charCodeAt(i));\n    }\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return result:\n    return [SYSEX_HEADER.concat(msg)];  // we need to return an array of messages, even if it'sonly one message\n}\n\n\nfunction getMidiSettingUpdateSysexMessages(presetIndex, data) {\n    return buildMidiSettingsSysex(presetIndex, data[TARGET_PRESET][presetIndex][\"midi\"]);\n}\n\n\nexport {\n    isSysexData,\n    parseSysexDump,\n    getControlUpdateSysexMessages,\n    getMidiSettingUpdateSysexMessages,\n    buildPresetNameSysex,\n    splitDump\n};\n\n","import {computed, decorate, observable} from \"mobx\";\nimport {outputById} from \"../utils/ports\";\nimport {MSG_CTRL_OFF, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer/constants\";\nimport {\n    buildPresetNameSysex,\n    CONTROLS_DATA, getControlUpdateSysexMessages, getMidiSettingUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump,\n    requestPreset,\n    SINGLE_PRESET_EXPECTED_BYTES\n} from \"../pacer/sysex\";\nimport {MAX_FILE_SIZE} from \"../utils/misc\";\nimport {hs} from \"../utils/hexstring\";\n\nclass StateStore {\n\n    constructor() {\n        this.data = null;\n        // this.presetIndex = null;\n        this.currentPreset = \"\";    // must be a string because it is used as a property name (object key) (https://stackoverflow.com/questions/3633362/is-there-any-way-to-use-a-numeric-type-as-an-object-key)\n        this.currentControl = \"\";   // must be a string because it is used as a property name (object key) (https://stackoverflow.com/questions/3633362/is-there-any-way-to-use-a-numeric-type-as-an-object-key)\n        this.updateMessages = {};\n        this.midi = {\n            inputs: [],         // array of MIDI inputs (filtered from WebMidi object)\n            outputs: [],        // array of MIDI outputs (filtered from WebMidi object)\n            input: 0,        // MIDI output port enabled\n            output: 0        // MIDI output port enabled,\n        };\n        // this.pacerPresent = false;\n        this.busy = false;\n        this.busyMessage = \"please wait\";\n        this.bytesExpected = -1;\n        this.progress = -1;    // 0..100\n        //TODO:\n        this.decBase = true;  // true --> decimal base, false --> hex base for number\n        this.extControls = true;\n        this.forceReread = false;\n        this.changed = false;\n    }\n\n    // pacerConnected() {\n    //     return this.midi.output > 0 && this.midi.input > 0;\n    // }\n\n    get connected() {\n        // console.log(\"get connected\", this.midi.input, this.midi.output);\n        return this.midi.output !== 0 && this.midi.input !== 0;\n    }\n\n    clear() {\n        console.log(\"state: clear data\");\n        this.data = null;\n        this.updateMessages = {};\n    }\n\n    toggleForceReread = () => {\n        this.forceReread = !this.forceReread;\n    }\n\n    onBusy({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) {\n        // console.log(\"app.onBusy\", busy, busyMessage, bytesExpected, bytesReceived);\n\n        let show = busy !== this.busy;\n        show = show || (busyMessage !== null && busyMessage !== this.busyMessage);\n        show = show || (bytesExpected > 0 && bytesExpected !== this.bytesExpected);\n\n        let progress = -1;\n        if (this.bytesExpected > 0 && bytesReceived > 0) {\n            progress = Math.round(bytesReceived / this.bytesExpected * 100 / 5) * 5;\n            show = show || ((progress >= 0) && (progress !== this.progress));\n        }\n\n        if (show) {\n            if (this.busy !== busy) this.busy = busy;\n            if (busyMessage !== null) this.busyMessage = busyMessage;\n            if (bytesExpected > 0 && bytesExpected !== this.bytesExpected) this.bytesExpected = bytesExpected;\n            if (busy === false) {\n                this.bytesExpected = -1;\n                this.progress = -1;\n            } else {\n                if (bytesExpected > 0) this.bytesExpected = bytesExpected;\n                if (this.progress !== progress) {\n                    this.progress = progress;\n                }\n            }\n        }\n    };\n\n/*\n    changeBusyMessage(msg) {\n        this.busyMessage = msg;\n    }\n*/\n\n    showBusy({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) {\n        setTimeout(() => this.onBusy({busy: false}), 20000);\n        this.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    }\n\n    hideBusy(delay = 0) {\n        if (delay < 1) {\n            this.onBusy({busy: false});\n        } else {\n            setTimeout(() => this.onBusy({busy: false}), delay);\n        }\n    }\n\n    selectPreset(presetIndex) { // String\n        // console.log(\"selectPreset\", presetIndex, typeof presetIndex);\n        this.currentPreset = presetIndex;\n    }\n\n    selectControl(controlIndex) {\n        // console.log(\"selectControl\", controlIndex, typeof controlIndex);\n        this.currentControl = controlIndex;\n    }\n\n    /**\n     * Update the control mode of the currentControl of the currentPreset\n     * @param value\n     */\n    setControlMode(value) {\n        this.data[TARGET_PRESET][this.currentPreset][CONTROLS_DATA][this.currentControl][\"control_mode\"] = value;\n        this.data[TARGET_PRESET][this.currentPreset][CONTROLS_DATA][this.currentControl][\"control_mode_changed\"] = true;\n        this.addControlUpdateMessage(this.currentControl, getControlUpdateSysexMessages(this.currentPreset, this.currentControl, this.data));\n        this.changed = true;\n    }\n\n    addControlUpdateMessage(controlId, msg) {\n        if (!this.updateMessages.hasOwnProperty(this.currentPreset)) {\n            this.updateMessages[this.currentPreset] = {};\n        }\n        if (!this.updateMessages[this.currentPreset].hasOwnProperty(CONTROLS_DATA)) {\n            this.updateMessages[this.currentPreset][CONTROLS_DATA] = {};\n        }\n        this.updateMessages[this.currentPreset][CONTROLS_DATA][controlId] = msg;\n    }\n\n    updatePresetName(presetIndex, name) {\n\n        if (name === undefined || name === null) return;\n\n        if (name.length > 5) {\n            console.warn(`Presets.updateName: name too long: ${name}`);\n            return;    // Calling .setState with null no longer triggers an update in React 16.\n        }\n\n        this.data[TARGET_PRESET][presetIndex][\"name\"] = name;\n        this.data[TARGET_PRESET][presetIndex][\"changed\"] = true;     //TODO: used?\n\n\n        if (!this.updateMessages.hasOwnProperty(presetIndex)) this.updateMessages[presetIndex] = {};\n        if (!this.updateMessages[presetIndex].hasOwnProperty(\"name\")) this.updateMessages[presetIndex][\"name\"] = {};\n\n        this.updateMessages[presetIndex][\"name\"][\"dummy\"] = buildPresetNameSysex(presetIndex, this.data);\n\n        this.changed = true;\n    }\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStepMessageType(controlId, stepIndex, value, preset = this.currentPreset) {\n\n        // console.log(`updateControlStep(${controlId}, ${stepIndex}, ${dataType}, ${dataIndex}, ${value})`);\n\n        let v = parseInt(value, 10);\n\n        this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"msg_type\"] = v;\n\n        if (v === MSG_CTRL_OFF) {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n        } else {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n        }\n\n        this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n\n        this.addControlUpdateMessage(controlId, getControlUpdateSysexMessages(preset, controlId, this.data));\n\n        this.changed = true;\n    }\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStep(controlId, stepIndex, dataType, dataIndex, value, preset = this.currentPreset) {\n\n        console.log(`updateControlStep(${controlId}, ${stepIndex}, ${dataType}, ${dataIndex}, ${value})`);\n\n        let v = parseInt(value, 10);\n\n        // const data = this.props.state.data;\n        // const presetIndex = this.props.state.currentPreset;\n        // const updateMessages = this.props.state.updateMessages;\n\n        if (dataType === \"data\") {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"data\"][dataIndex] = v;\n        } else {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][dataType] = v;\n        }\n\n        // if (dataType === \"msg_type\") {\n        //     if (v === MSG_CTRL_OFF) {\n        //         this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n        //     } else {\n        //         this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n        //     }\n        // }\n\n        if (dataType.startsWith(\"led_\")) {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"led_changed\"] = true;\n        } else {\n            this.data[TARGET_PRESET][preset][CONTROLS_DATA][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n        }\n\n        this.addControlUpdateMessage(controlId, getControlUpdateSysexMessages(preset, controlId, this.data));\n\n        this.changed = true;\n    }\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateMidiSettings(settingIndex, dataType, dataIndex, value) {\n\n        let v = parseInt(value, 10);\n\n        const P = this.currentPreset;\n\n        // console.log(\"updateMidiSettings\", settingIndex, dataType, dataIndex, value, v, P);\n\n        // this.setState(\n        //     produce(draft => {\n                if (dataType === \"data\") {\n                    this.data[TARGET_PRESET][P][\"midi\"][settingIndex][\"data\"][dataIndex] = v;\n                } else {\n                    this.data[TARGET_PRESET][P][\"midi\"][settingIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        this.data[TARGET_PRESET][P][\"midi\"][settingIndex][\"active\"] = 0;\n                    } else {\n                        this.data[TARGET_PRESET][P][\"midi\"][settingIndex][\"active\"] = 1;\n                    }\n                }\n                this.data[TARGET_PRESET][P][\"midi\"][settingIndex][\"changed\"] = true;\n\n                this.changed = true;\n\n                if (!this.updateMessages.hasOwnProperty(P)) this.updateMessages[P] = {};\n                if (!this.updateMessages[P].hasOwnProperty(\"midi\")) this.updateMessages[P][\"midi\"] = {};\n\n                //FIXME: update the methods that read updateMessages to allow object or array\n                this.updateMessages[P][\"midi\"][\"dummy\"] = getMidiSettingUpdateSysexMessages(P, this.data);\n\n            // })\n        // );\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    sendSysex = msg => {\n        // console.log(\"sendSysex\", msg);\n        if (!this.midi.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.midi.output);\n        if (!out) {\n            console.warn(`send: output ${this.midi.output} not found`);\n            return;\n        }\n        //FIXME: busy indicator\n        // this.showBusy();\n        // this.data = null;\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n        // this.setState(\n        //     {data: null},\n        //     () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        // );\n    };\n\n    readPacer = (msg, bytesExpected, busyMessage = \"Reading Pacer...\") => {\n        this.showBusy({busy: true, busyMessage: busyMessage, bytesReceived: 0, bytesExpected});\n        this.sendSysex(msg);\n    };\n\n    readPreset(index) {\n        // if (midiConnected(this.state.output) && isVal(index)) {\n        if (this.midi.output && this.midi.input) {\n            this.readPacer(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n        }\n    }\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                    this.hideBusy();\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        /*\n                                                this.setState(\n                                                    produce(draft => {\n                                                        draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                                    })\n                                                );\n                        */\n                        this.data = mergeDeep(this.data || {}, parseSysexDump(data))\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.hideBusy();\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n\n    updatePacer() {\n        //FIXME: externalize this method\n\n        this.showBusy({busy: true, busyMessage: \"write Preset...\"});\n\n        Object.getOwnPropertyNames(this.updateMessages).forEach(\n            presetId => {\n                Object.getOwnPropertyNames(this.updateMessages[presetId]).forEach(\n                    ctrlType => {\n                        Object.getOwnPropertyNames(this.updateMessages[presetId][ctrlType]).forEach(\n                            ctrl => {\n                                this.updateMessages[presetId][ctrlType][ctrl].forEach(\n                                    msg => {\n                                        this.sendSysex(msg);\n                                    }\n                                );\n                            }\n                        );\n                    }\n                );\n            }\n        );\n\n        //FIXME: update this code\n        setTimeout(\n            () => {\n                this.changed = false;\n                this.updateMessages = {};\n                this.readPreset(this.currentPreset);\n            },\n            1000\n        );\n    }\n\n} // class StateStore\n\ndecorate(StateStore, {\n    data: observable,\n    currentPreset: observable,\n    currentControl: observable,\n    // presetIndex: observable,\n    updateMessages: observable,\n    midi: observable,\n    // pacerPresent: observable,\n    connected: computed,\n    busy: observable,\n    busyMessage: observable,\n    progress: observable,\n    decBase: observable,\n    extControls: observable,\n    forceReread: observable,\n    changed: observable\n});\n\n// export default new StateStore();\nexport const state = new StateStore();\n","import React, {Component} from 'react';\nimport \"./Home.css\";\n\nclass Home extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content home\">\n\n                <h1>Requirements</h1>\n\n                <div className=\"doc\">\n                    <p>This editor requires a browser that support\n                        the <a href=\"http://webaudio.github.io/web-midi-api/\" target=\"_blank\" rel=\"noopener noreferrer\">Web MIDI API</a>.</p>\n                    <p>Currently, only <span className=\"strong\">Chrome</span> and <span className=\"strong\">Opera</span> support this standard.\n                        This application will therefore <span className=\"italic\">not</span> work in Firefox, Safari, IE or Edge.</p>\n                    <p>This editor does not work on iPad or Android tablet either.</p>\n                    <p>Ensure your Pacer is running the <a href=\"https://nektartech.com/updating-firmware-pacer/\" target=\"_blank\" rel=\"noopener noreferrer\">latest firmware v10112</a>.</p>\n                </div>\n\n                <h1>Limitations</h1>\n\n                <div className=\"doc\">\n                    <p>The current version of this editor isn't able to edit the Global configuration of the Pacer. This is planned for a future release.</p>\n                    <p>This editor is provided as-is, without warranty of any kind, express or implied. If you encounter a bug, please fill a bug report with <a href=\"https://github.com/francoisgeorgy/pacer-editor/issues/new\" target=\"_blank\" rel=\"noopener noreferrer\">this form</a>.</p>\n                </div>\n\n                <h1>Connecting your Pacer</h1>\n                <div className=\"doc\">\n                    <p>1. Make sure your Pacer is connected to your computer and switched-on.</p>\n                    <p>2. In the application, check the MIDI settings.</p>\n                    <p>You need to enable the following input and output ports:</p>\n                    <p><span className=\"bold\" >Mac</span>:</p>\n                    <img src=\"ports-mac.png\" alt=\"\" />\n                    <p><span className=\"bold\" >Windows</span>:</p>\n                    <img src=\"ports-windows.png\" alt=\"\" />\n                    <p>This editor listen on all MIDI ports. A future version may offer the possibility to choose a specific port.</p>\n                </div>\n\n                <h1>Editing presets</h1>\n                <div className=\"doc\">\n                    <p>The preset <span className=\"strong\">CUR</span> is the <span className=\"italic fluo\">current</span> preset.\n                        When you edit preset <span className=\"strong\">CUR</span> your changes are immediately applied.</p>\n                    <p>When you edit any other presets, you edit the <span className=\"fluo\">saved</span> settings of the preset\n                        and your changes will only be applied when you <span className=\"fluo\">load</span> this preset in the Pacer.</p>\n\n                    <p>It is currently not possible to load the preset from this editor.</p>\n\n                    <div>\n                        <h3>Example 1:</h3>\n                        <p>The currently loaded preset (CUR) is preset <span className=\"strong\">A5</span>.</p>\n                        <p>You edit the preset <span className=\"strong\">A5</span>.</p>\n                        <p>After you save your modifications, the display will show dots. That means the current preset does not reflect the saved preset anymore.\n                            You have to <span className=\"fluo\">reload</span> the preset to be able to use your updated version:</p>\n                        <p>- long-press <span className=\"strong\">Preset</span> switch, then press switch <span className=\"strong\">A</span>, then press switch <span className=\"strong\">5</span>.</p>\n                    </div>\n\n                    <div>\n                        <h3>Example 1:</h3>\n                        <p>The currently loaded preset (CUR) is preset <span className=\"strong\">A1</span>.</p>\n                        <p>You edit the preset <span className=\"strong\">D3</span>.</p>\n                        <p>After you save your modifications of preset <span className=\"strong\">D3</span>, if you want to use it, of course you have to load it:</p>\n                        <p>- long-press <span className=\"strong\">Preset</span> switch, then press switch <span className=\"strong\">D</span>, then press switch <span className=\"strong\">3</span>.</p>\n                    </div>\n\n                </div>\n\n                <h1>Controls settings</h1>\n                <div className=\"doc\">\n                    <p>Each control (buttons 1-6 & A-D, external FS1-FS4 & EXP1-EXP2) can be configured with up to 6 steps.</p>\n                    <p>At the most basic level, each step has a <span className=\"italic fluo\">type</span> value that determines the message or action the step will send or execute, as well as 3 data fields\n                        that configure the options and parameters for the step depending on the selected type.</p>\n\n                    <table className=\"doc-controls\">\n                        <thead>\n                        <tr>\n                            <th><br />Type</th>\n                            <th><br />Description</th>\n                            <th>Data 1<br />desc.</th>\n                            <th>Data 1<br />values</th>\n                            <th>Data 2<br />desc.</th>\n                            <th>Data 2<br />values</th>\n                            <th>Data 3<br />desc.</th>\n                            <th>Data 3<br />values</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td className=\"ctrl-type\">CC Toggle</td>\n                            <td className=\"ctrl-desc\">Sends a MIDI CC message that toggles between two values each time the button is pressed</td>\n                            <td>MIDI CC</td>\n                            <td>0-127</td>\n                            <td className=\"allow-break\">Value to send on Press 1</td>\n                            <td>0-127</td>\n                            <td className=\"allow-break\">Value to send on Press 2</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">CC Trigger</td>\n                            <td className=\"ctrl-desc\">Sends a MIDI CC message when the button is pressed</td>\n                            <td>MIDI CC</td>\n                            <td>0-127</td>\n                            <td className=\"allow-break\">Value to send when pressing down</td>\n                            <td>0-127</td>\n                            <td className=\"allow-break\">Value to send when releasing</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">CC Step</td>\n                            <td className=\"ctrl-desc\"> ??? </td>\n                            <td>MIDI CC</td>\n                            <td>0-127</td>\n                            <td>Start value</td>\n                            <td>0-127</td>\n                            <td>End value</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Note</td>\n                            <td className=\"ctrl-desc\">Send a note when the button is pressed, stop when released</td>\n                            <td>Note</td>\n                            <td>0-127</td>\n                            <td>Velocity</td>\n                            <td>0-127</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Note Toggle</td>\n                            <td className=\"ctrl-desc\">Send a note when the button is pressed, stop when pressed again</td>\n                            <td>Note</td>\n                            <td>0-127</td>\n                            <td>Velocity</td>\n                            <td>0-127</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Program & Bank</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Program Change message when the button is pressed</td>\n                            <td>Program</td>\n                            <td>0-127</td>\n                            <td>Bank LSB</td>\n                            <td>0-127</td>\n                            <td>Bank MSB</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Program Step</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Program Step message ??? </td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td>Start</td>\n                            <td>0-127</td>\n                            <td>End</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">NRPN Coarse</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Non-Registered Parameter Number Coarse message</td>\n                            <td>Value</td>\n                            <td>0-127</td>\n                            <td>LSB</td>\n                            <td>0-127</td>\n                            <td>MSB</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">NRPN Fine</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Non-Registered Parameter Number Fine message</td>\n                            <td>Value</td>\n                            <td>0-127</td>\n                            <td>LSB</td>\n                            <td>0-127</td>\n                            <td>MSB</td>\n                            <td>0-127</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">MIDI Machine Control</td>\n                            <td className=\"ctrl-desc\">Send a MIDI Machine Control message</td>\n                            <td>Device ID</td>\n                            <td>0-127</td>\n                            <td>Command</td>\n                            <td>0-127</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Relay Outputs</td>\n                            <td className=\"ctrl-desc\">Action a Pacer Relay</td>\n                            <td>Mode</td>\n                            <td>N.O.: 1<br />N.C.: 2<br />Lat.: 3</td>\n                            <td>Relay</td>\n                            <td>R1: 0<br />R2: 1<br />R3: 2<br />R4: 3</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Preset Select</td>\n                            <td className=\"ctrl-desc\">Switch to the target Preset</td>\n                            <td>Target</td>\n                            <td><span className=\"no-break\">(Bank * 6) + Num</span><br />Bank A=0,<br />Bank B=1..</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Preset Inc/Dec</td>\n                            <td className=\"ctrl-desc\">Switch to the next/previous Preset</td>\n                            <td>Direction</td>\n                            <td>Increment: ??<br />Decrement: ??</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Step Select</td>\n                            <td className=\"ctrl-desc\">?? Action a specific Step for a Control</td>\n                            <td>Control Target</td>\n                            <td>?? A-D,<br />1-6,<br />FS1-4,<br />EXP1-2</td>\n                            <td>Step</td>\n                            <td>?? 1-6 (0-indexed?)</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">Step Inc/Dec</td>\n                            <td className=\"ctrl-desc\">?? Action the next/prev Step for a Control</td>\n                            <td>Control Target</td>\n                            <td>?? A-D,<br />1-6,<br />FS1-4,<br />EXP1-2</td>\n                            <td>Direction</td>\n                            <td>Increment: ??<br />Decrement: ??</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        <tr>\n                            <td className=\"ctrl-type\">OFF</td>\n                            <td className=\"ctrl-desc\">Disable the control, do not action nor send anything</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                            <td className=\"italic\">not used</td>\n                            <td>--</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n                <h1>In case of problem</h1>\n                <div className=\"doc\">\n                    <p>Try the following:</p>\n                    <p>- Check the MIDI configuration.</p>\n                    <p>- Reload the editor (F5 or Cmd-R or Ctrl-R)</p>\n                    <p>- Restart the Pacer.</p>\n                    <p>- Close any other applications that may be connected to the Pacer.</p>\n                    <p>If you mess up the configuration of your Pacer, do a <span className=\"fluo\">Factory Restore</span>. See page 21 of the Pacer User Guide for the procedure.</p>\n                </div>\n\n                <h1>MIDI in your browser</h1>\n\n                <div className=\"doc\">\n                    <div>\n                        <p>You need to allow your browser to use your MIDI device:</p>\n                        <img src=\"help-01.png\" alt=\"\" />\n                    </div>\n                    <div>\n                        <p>In case you didn't allow the use of MIDI device and want to change that, you can right-click on the URL icon and change the setting:</p>\n                        <img src=\"help-02.png\" alt=\"\" />\n                    </div>\n                </div>\n\n                <h1>FAQ</h1>\n\n                <div className=\"doc\">\n                    <p><i>To be completed...</i></p>\n                </div>\n\n                <h1>Known issues</h1>\n\n                <div className=\"doc\">\n                    <p>- The preset D6 can not be read by sending a \"read preset\" sysex. You have to dump it from the Pacer.</p>\n                    <p>- LED configuration is displayed for external footswitch and expression pedals.</p>\n                </div>\n\n                <h1>Contribute</h1>\n\n                <div className=\"doc\">\n                    <p>This editor is an Open Source project. You are welcome to contribute.</p>\n                    <p>The source-code is hosted\n                    by GitHub: <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">pacer-editor</a></p>\n                    <p>To contribute your bug fixes, new features, etc.: 1) fork the project, 2) create a pull-request.</p>\n                </div>\n\n                <h1>Thanks</h1>\n\n                <div className=\"doc\">\n                    <p>Thank you to the Nektar support service for having provided precious informations regarding the SysEx data format of the Pacer.\n                        This editor would not have been possible without their support.</p>\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","import {\n    MSG_AD_ATCHAN,\n    MSG_AD_MIDI_CC,\n    MSG_AD_NRPN_COARSE,\n    MSG_AD_NRPN_FINE,\n    MSG_AD_PITCH_BEND,\n    MSG_CTRL_OFF,\n    MSG_DAWFUNC,\n    MSG_ENC_ATCHAN,\n    MSG_ENC_CC,\n    MSG_ENC_MIDICC_REL,\n    MSG_ENC_NRPN_COARSE,\n    MSG_ENC_NRPN_FINE,\n    MSG_ENC_PITCH, MSG_ENC_PRESET_SELECT,\n    MSG_ENC_PROGRAM, MSG_ENC_STEP_SELECT, MSG_LOAD_CC,\n    MSG_SW_MIDI_CC,\n    MSG_SW_MIDI_CC_STEP,\n    MSG_SW_MIDI_CC_TGGLE,\n    MSG_SW_MMC,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE,\n    MSG_SW_NRPN_COARSE,\n    MSG_SW_NRPN_FINE,\n    MSG_SW_PRESET_INC_DEC,\n    MSG_SW_PRESET_SELECT,\n    MSG_SW_PRG_BANK,\n    MSG_SW_PRG_STEP,\n    MSG_SW_RELAY,\n    MSG_SW_STEP_INC_DEC,\n    MSG_SW_STEP_SELECT, PRESET_TARGET, RELAY_MODE_LABEL, TARGET_NAME\n} from \"./constants\";\n// SYSEX:\n// 0x01\tCurrent user\n// 0x02\tTrack\n// 0x03\tTransport\n// 0x04\t1A\n// 0x05\t2A\n// 0x06\t3A\n// 0x07\t4A\n// 0x08\t5A\n// 0x09\t6A\n// 0x0A\t1B\n// 0x0B\t2B\n// 0x0C\t3B\n// 0x0D\t4B\n// 0x0E\t5B\n// 0x0F\t6B\n// 0x10\t1C\n// 0x11\t2C\n// 0x12\t3C\n// 0x13\t4C\n// 0x14\t5C\n// 0x15\t6C\n// 0x16\t1D\n// 0x17\t2D\n// 0x18\t3D\n// 0x19\t4D\n// 0x1A\t5D\n// 0x1B\t6D\n\n\n/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    let ii = parseInt(index);\n    if (ii === 0) return \"current\";\n    //TODO: check valid range\n    let b = Math.floor((ii - 1) / 6);\n    let i = (ii - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n\n/**\n * Exampe: \"D5\" => \"23\"\n * @param xy\n * @returns {String}\n */\nexport const presetXYToIndex = xy => {\n    // if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return (bank * 6 + num).toString();\n};\n\nconst UP_ARROW = '\\u21E7';\nconst DOWN_ARROW = '\\u21E9';\n\nexport const MessageSummary = message => {\n\n    if (message === null || message === undefined) return '';\n\n    const data = message[\"data\"];\n    switch (message[\"msg_type\"]) {\n\n        case MSG_AD_MIDI_CC: return `CC${data[0]} min ${data[1]} max ${data[2]}`;\n        case MSG_AD_NRPN_COARSE: return `NRPN C max ${data[0]} ${data[1]}: ${data[2]}`;\n        case MSG_AD_NRPN_FINE: return `NRPN F max ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_AD_PITCH_BEND: return `PITCH min ${data[1]} max ${data[2]}`;\n        case MSG_AD_ATCHAN: return `AT CHAN min ${data[1]} max ${data[2]}`;\n        case MSG_DAWFUNC: return `DAW FUNC ${data[0]}`;\n        case MSG_CTRL_OFF: return `OFF`;\n\n        case MSG_SW_MIDI_CC_TGGLE: return `CC${data[0]} toggle ${data[1]} \\u21C4 ${data[2]}`;\n        case MSG_SW_MIDI_CC: return `CC${data[0]} ${DOWN_ARROW}${data[1]} ${UP_ARROW}${data[2]}`;\n        case MSG_SW_MIDI_CC_STEP: return `CC${data[0]} step ${data[1]} to ${data[2]}`;\n\n        case MSG_SW_NOTE: return `NOTE ${data[0]} vel ${data[1]}`;\n        case MSG_SW_NOTE_TGGLE: return `NOTE TOGGLE ${data[0]} vel ${data[1]}`;\n\n        case MSG_SW_PRG_BANK: return `PRG BANK ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_SW_PRG_STEP: return `PRG STEP ${data[1]} to ${data[2]}`;\n\n        case MSG_SW_NRPN_COARSE: return `NRPN C ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_SW_NRPN_FINE: return `NRPN F ${data[0]} ${data[1]}:${data[2]}`;\n\n        case MSG_SW_MMC: return `MMC ID ${data[0]} cmd ${data[1]}`;\n\n        case MSG_SW_RELAY: return `RELAY ${data[1]} ${RELAY_MODE_LABEL[data[0]]}`;\n\n        case MSG_SW_PRESET_SELECT: return `PRESET SELECT ${PRESET_TARGET[data[0]]}`;\n        case MSG_SW_PRESET_INC_DEC: return `PRESET ${data[0]?'DEC':'INC'}`;\n\n        case MSG_SW_STEP_SELECT: return `${TARGET_NAME[data[0]]} step ${data[1]}`;\n        case MSG_SW_STEP_INC_DEC: return `STEP ${data[1]?'DEC':'INC'} '${TARGET_NAME[data[0]]}'`;\n\n        case MSG_ENC_CC: return `MSG_ENC_CC ${data[0]} ${data[1]} ${data[2]}`;\n        case MSG_ENC_MIDICC_REL: return `CC REL ${data[0]}`;\n        case MSG_ENC_NRPN_COARSE: return `NRPN C max ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_ENC_NRPN_FINE: return `NRPN F max ${data[0]} ${data[1]}:${data[2]}`;\n        case MSG_ENC_PITCH: return `PITCH min ${data[1]} max ${data[2]}`;\n        case MSG_ENC_ATCHAN: return `AT CHAN min ${data[1]} max ${data[2]}`;\n        case MSG_ENC_PROGRAM: return `PRG ${data[1]} to ${data[2]}`;\n        case MSG_ENC_PRESET_SELECT: return `PRESET SEL ${data[1]} to ${data[2]}`;\n        case MSG_ENC_STEP_SELECT: return `STEP SELECT '${TARGET_NAME[data[0]]}', ${data[1]} to ${data[2]}`;\n\n        case MSG_LOAD_CC: return `CC${data[0]} ${data[1]}`;\n\n        default: return `?${message[\"msg_type\"]}? ${data[0]} ${data[1]} ${data[2]}`;\n    }\n};","import React, {Component} from \"react\";\nimport {inject, observer} from \"mobx-react\";\nimport {\n    MSG_SW_NOTE,\n    MSG_TYPES, COLORS, CONTROLS_FULLNAME, CONTROL_MODES, TARGET_PRESET\n} from \"../pacer/constants\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport \"./DumpSysex.css\";\n\n/*\nconst PresetName = ({ name }) => {\n    return (\n        <div className=\"dump-preset-name\">Preset name: {name}</div>\n    );\n};\n*/\n\nconst MidiTable = ({ settings }) => {\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                <tr>\n                    <td colSpan={6} className=\"name\">MIDI settings</td>\n                </tr>\n                {Object.keys(settings).map(i => {\n                    let t = MSG_TYPES[settings[i][\"msg_type\"]];\n                    if (settings[i][\"msg_type\"] === MSG_SW_NOTE) {\n                        t = t + ' ' + Note.fromMidi(settings[i][\"data\"][0], true) + ' vel. ' + settings[i][\"data\"][1];\n                    }\n                    return (\n                        <tr key={i}>\n                            <td>settings {i}</td>\n                            <td>ch. {h(settings[i][\"channel\"])}</td>\n                            <td>msg {h(settings[i][\"msg_type\"])}</td>\n                            <td>{t}</td>\n                            <td>{hs(settings[i][\"data\"])}</td>\n                            {/*<td>{settings[i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(settings[i][\"data\"][0], true) : \"  \"}</td>*/}\n                            <td>{settings[i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                        </tr>\n                    )}\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings }) => {\n    if (settings === null) return null;\n    return (\n        <div>\n            <MidiTable settings={settings} />\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={10} className=\"name\">{CONTROLS_FULLNAME[obj]}</td>\n                    </tr>\n                    <tr>\n                        <th>step</th>\n                        <th>ch.</th>\n                        <th>type</th>\n                        <th>data</th>\n                        <th>decoded</th>\n                        <th>active</th>\n                        <th>LED num</th>\n                        <th>LED On</th>\n                        <th>LED Off</th>\n                        <th>LED midi</th>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i => {\n                        let t = MSG_TYPES[config[\"steps\"][i][\"msg_type\"]];\n                        if (config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE) {\n                            t = t + ' ' + Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) + ' vel. ' + config[\"steps\"][i][\"data\"][1];\n                        }\n                        const c0 = config[\"steps\"][i][\"led_inactive_color\"];\n                        const c1 = config[\"steps\"][i][\"led_active_color\"];\n                        return (\n                            <tr key={`${obj}.${i}`}>\n                                <td>{i}</td>\n                                <td>{h(config[\"steps\"][i][\"channel\"])}</td>\n                                <td>{h(config[\"steps\"][i][\"msg_type\"])}</td>\n                                <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                                <td>{t}</td>\n                                <td>{config[\"steps\"][i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                                <td>{h(config[\"steps\"][i][\"led_num\"])}</td>\n                                <td>{c1 in COLORS ? COLORS[c1] : h(c1)}</td>\n                                <td>{c0 in COLORS ? COLORS[c0] : h(c0)}</td>\n                                <td>{h(config[\"steps\"][i][\"led_midi_ctrl\"])}</td>\n                            </tr>\n                        )}\n                    )}\n                    <tr>\n                        <td colSpan={10}>control mode: {CONTROL_MODES[config[\"control_mode\"]]}</td>\n\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h3>Preset {presetIndexToXY(parseInt(index, 10))} (#{index}): {data[\"name\"]}</h3>\n            {/*<PresetName name= />*/}\n            <Controls controls={data[\"controls\"]} />\n            <MidiSettings settings={data[\"midi\"]} />\n        </div>\n    );\n};\n\nconst Presets = ({ presets }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div>\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n        </div>\n    );\n};\n\nclass DumpSysex extends Component {\n// const DumpSysex = ({ data }) => {\n    render() {\n        const data = this.props.state.data;\n        // return <pre>{JSON.stringify(data, null, 4)}</pre>;\n        if (!data) return null;\n        console.log(\"DumpSysex render\");\n        return (\n            <div className=\"dump code\">\n                <div>\n                    {Object.keys(data[TARGET_PRESET]).map(idx => <Preset key={idx} index={idx} data={data[TARGET_PRESET][idx]} />)}\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default inject('state')(observer(DumpSysex));\n// export default DumpSysex;\n","import React, {Component} from 'react';\nimport {\n    checksum,\n    parseSysexDump,\n    requestAllPresets,\n    requestPreset,\n    requestPresetObj, SYSEX_END, SYSEX_START\n} from \"../pacer/sysex\";\nimport {SYSEX_SIGNATURE} from \"../pacer/constants\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./Debug.css\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {SYSEX_HEADER} from \"../pacer/constants\";\n\nfunction replacerDec2Hex(key, value) {\n    return typeof value === 'number' ? '0x' + h(value) : value;\n}\n\nfunction toSysExMessage(data) {\n    // console.log(\"toSysExMessage\", data, typeof data);\n    if (data === null) return null;\n    return [SYSEX_START, ...SYSEX_SIGNATURE, ...data, SYSEX_END];\n}\n\n// function batchMessages(callback, wait) {\n//\n//     let messages = [];  // batch of received messages\n//     let timeout;\n//\n//     return function() {\n//         clearTimeout(timeout);\n//         let event = arguments[0];\n//         messages.push(event.data);\n//         timeout = setTimeout(() => {\n//             // console.log(\"timeout elapsed\");\n//             timeout = null;\n//             callback(messages);\n//             messages = [];\n//         }, wait);\n//     };\n// }\n\nclass Debug extends Component {\n\n    state = {\n        output: null,           // MIDI output port used for output\n        data: null,\n        messages: [{\n            name: \"read current preset\",\n            message: requestPreset(0),\n            bytesExpected: 189\n        }, {\n            name: \"read preset A1\",\n            message: requestPreset(1),\n            bytesExpected: 189\n        }, {\n            name: \"read stompswitch #1 of preset #5\",\n            message: requestPresetObj(5, 0x0D),\n            bytesExpected: 7\n        }, {\n            name: \"read all presets (takes some time)\",\n            message: requestAllPresets(),\n            bytesExpected: 4536\n        }],\n        customMessage: \"\"\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n\n/*\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            console.log(`total bytes received = ${messages.length}`);\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                        // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        // draft.presetIndex = parseInt(pId, 10);\n                    }\n                )\n            );\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n*/\n\n/*\n    onOutputConnection = (port_id) => {\n        console.log(\"onOutputConnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        console.log(\"onOutputDisconnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n*/\n\n/*\n    /!**\n     *\n     * @param msg\n     *!/\n    sendSysex = msg => {\n        // console.log(\"sendSysex\", msg);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy();\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n*/\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.toUpperCase().match(/[0-9A-F ]+/g) || []).join('');\n        this.setState({\n            customMessage: s\n        });\n    };\n\n    getCustomMessageData = () => {\n        if (this.state.customMessage && this.state.customMessage !== \"\") {\n            let d = fromHexString(this.state.customMessage, / /g);\n            if (d) {\n                let data = Array.from(d);\n                // console.log(\"getCustomMessageData\", data, typeof data);\n                if (data && data.length > 0) {\n                    data.push(checksum(data));\n                    // let tmp = SYSEX_HEADER.concat(d);\n                    // console.log(\"return custom message data\", tmp, hs(data));\n                    // return SYSEX_HEADER.concat(d);\n                    return [SYSEX_HEADER, ...d];\n                    // return data;\n                }\n            }\n        }\n        return null;\n    };\n\n    sendCustomMessage = () => {\n        let d = this.getCustomMessageData();\n        if (d && d.length > 0) {\n            this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected: -1});\n            this.sendSysex(d);\n        }\n        // if (this.state.customMessage) {\n        //     let data = Array.from(fromHexString(this.state.customMessage, / /g));\n        //     if (data && data.length > 0) {\n        //         data.push(checksum(data));\n        //         this.sendSysex(SYSEX_HEADER.concat(data));\n        //     }\n        // }\n    };\n\n    sendMessage = (msg) => {\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected: msg.bytesExpected});\n        this.props.state.sendSysex(msg.message);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, messages, customMessage } = this.state;\n\n        const cs = checksum(fromHexString(customMessage, / /g));\n\n        let hex_msg = '';\n        let s = (customMessage.toUpperCase().match(/[0-9A-F]+/g) || []).join('');\n        for (let i=0; i < s.length; i++) {\n            if ((i > 0) && (i % 2 === 0)) hex_msg += ' ';\n            hex_msg += s[i];\n        }\n\n        let u = toSysExMessage(this.getCustomMessageData());\n        let v = u ? JSON.stringify(parseSysexDump(Uint8Array.from(toSysExMessage(this.getCustomMessageData()))), replacerDec2Hex, 4) : \"\";\n\n        return (\n            <div className=\"wrapper\">\n\n{/*\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                          onMidiInputEvent={this.handleMidiInputEvent}\n                          onOutputConnection={this.onOutputConnection}\n                          onOutputDisconnection={this.onOutputDisconnection}>\n                        <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                    </Midi>\n                </div>\n*/}\n\n                <div className=\"content\">\n\n                    <div className=\"content-row-content first\">\n                        <h2>Test messages:</h2>\n                        <div className=\"content-row-content-content\">\n                        {messages.map((msg, i) =>\n                            <div key={i} className=\"send-message\">\n                                <button onClick={() => this.sendMessage(msg)}>send</button>\n                                <span className=\"code light\">{ hs(SYSEX_SIGNATURE.concat(msg.message.slice(0, 1))) } </span>\n                                <span className=\"code\">{ hs(msg.message.slice(1, -1)) } </span>\n                                <span className=\"code light\"> {hs(msg.message.slice(-1))}</span>\n                                <span className=\"message-name\"> {msg.name}</span>\n                            </div>\n                        )}\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Custom message:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"send-message\">\n                                <button onClick={this.sendCustomMessage} disabled={(s.length % 2) !== 0}>send</button>\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} </span>\n                                <input type=\"text\" className=\"code\" size=\"80\" value={customMessage}\n                                       placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                                <span className=\"code light\"> {h(cs)}</span>\n                            </div>\n\n                            <div className=\"custom-message code\">\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)}</span> {hex_msg} <span className=\"code light\">{h(cs)}</span>\n                            </div>\n\n                            <div className=\"debug\">\n                                {v ? <pre>{v}</pre> : <div>Invalid message. Send at your own risk.</div>}\n                                {/*<pre>{hs(toSysExMessage(this.getCustomMessageData()))}</pre>*/}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Response:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"message code\">\n                                <DumpSysex data={data} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                    </div>\n\n{/*\n                    <div className=\"content-row-content\">\n                        {messages.map((msg, i) => {\n                            let d = Uint8Array.from(toSysExMessage(msg.message));\n                            console.log('d', d);\n                            return isSysexData(d) ?\n                                <div className=\"debug\" key={i}>\n                                    <h4>[Debug] sysex data to send:</h4>\n                                    <pre>{JSON.stringify(parseSysexDump(d), null, 4)}</pre>\n                                </div> :\n                                <div key={i}>nop {hs(d)}</div>\n                            }\n                        )}\n                    </div>\n*/}\n{/*\n                    <div className=\"content-row-content\">\n                        {data &&\n                        <div className=\"debug\">\n                            <h4>[Debug] sysex data received:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>\n                        }\n                    </div>\n*/}\n\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default Debug;\n","import React, {Component, Fragment} from \"react\";\nimport {inject, observer} from \"mobx-react\";\nimport {presetXYToIndex} from \"../pacer/utils\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\nimport {state} from \"../stores/StateStore\";\nimport \"./PresetSelector.css\";\n\n// TODO: is observer needed here?\nconst Selector = observer(({ xyId, presetIndex, hasData, name, onClick }) => {\n\n    // console.log(\"Selector\", xyId, presetIndex, state.currentPreset, typeof presetIndex, typeof state.currentPreset);\n\n    let c = \"selector\";\n    const selected = presetIndex === state.currentPreset;\n    if (selected) c += \" selected\";\n    if (!selected && hasData) c += \" loaded\";\n\n    return (<div className={c} onClick={() => onClick(presetIndex)}>\n        <span className=\"preset-id\">{xyId}</span> <span className=\"preset-name\">{name}</span>\n    </div>);\n\n});\n\nclass PresetSelector extends Component {\n\n    selectPreset = (index) => {     // index must be a string\n        this.props.state.selectPreset(index);\n        const data = this.props.state.data;\n        if (!(!this.props.state.forceReread && data && data[TARGET_PRESET] && data[TARGET_PRESET][index])) {\n            this.props.state.readPreset(index, \"reading Pacer...\");\n        }\n    };\n\n    render() {\n        const {data, currentPreset} = this.props.state;\n        // console.log(\"PresetSelector render\", currentPreset, typeof currentPreset);\n        return (\n            <div className=\"selectors\">\n                <div className=\"preset-selectors\">\n                    <Selector xyId={\"CURRENT\"} presetIndex={\"0\"} name={\"\"} xselected={!!currentPreset} onClick={this.selectPreset} key={0}/>\n                    <div></div>\n                    <div></div>\n                    <div className=\"force-read\">\n                        <label>\n                            <input type=\"checkbox\" checked={this.props.state.forceReread} onChange={this.props.state.toggleForceReread} />\n                            Always read from Pacer\n                        </label>\n                    </div>\n                    {\n                        ['A', 'B', 'C', 'D'].map(\n                            letter =>\n                                <Fragment key={letter}>\n                                {\n                                    Array.from(Array(6).keys()).map(\n                                        digit => {\n                                            let xyId = letter + (digit + 1);\n                                            let index = presetXYToIndex(xyId);\n                                            let hasData = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                                            let name = hasData ? data[TARGET_PRESET][index][\"name\"] : \"\";\n                                            return <Selector xyId={xyId} presetIndex={index} hasData={hasData} name={name} key={index} onClick={this.selectPreset} />\n                                        })\n                                }\n                                </Fragment>\n                        )\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(PresetSelector));\n","import React, {Component} from \"react\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer/constants\";\nimport {inject, observer} from \"mobx-react\";\nimport \"./ControlSelector.css\";\n\nconst Control = ({ name, controlIndex, selected, onSelect }) => {\n    // console.log(\"Control\", name, controlIndex, typeof name, typeof controlIndex);\n    return (\n        <div className={selected ? \"selector selected\" : \"selector loaded\"} onClick={() => onSelect(controlIndex)}>\n            <div className=\"name\">{name}</div>\n        </div>\n    );\n}\n\n\nclass ControlSelector extends Component {\n\n    selectControl = (controlId) => {\n        this.props.state.selectControl(controlId);\n    };\n\n    render() {\n        const c = this.props.state.currentControl;\n        return (\n            <div className=\"controls\">\n                {FOOTSWITCHES.map(key => <Control key={key} name={CONTROLS[key]} controlIndex={key} selected={key === c} onSelect={this.selectControl} />)}\n                {EXPPEDALS.map(key => <Control key={key} name={CONTROLS[key]} controlIndex={key} selected={key === c} onSelect={this.selectControl} />)}\n                <div className=\"no-control\">&nbsp;</div>\n                {STOMPSWITCHES_TOP.map(key => <Control key={key} name={CONTROLS[key]} controlIndex={key} selected={key === c} onSelect={this.selectControl} />)}\n                <div className=\"no-control\">&nbsp;</div>\n                {STOMPSWITCHES_BOTTOM.map(key => <Control key={key} name={CONTROLS[key]} controlIndex={key} selected={key === c} onSelect={this.selectControl} />)}\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(ControlSelector));\n","import {\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_EXPRESSION_PEDAL_2, CONTROL_FOOTSWITCH_1, CONTROL_FOOTSWITCH_2, CONTROL_FOOTSWITCH_3, CONTROL_FOOTSWITCH_4,\n    CONTROL_STOMPSWITCH_1, CONTROL_STOMPSWITCH_2, CONTROL_STOMPSWITCH_3, CONTROL_STOMPSWITCH_4, CONTROL_STOMPSWITCH_5,\n    CONTROL_STOMPSWITCH_6, CONTROL_STOMPSWITCH_A, CONTROL_STOMPSWITCH_B, CONTROL_STOMPSWITCH_C, CONTROL_STOMPSWITCH_D,\n    MSG_TYPES_EXP_PEDAL,\n    MSG_TYPES_FOOTWITCH, MSG_TYPES_STOMPSWITCH\n} from \"./constants\";\n\nexport function getAvailableMessageTypes(controlId) {\n    switch (parseInt(controlId)) {\n        case CONTROL_STOMPSWITCH_1:\n        case CONTROL_STOMPSWITCH_2:\n        case CONTROL_STOMPSWITCH_3:\n        case CONTROL_STOMPSWITCH_4:\n        case CONTROL_STOMPSWITCH_5:\n        case CONTROL_STOMPSWITCH_6:\n        case CONTROL_STOMPSWITCH_A:\n        case CONTROL_STOMPSWITCH_B:\n        case CONTROL_STOMPSWITCH_C:\n        case CONTROL_STOMPSWITCH_D:\n            return MSG_TYPES_STOMPSWITCH;\n        case CONTROL_FOOTSWITCH_1:\n        case CONTROL_FOOTSWITCH_2:\n        case CONTROL_FOOTSWITCH_3:\n        case CONTROL_FOOTSWITCH_4:\n            return MSG_TYPES_FOOTWITCH;\n        case CONTROL_EXPRESSION_PEDAL_1:\n        case CONTROL_EXPRESSION_PEDAL_2:\n            return MSG_TYPES_EXP_PEDAL;\n        default:\n            return [];\n    }\n}\n","import React, {Fragment} from 'react';\nimport {\n    MSG_AD_ATCHAN,\n    MSG_AD_MIDI_CC,\n    MSG_AD_NRPN_COARSE,\n    MSG_AD_NRPN_FINE,\n    MSG_AD_PITCH_BEND,\n    MSG_CTRL_OFF,\n    MSG_DAWFUNC,\n    MSG_ENC_ATCHAN,\n    MSG_ENC_CC,\n    MSG_ENC_MIDICC_REL,\n    MSG_ENC_NRPN_COARSE,\n    MSG_ENC_NRPN_FINE,\n    MSG_ENC_PITCH, MSG_ENC_PRESET_SELECT,\n    MSG_ENC_PROGRAM, MSG_ENC_STEP_SELECT, MSG_LOAD_CC,\n    MSG_SW_MIDI_CC,\n    MSG_SW_MIDI_CC_STEP,\n    MSG_SW_MIDI_CC_TGGLE,\n    MSG_SW_MMC,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE,\n    MSG_SW_NRPN_COARSE,\n    MSG_SW_NRPN_FINE,\n    MSG_SW_PRESET_INC_DEC,\n    MSG_SW_PRESET_SELECT,\n    MSG_SW_PRG_BANK,\n    MSG_SW_PRG_STEP,\n    MSG_SW_RELAY,\n    MSG_SW_STEP_INC_DEC,\n    MSG_SW_STEP_SELECT, MSG_TYPES_DATA_USAGE, PRESET_TARGET,\n    TARGET_NAME, TARGET_PRESET\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport {presetXYToIndex} from \"../pacer/utils\";\n\nexport const DataInputField = ({ msgType, value, dataIndex, onChange }) => {\n\n    if (!MSG_TYPES_DATA_USAGE[msgType][dataIndex]) return '';\n\n    switch (msgType) {\n\n        case MSG_CTRL_OFF:\n            return '';\n\n        case MSG_SW_NOTE:\n        case MSG_SW_NOTE_TGGLE:\n            if (dataIndex !== 0) {\n                return <input type=\"text\" value={value} onChange={(event) => onChange(dataIndex, event.target.value)} />;\n            } else {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)} className=\"notes\">{\n                        Array.from(Array(127).keys()).map(i => {\n                            const n = Note.fromMidi(i, true);\n                            return <option key={i} value={i}>{n} ({i})</option>\n                        })\n                    }</select>\n                );\n            }\n\n        case MSG_SW_STEP_SELECT:\n            if (dataIndex === 0) {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>{\n                        TARGET_NAME.map((target, index) => {\n                            return target ? <option key={index} value={index}>{target}</option> : null\n                        })\n                    }</select>);\n            } else {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5</option>\n                        <option value={6}>6</option>\n                    </select>);\n            }\n\n        case MSG_SW_STEP_INC_DEC:\n            if (dataIndex !== 0) {\n                return <input type=\"text\" value={value} onChange={(event) => onChange(dataIndex, event.target.value)} />;\n            } else {\n                return (\n                    <select value={value} onChange={(event) => onChange(\"data\", dataIndex, event.target.value)}>{\n                        TARGET_NAME.map((target, index) => {\n                            return target ? <option key={index} value={index}>{target}</option> : null\n                        })\n                    }</select>);\n            }\n\n        case MSG_SW_RELAY:\n            if (dataIndex === 0) {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>\n                        <option value={0}>Auto detect</option>\n                        <option value={1}>Normally open</option>\n                        <option value={2}>Normally closed</option>\n                        <option value={3}>Latching</option>\n                    </select>);\n            } else {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>\n                        <option value={0}>Relay 1</option>\n                        <option value={1}>Relay 2</option>\n                        <option value={2}>Relay 3</option>\n                        <option value={3}>Relay 4</option>\n                    </select>);\n            }\n\n        case MSG_SW_PRESET_SELECT:\n        case MSG_ENC_PRESET_SELECT:\n            if (dataIndex === 0) {\n                return (\n                    <select value={value} onChange={(event) => onChange(dataIndex, event.target.value)}>\n                        {PRESET_TARGET.map((name, index) => <option key={index} value={index}>{name}</option>)}\n                    </select>);\n            } else {\n                return '';\n            }\n\n        case MSG_AD_MIDI_CC:\n        case MSG_AD_NRPN_COARSE:\n        case MSG_AD_NRPN_FINE: \n        case MSG_AD_PITCH_BEND: \n        case MSG_AD_ATCHAN: \n        case MSG_DAWFUNC:\n        case MSG_SW_MIDI_CC_TGGLE:\n        case MSG_SW_MIDI_CC: \n        case MSG_SW_MIDI_CC_STEP: \n        case MSG_SW_PRG_BANK:\n        case MSG_SW_PRG_STEP: \n        case MSG_SW_NRPN_COARSE: \n        case MSG_SW_NRPN_FINE: \n        case MSG_SW_MMC: \n        case MSG_SW_PRESET_INC_DEC:\n        case MSG_ENC_CC:\n        case MSG_ENC_MIDICC_REL: \n        case MSG_ENC_NRPN_COARSE: \n        case MSG_ENC_NRPN_FINE: \n        case MSG_ENC_PITCH: \n        case MSG_ENC_ATCHAN: \n        case MSG_ENC_PROGRAM: \n        case MSG_ENC_STEP_SELECT:\n        case MSG_LOAD_CC:\n        default:\n            return <input type=\"text\" value={value} onChange={(event) => onChange(dataIndex, event.target.value)} />\n    }\n\n};\n","import React, {Component, Fragment} from 'react';\nimport {\n    COLORS,\n    MSG_CTRL_OFF,\n    MSG_TYPES_DATA_HELP,\n    MSG_TYPES_FULLNAME, TARGET_PRESET\n} from \"../pacer/constants\";\nimport \"./ControlStepsEditor.css\";\nimport {getAvailableMessageTypes} from \"../pacer/model\";\nimport {DataInputField} from \"./DataInputField\";\nimport {inject, observer} from \"mobx-react\";\nimport {CONTROLS_DATA} from \"../pacer/sysex\";\nimport {state} from \"../stores/StateStore\";\n\nconst LEDMidi = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">0</option>\n            <option value=\"1\">1</option>\n        </select>\n    );\n};\n\nconst LEDColor = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            {Object.keys(COLORS).map(colorIndex => <option key={colorIndex} value={colorIndex}>{COLORS[colorIndex]}</option>)}\n        </select>\n    );\n};\n\nconst LEDNum = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">default</option>\n            <option value=\"3\">top</option>\n            <option value=\"2\">middle</option>\n            <option value=\"1\">bottom</option>\n        </select>\n    );\n};\n\n/*\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select value={note} onChange={(event) => onChange(event.target.value)} className=\"notes\">\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n} ({i})</option>\n                    })\n            }\n        </select>\n    );\n};\n*/\n\nconst Step = observer(({ presetIndex, controlId, stepIndex, config }) => {\n\n    // console.log(presetIndex, controlId, stepIndex, typeof presetIndex, typeof controlId, typeof stepIndex, JSON.stringify(config));\n\n    const updateData = (dataIndex, value) => {\n        state.updateControlStep(controlId, stepIndex, \"data\", dataIndex, value, presetIndex);\n    }\n    const updateChannel = (value) => {\n        state.updateControlStep(controlId, stepIndex, \"channel\", null, value, presetIndex);\n    }\n    const updateLED = (led, value) => {\n        state.updateControlStep(controlId, stepIndex, led, null, value, presetIndex);\n    }\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    // console.log(\"config.msg_type\", config.msg_type, inactive, getAvailableMessageTypes(controlId));\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"step-row-header\">Step {stepIndex}:</div>\n                <div>\n                    <select value={config.msg_type} onChange={(event) => state.updateControlStepMessageType(controlId, stepIndex, event.target.value, presetIndex)}>\n                        {getAvailableMessageTypes(controlId).map(mtype => <option key={mtype} value={mtype}>{MSG_TYPES_FULLNAME[mtype]}</option>)}\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    if (!config.data) return null;\n\n    let d0, d1, d2;\n    d0 = <DataInputField msgType={config.msg_type} value={config.data[0]} dataIndex={0} onChange={updateData} />;\n    d1 = <DataInputField msgType={config.msg_type} value={config.data[1]} dataIndex={1} onChange={updateData} />;\n    d2 = <DataInputField msgType={config.msg_type} value={config.data[2]} dataIndex={2} onChange={updateData} />;\n\n    // console.log(\"config.msg_type\", config.msg_type, typeof config.msg_type);\n\n    return (\n        <Fragment>\n            <div className=\"step-row-header\">Step {stepIndex}:</div>\n            <div>\n                <select value={config.msg_type} onChange={(event) => state.updateControlStepMessageType(controlId, stepIndex, event.target.value, presetIndex)}>\n                    {getAvailableMessageTypes(controlId).map(mtype => <option key={mtype} value={mtype}>{MSG_TYPES_FULLNAME[mtype]}</option>)}\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][0] : ''}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][1] : ''}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][2] : ''}</div></div>\n            <div>\n                <select value={config.channel} onChange={(event) => updateChannel(event.target.value)}>\n                    {Array.from(Array(17).keys()).map(i => <option key={i} value={i}>{i === 0 ? 'global' : i}</option>)}\n                </select>\n            </div>\n            <div>\n                <LEDColor current_value={config.led_inactive_color} onChange={(value) => updateLED(\"led_inactive_color\", value)} />\n            </div>\n            <div>\n                <LEDColor current_value={config.led_active_color} onChange={(value) => updateLED(\"led_active_color\", value)} />\n            </div>\n            <div>\n                <LEDNum current_value={config.led_num} onChange={(value) => updateLED(\"led_num\", value)} />\n            </div>\n            <div>\n                <LEDMidi current_value={config.led_midi_ctrl} onChange={(value) => updateLED(\"led_midi_ctrl\", value)} />\n            </div>\n        </Fragment>\n    );\n});\n\nclass ControlStepsEditor extends Component {\n\n    render() {\n\n        const steps = this.props.state.data[TARGET_PRESET][this.props.presetIndex][CONTROLS_DATA][this.props.controlId][\"steps\"];\n\n        // console.log(JSON.stringify(steps), Object.keys(steps));\n\n        //FIXME: do not display LED for EXP and FS\n\n        return (\n            <div className=\"steps\">\n                <div></div>\n                <div className=\"step-col-header\">Type</div>\n                <div className=\"step-col-header\">Data 1</div>\n                <div className=\"step-col-header\">Data 2</div>\n                <div className=\"step-col-header\">Data 3</div>\n                <div className=\"step-col-header\">MIDI Ch.</div>\n                <div className=\"step-col-header\">LED Off</div>\n                <div className=\"step-col-header\">LED On</div>\n                <div className=\"step-col-header\">LED Num</div>\n                <div className=\"step-col-header\">LED MIDI</div>\n                {Object.keys(steps).map(stepIndex =>\n                    <Step key={stepIndex} presetIndex={this.props.presetIndex} controlId={this.props.controlId} stepIndex={stepIndex} config={steps[stepIndex]} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(ControlStepsEditor));\n","import React from \"react\";\nimport {CONTROL_MODES} from \"../pacer/constants\";\nimport\"./ControlModeEditor.css\";\n\nconst ControlModeEditor = (props) => {\n    return (\n        <div className=\"control-mode\">\n            <span className=\"step-row-header\">Control mode:</span>\n            <select onChange={(event) => props.onUpdate(event.target.value)} value={props.mode}>\n                {Object.keys(CONTROL_MODES).map(key => <option key={key} value={key}>{CONTROL_MODES[key]}</option>)}\n            </select>\n        </div>\n    );\n};\n\nexport default ControlModeEditor;\n","import React, {Component} from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\n\nclass PresetNameEditor extends Component {\n\n    onNameUpdate = (event) => {\n        this.props.state.updatePresetName(this.props.presetIndex, event.target.value.length > 5 ? event.target.value.substr(0, 5) : event.target.value);\n    };\n\n    render() {\n        console.log(\"PresetNameEditor render\");\n        const name= this.props.state.data[TARGET_PRESET][this.props.presetIndex][\"name\"];\n        return (\n            <div className=\"preset-name-editor\">\n                <input defaultValue={name} onChange={this.onNameUpdate} size={8} />\n                The preset name is limited to 5 characters.\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(PresetNameEditor));\n","import React from \"react\";\nimport {CONTROLS_FULLNAME} from \"../pacer/constants\";\nimport {observer} from \"mobx-react\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport {state} from \"../stores/StateStore\";\n\n/*\n{\n    17: {\n        controls: {\n            13: Array(13) [\n                0: (9) [127, 1, 1, 17, 13, 96, 1, 0, 127]\n                1: (29) [127, 1, 1, 17, 13, 1, 1, 0, 0, 2, 1, 71, 0, 3, 1, 22, 0, 4, 1, 127, 0, 5, 1, 0, 0, 6, 1, 1, 104]\n\n\n{\n    1:\n        midi: Array(0)\n            dummy: Array(1)\n                0: Array(29)\n                    0: 127\n                    1: 1\n                    2: 1\n\n*/\n\nconst updateMessage = (presetId, ctrlType, ctrl, messages) => {\n    switch (ctrlType) {\n        case \"controls\":\n            return <div key={`${presetId}-${ctrl}-ctrl`}>- preset {presetIndexToXY(presetId)}, control {CONTROLS_FULLNAME[ctrl]}</div>;\n        case \"midi\":\n            return <div key={`${presetId}-${ctrl}-midi`}>- preset {presetIndexToXY(presetId)}, midi</div>;\n        case \"name\":\n            return <div key={`${presetId}-${ctrl}-name`}>- preset {presetIndexToXY(presetId)}, name</div>;\n        default:\n            return null;\n    }\n};\n\nconst UpdateMessages = observer(() => {\n    if (state.updateMessages && Object.getOwnPropertyNames(state.updateMessages).length) {\n        return (\n            <div className=\"messages-to-send\">\n                <div className=\"update-messages-title\">Updates that will be sent to the Pacer:</div>\n                {\n                    //FIXME: allow object or array\n                    Object.getOwnPropertyNames(state.updateMessages).map(       // preset\n                        (presetId, i) => {\n                            return Object.getOwnPropertyNames(state.updateMessages[presetId]).map(     // control type\n                                (ctrlType, j) => {\n                                    return Object.getOwnPropertyNames(state.updateMessages[presetId][ctrlType]).map(      // control\n                                        (ctrl, k) => {\n                                            return updateMessage(presetId, ctrlType, ctrl, state.updateMessages[presetId][ctrlType][ctrl])\n                                        }\n                                    );\n                                }\n                            );\n                        }\n                    )\n                }\n            </div>);\n    } else {\n        return null;\n    }\n});\n\nexport default UpdateMessages;\n","import React, {Component} from \"react\";\nimport {inject, observer} from \"mobx-react\";\nimport {ALL_PRESETS_EXPECTED_BYTES, requestAllPresets} from \"../pacer/sysex\";\n\nclass ActionButtons extends Component {\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n    }\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click()\n    };\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        // noinspection JSIgnoredPromiseFromCall\n        if (file) {\n            this.props.state.readFiles([file]);\n        }\n    };\n\n    clearData = () => {\n        this.props.state.clear();\n    };\n\n/*\n    toggleExtControls = e => {\n        const extControls = !this.state.extControls;\n        this.setState({extControls});\n    };\n*/\n/*\n    toggleBase = e => {\n        const decBase = !this.state.decBase;\n        this.setState({decBase});\n    };\n*/\n\n    render() {\n        // const output = this.props.state.midi.output;\n        const data = this.props.state.data;\n\n        // console.log(\"connected\", this.props.state.connected);\n\n        const canRead = this.props.state.connected;\n        const canWrite = this.props.state.connected && this.props.state.changed;\n\n        return (\n            <div className=\"preset-buttons\">\n\n                {canRead &&\n                <button className=\"read\"\n                       onClick={() => this.props.state.readPacer(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}\n                       title=\"Read all presets from Pacer\">Read Pacer</button>}\n                {!canRead && <div></div>}\n\n                {canWrite && <button className=\"update\" onClick={() => this.props.state.updatePacer()}>Update Pacer</button>}\n                {!canWrite && <div></div>}\n\n                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}} onChange={this.onChangeFile} />\n                <button onClick={this.onInputFile}>Load preset(s) from file</button>\n\n                <div>\n                </div>\n\n                {data && <button onClick={this.clearData}>CLEAR ALL</button>}\n                {!data && <div></div>}\n\n                <div>\n                </div>\n{/*\n                <div className=\"preset-buttons col align-col-bottom\">\n                    <div>Click any preset to load only this preset.</div>\n                    {data && <button onClick={this.toggleExtControls}>{this.state.extControls ? \"Hide external controls\" : \"Show external controls\"}</button>}\n                    {data && <button onClick={this.toggleBase}>{this.state.decBase ? \"Display numbers in hex\" : \"Display numbers in dec\"}</button>}\n                </div>\n*/}\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(ActionButtons));\n","import React, {Component, Fragment} from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    CONTROLS_DATA\n} from \"../pacer/sysex\";\nimport ControlSelector from \"../components/ControlSelector\";\nimport {\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {setAutoFreeze} from \"immer\";\nimport ControlStepsEditor from \"../components/ControlStepsEditor\";\nimport Dropzone from \"react-dropzone\";\nimport ControlModeEditor from \"../components/ControlModeEditor\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\nimport {dropOverlayStyle, isVal} from \"../utils/misc\";\nimport UpdateMessages from \"../components/UpdateMessages\";\nimport ActionButtons from \"../components/ActionButtons\";\nimport \"./Preset.css\";\nimport {presetIndexToXY} from \"../pacer/utils\";\n\n//FIXME: fix this:\nsetAutoFreeze(false);   // needed to be able to update name and copy a preset at the same time. Otherwise immerjs freez the state in updateMessageName() and it is no longer possible to copy a preset.\n\nclass Preset extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropZoneActive: false,\n            copyPresetFrom: \"-1\",\n        };\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.props.state.clear();\n        this.props.state.changed = true;\n        this.setState(\n            { dropZoneActive: false },\n            () => { this.props.state.readFiles(files) }   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlMode = (controlId, value) => {\n        this.props.state.setControlMode(parseInt(value, 10))\n    };\n\n    copyPresetFrom = (presetIdFrom, presetIdTo) => {\n        //FIXME: use immerjs\n/*\n        const { data, updateMessages } = this.state;\n\n        if (data && data[TARGET_PRESET][presetIdFrom]) {\n\n            if (!data[TARGET_PRESET][presetIdTo]) data[TARGET_PRESET][presetIdTo] = {};\n            data[TARGET_PRESET][presetIdTo][\"changed\"] = true;\n\n            if (!updateMessages.hasOwnProperty(presetIdTo)) updateMessages[presetIdTo] = {};\n            if (!updateMessages[presetIdTo].hasOwnProperty(CONTROLS_DATA)) updateMessages[presetIdTo][CONTROLS_DATA] = {};\n\n            //\n            // Only copy CONTROLS (for the current version)\n            //\n            //FIXME: copy EXP and FS config\n            CONTROLS_WITH_SEQUENCE.forEach(controlId => {\n                // data[TARGET_PRESET][presetIdTo][CONTROLS_DATA][controlId] = Object.assign({}, data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId]);\n                // ugly / deep copy without shallow references:\n                data[TARGET_PRESET][presetIdTo][CONTROLS_DATA][controlId] = JSON.parse(JSON.stringify(data[TARGET_PRESET][presetIdFrom][CONTROLS_DATA][controlId]));\n                updateMessages[presetIdTo][CONTROLS_DATA][controlId] = getControlUpdateSysexMessages(presetIdTo, controlId, data, true);\n            });\n            // Object.assign(data[TARGET_PRESET][presetIdTo], data[TARGET_PRESET][presetIdFrom]);\n\n            //we do not copy the name\n            //updateMessages[presetIdTo][\"name\"] = buildPresetNameSysex(presetIdTo, data);\n\n            // CONTROLS_WITH_SEQUENCE.forEach(controlId => updateMessages[presetIdTo][CONTROLS_DATA][controlId] = getControlUpdateSysexMessages(presetIdTo, controlId, data, true));\n\n            this.setState({data, updateMessages, changed: true});\n        }\n*/\n    };\n\n    render() {\n\n        // const { output, presetIndex, controlId, data, changed, updateMessages, dropZoneActive } = this.state;\n        const { dropZoneActive } = this.state;\n\n        const presetIndex = this.props.state.currentPreset;\n        const controlId = this.props.state.currentControl;\n        const data = this.props.state.data;\n        const updateMessages = this.props.state.updateMessages;\n\n        const showEditor =\n            data &&\n            (TARGET_PRESET in data) &&\n            (presetIndex in data[TARGET_PRESET]) &&\n            (CONTROLS_DATA in data[TARGET_PRESET][presetIndex]) &&\n            (controlId in data[TARGET_PRESET][presetIndex][CONTROLS_DATA]) &&\n            (\"steps\" in data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId]) &&\n            (Object.keys(data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"steps\"]).length === 6);\n\n        let presetLabel = \"\";\n        if (data &&\n            (TARGET_PRESET in data) &&\n            (presetIndex in data[TARGET_PRESET]) &&\n            (\"name\" in data[TARGET_PRESET][presetIndex])) {\n            presetLabel = presetIndexToXY(presetIndex) + \" \" + data[TARGET_PRESET][presetIndex][\"name\"];\n        }\n\n        return (\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n                    <div className=\"content\">\n\n                        <div className=\"content-row-content first\">\n                            <h2>Presets</h2>\n                            <div className=\"row align-bottom\">\n                                <PresetSelector />\n                                <ActionButtons />\n                            </div>\n                        </div>\n\n                        {data && data[TARGET_PRESET][presetIndex] &&\n                        <div className=\"content-row-content\">\n                            <h2>Preset Name</h2>\n                            <PresetNameEditor presetIndex={presetIndex} />\n                        </div>}\n\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Controls for preset {presetLabel}</h2>\n                                {isVal(presetIndex) && <ControlSelector />}\n\n{/*\n                                {data && presetIndex in data[TARGET_PRESET] && Object.keys(data[TARGET_PRESET]).length > 1 &&\n                                <Fragment>\n                                    (experimental) <button onClick={() => this.copyPresetFrom(this.state.copyPresetFrom, presetIndex)}>copy</button> from preset <select value={this.state.copyPresetFrom} onChange={(event) => this.setState({copyPresetFrom: event.target.value})}>\n                                        <option value=\"\">-</option>\n                                    {\n                                        Object.keys(data[TARGET_PRESET]).map((key, index) => {\n                                            if (data[TARGET_PRESET][key]) {\n                                                return (<option key={index} value={key}>{presetIndexToXY(key)} {data[TARGET_PRESET][key].name}</option>);\n                                            } else {\n                                                return null;\n                                            }\n                                        })\n                                    }\n                                    </select> <span className=\"small\">(copy the configuration for the footswitches A..D and 1..6 only)</span>\n                                </Fragment>\n                                }\n*/}\n\n                                {showEditor &&\n                                <ControlStepsEditor presetIndex={presetIndex} controlId={controlId} />}\n\n                                {showEditor &&\n                                <ControlModeEditor\n                                    controlId={controlId}\n                                    mode={data[TARGET_PRESET][presetIndex][CONTROLS_DATA][controlId][\"control_mode\"]}\n                                    onUpdate={(value) => this.updateControlMode(controlId, value)}/>}\n\n                                {!isVal(presetIndex) && <div className=\"please\">Select a preset.</div>}\n\n                            </Fragment>\n                        </div>\n\n                        {this.props.state.changed && this.props.state.midi.output &&         // FIXME: midiConnected(output) &&\n                        <div className=\"content-row-content\">\n                            <h2>Send the updated config to the Pacer</h2>\n                            <div className=\"actions\">\n                                <button className=\"update\" onClick={() => this.props.state.updatePacer()}>Update Pacer</button>\n                            </div>\n                        </div>}\n\n                        {/* this.props.debug && this.props.state.changed &&\n                        <div className=\"content-row-content\">\n                            <div className=\"debug\">\n                                <h4>[Debug] Update messages to send:</h4>\n                                <UpdateMessages messages={updateMessages} />\n                                <div className=\"dump code\">\n                                </div>\n                            </div>\n                        </div> */}\n\n                        <div className=\"content-row-content\">\n                            <UpdateMessages/>\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default inject('state')(observer(Preset));\n","import React, {Component} from 'react';\nimport \"./Monitor.css\";\n\nclass Monitor extends Component {\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"monitor-link\">\n                    Please use the new MIDI monitor available at <a href=\"https://studiocode.dev/midi-monitor/\" target=\"_blank\" rel=\"noopener noreferrer\">https://studiocode.dev/midi-monitor/</a>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Monitor;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"gh\">\n                <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">Source code available on GitHub</a>\n            </div>\n            <div>\n                <p>This web site is not endorsed by, directly affiliated with, maintained, or sponsored by Nektar Technology.\n                    This web site is published under <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noopener noreferrer\">GNU General Public License v3</a>.\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {Component} from 'react';\n\nclass Global extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <div className=\"doc\" style={{marginTop: '16px'}}>\n                    Sorry, this feature is not implemented yet.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Global;\n","import * as WebMidi from \"webmidi\";\nimport {SYSEX_START} from \"../pacer/sysex\";\n\nexport const MESSAGE = {\n    0x80: \"Note Off\",\n    0x90: \"Note On\",\n    0xA0: \"AfterTouch\",\n    0xB0: \"Control Change\",\n    0xC0: \"Program Change\",\n    0xD0: \"Channel Pressure\",\n    0xE0: \"Pitch Wheel\"\n};\n\nexport const CONTROLER = {\n    0: \"Bank Select (coarse)\",\n    1: \"Modulation Wheel (coarse)\",\n    2: \"Breath controller (coarse)\",\n    4: \"Foot Pedal (coarse)\",\n    5: \"Portamento Time (coarse)\",\n    6: \"Data Entry (coarse)\",\n    7: \"Volume (coarse)\",\n    8: \"Balance (coarse)\",\n    10: \"Pan position (coarse)\",\n    11: \"Expression (coarse)\",\n    12: \"Effect Control 1 (coarse)\",\n    13: \"Effect Control 2 (coarse)\",\n    16: \"General Purpose Slider 1\",\n    17: \"General Purpose Slider 2\",\n    18: \"General Purpose Slider 3\",\n    19: \"General Purpose Slider 4\",\n    32: \"Bank Select (fine)\",\n    33: \"Modulation Wheel (fine)\",\n    34: \"Breath controller (fine)\",\n    36: \"Foot Pedal (fine)\",\n    37: \"Portamento Time (fine)\",\n    38: \"Data Entry (fine)\",\n    39: \"Volume (fine)\",\n    40: \"Balance (fine)\",\n    42: \"Pan position (fine)\",\n    43: \"Expression (fine)\",\n    44: \"Effect Control 1 (fine)\",\n    45: \"Effect Control 2 (fine)\",\n    64: \"Hold Pedal (on/off)\",\n    65: \"Portamento (on/off)\",\n    66: \"Sustenuto Pedal (on/off)\",\n    67: \"Soft Pedal (on/off)\",\n    68: \"Legato Pedal (on/off)\",\n    69: \"Hold 2 Pedal (on/off)\",\n    70: \"Sound Variation\",\n    71: \"Sound Timbre\",\n    72: \"Sound Release Time\",\n    73: \"Sound Attack Time\",\n    74: \"Sound Brightness\",\n    75: \"Sound Control 6\",\n    76: \"Sound Control 7\",\n    77: \"Sound Control 8\",\n    78: \"Sound Control 9\",\n    79: \"Sound Control 10\",\n    80: \"General Purpose Button 1 (on/off)\",\n    81: \"General Purpose Button 2 (on/off)\",\n    82: \"General Purpose Button 3 (on/off)\",\n    83: \"General Purpose Button 4 (on/off)\",\n    91: \"Effects Level\",\n    92: \"Tremulo Level\",\n    93: \"Chorus Level\",\n    94: \"Celeste Level\",\n    95: \"Phaser Level\",\n    96: \"Data Button increment\",\n    97: \"Data Button decrement\",\n    98: \"Non-registered Parameter (fine)\",\n    99: \"Non-registered Parameter (coarse)\",\n    100: \"Registered Parameter (fine)\",\n    101: \"Registered Parameter (coarse)\",\n    120: \"All Sound Off\",\n    121: \"All Controllers Off\",\n    122: \"Local Keyboard (on/off)\",\n    123: \"All Notes Off\",\n    124: \"Omni Mode Off\",\n    125: \"Omni Mode On\",\n    126: \"Mono Operation\",\n    127: \"Poly Operation\"\n};\n\nexport const groupPortsByName = () => {\n    let g = {};\n    for (let p of WebMidi.inputs) {\n        g[p.name] = {\n            input: p.id,\n            output: null\n        };\n    }\n    for (let p of WebMidi.outputs) {\n        if (!(p.name in g)) {\n            g[p.name] = {input: null, output: null};\n        }\n        g[p.name].output = p.id\n    }\n    return g;\n};\n\n/**\n *\n * @param port\n * returns true if the midi port is the Pacer\n */\nexport const midiConnected = portId => {\n    return true;\n    //FIXME: return true if at least one output and one input are connected\n\n    // let port = portById(portId);\n    // return port ? port.name.match(new RegExp(PACER_MIDI_PORT_NAME, 'i')) : false\n};\n\n\nexport const batchMessages = (callback, callbackBusy, wait) => {\n\n    // console.log(\"batchMessages: init\", wait);\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n\n        // console.log(\"batchMessages: clear timeout\");\n        clearTimeout(timeout);\n\n        let event = arguments[0];\n\n        //\n        // We ignore all messages that are NOT sysex messages:\n        //\n        if (event.data[0] !== SYSEX_START) {\n            console.log(\"non sysex message ignored\");\n            return;\n        }\n\n        messages.push(event.data);\n\n        callbackBusy(messages.length);  // messages.length is the total number of bytes received so far\n\n        timeout = setTimeout(() => {\n            console.log(\"batchMessages: timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n\n        // console.log(\"batchMessages: done\");\n\n    };\n};\n\n","import React, {Component} from 'react';\nimport * as WebMidi from \"webmidi\";\nimport {portById} from \"../utils/ports\";\nimport {batchMessages} from \"../utils/midi\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../pacer/sysex\";\nimport {hs} from \"../utils/hexstring\";\nimport {inject, observer} from \"mobx-react\";\nimport \"./Midi.css\";\n\n\nclass Midi extends Component {\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            // console.log(\"handleMidiInputEvent\", messages);\n\n            let data = this.props.state.data;\n            for (let m of messages) {\n                if (isSysexData(m)) {\n                    data = mergeDeep(data || {}, parseSysexDump(m))\n                } else {\n                    console.log(\"MIDI message is not a sysex message\", hs(m))\n                }\n            }\n\n            console.log(\"merge done\");\n\n            // When requesting a config via MIDI (and not via a file drag&drop), we do not\n            // update the preset and control ID from the MIDI sysex received.\n            // This is important because to get the LED data we need to request the complete\n            // preset data instead of just the selected control's config.\n\n            // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n            // draft.presetIndex = parseInt(pId, 10);\n            // draft.controlId = parseInt(Object.keys(draft.data[TARGET_PRESET][pId][CONTROLS_DATA])[0], 10);\n\n            this.props.state.data = data;\n            this.props.state.onBusy({busy: false});\n        },\n        (n) => {\n            //TODO:\n            // console.log(\"handleMidiInputEvent\", n);\n            this.props.state.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    connectInput = port => {\n        if (port) {\n            if (port.hasListener(\"sysex\", 'all', this.handleMidiInputEvent)) {\n                console.log(`Midi.connectInput: sysex messages on all channels listener already connected`);\n            } else {\n                console.log(`Midi.connectInput: add listener for sysex messages on all channels`);\n                port.addListener(\"sysex\", 'all', this.handleMidiInputEvent);\n                console.log(\"connectInput: \", port.name);\n            }\n        }\n    };\n\n    disconnectInput = port => {\n        if (port) {\n            if (port.removeListener) port.removeListener();\n            console.log(`disconnectInput: input ${port.id} disconnected`);\n            // pacerPresent: WebMidi.inputs.findIndex(port => port.name.match(r2) != null) >= 0,\n            // if (port.name.match(new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i'))) {\n            //     this.setState({ pacerInputConnected: false })\n            // }\n        }\n    };\n\n    connectOutput = port => {\n        if (port) {\n            console.log(`connectOutput: output ${port.id} connected`);\n        }\n    };\n\n    disconnectOutput = () => {\n        console.log(`disconnectOutput: output disconnected`);\n    };\n\n    autoConnectInput = () => {\n        if (this.props.autoConnect) {\n            console.log(`Midi.autoConnectInput: autoConnect ${this.props.autoConnect}`);\n            if (!this.props.state.midi.input) {\n                for (let port of this.props.state.midi.inputs) {      //WebMidi.inputs) {\n                    if (port.type === 'input' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n                        console.log(`Midi.autoConnectInput: connect ${port.name}`);\n                        this.setState({input: port.id});\n                        this.props.state.midi.input = port.id;\n                        this.connectInput(port);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n\n    autoConnectOutput = () => {\n        if (this.props.autoConnect) {\n            console.log(`Midi.autoConnectOutput: autoConnect ${this.props.autoConnect}`);\n            if (!this.props.state.midi.output) {\n                for (let port of this.props.state.midi.outputs) {\n                    if (port.type === 'output' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n                        console.log(`Midi.autoConnectOutput: autoConnect: auto-connect ${port.name}`);\n                        this.props.state.midi.output = port.id;\n                        this.connectOutput(port);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n\n    registerInputs = () => {\n        this.props.state.midi.inputs = WebMidi.inputs.filter(port => port.name.match(new RegExp(this.props.only, 'i')) != null);\n        this.autoConnectInput();\n    };\n\n    registerOutputs = () => {\n        this.props.state.midi.outputs = WebMidi.outputs.filter(port => port.name.match(new RegExp(this.props.only, 'i')) != null);\n        this.autoConnectOutput();\n    };\n\n    unRegisterInputs = () => {\n        console.log(\"Midi.unRegisterInputs\");\n        this.disconnectInput(portById(this.props.state.midi.input));\n        this.props.state.midi.input = null;\n        this.props.state.midi.inputs = [];\n    };\n\n    unRegisterOutputs = () => {\n        console.log(\"Midi.unRegisterOutputs\");\n        this.disconnectOutput();\n        this.props.state.midi.output = null;\n        this.props.state.midi.outputs = [];\n    };\n\n    handleMidiConnectEvent = e => {\n        // console.group(`Midi: handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n        // TODO: is disconnect event, remove the existing input listeners\n        if (e.type === \"disconnected\") {\n            this.disconnectInput(e.port.id);\n            this.disconnectOutput();\n        }\n        if (e.port.name.match(new RegExp(this.props.only, 'i'))) {\n            if (e.port.type === 'input') {\n                // console.log(`ignore MIDI input connect event`);\n                // console.log(\"Midi.handleMidiConnectEvent: call registerInputs\");\n                this.registerInputs();\n            }\n            if (e.port.type === 'output') {\n                // console.log(\"Midi.handleMidiConnectEvent: call registerOutputs\");\n                this.registerOutputs();\n            }\n        } else {\n            console.log(`Midi.handleMidiConnectEvent: port ignored: ${e.port.name}`);\n        }\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n        // console.groupEnd();\n    };\n\n    selectInputPort = (event) => {\n        if (this.props.state.midi.input) {\n            this.disconnectInput(portById(this.props.state.midi.input));\n        }\n        const port = portById(event.target.value);\n        if (port) {\n            this.props.state.midi.input = port.id;\n            this.connectInput(port);\n        } else {\n            console.warn(\"selectInputPort: port not found\", event.target.value);\n        }\n    };\n\n    selectOutputPort = (event) => {\n        if (this.props.state.midi.output) {\n            this.disconnectOutput(portById(this.props.state.midi.output));\n        }\n        const port = portById(event.target.value);\n        if (port) {\n            this.props.state.midi.output = port.id;\n            this.connectOutput(port);\n        } else {\n            console.warn(\"selectOutputPort: port not found\", event.target.value);\n        }\n    };\n\n    midiOn = err => {\n        if (err) {\n            console.warn(\"Midi.midiOn: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"Midi.midiOn: WebMidi enabled\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n        }\n    };\n\n    componentDidMount() {\n        console.log(`Midi: component did mount: WebMidi.enabled=${WebMidi.enabled}`);\n        if (WebMidi.enabled) {\n            console.log(`Midi: component did mount: already enabled, register ports`);\n            this.registerInputs();\n            this.registerOutputs();\n        } else {\n            // console.log(\"Midi: component did mount: Calling WebMidi.enable\");\n            WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Midi: component will unmount: unregister ports\");\n        this.unRegisterInputs();\n        this.unRegisterOutputs();\n    }\n\n    render() {\n        return (\n            <div className=\"midi-ports\">\n                <div className=\"midi-port-label\">MIDI input:</div>\n                <select value={this.props.state.midi.input} onChange={this.selectInputPort}>\n                    <option value={0}>- select -</option>\n                    {this.props.state.midi.inputs.map(\n                        (port, index) => <option key={port.id} value={port.id}>{port.name}</option>\n                    )}\n                </select>\n                <div className=\"midi-port-label\">MIDI output:</div>\n                <select value={this.props.state.midi.output} onChange={this.selectOutputPort}>\n                    <option value={0}>- select -</option>\n                    {this.props.state.midi.outputs.map(\n                        (port, index) => <option key={port.id} value={port.id}>{port.name}</option>\n                    )}\n                </select>\n            </div>\n        );\n    }\n\n}\n\nexport default inject('state')(observer(Midi));\n","import React, {Fragment} from 'react';\nimport Switch from \"react-switch\";\n\nconst PortsGrid = ({ groupedPorts, clickHandler }) => {\n\n    // console.log(\"PortsGrid\", groupedPorts);\n\n    return (\n        <div className=\"ports-grid\">\n            {/*<div className=\"grid-header\">MIDI port</div>*/}\n            {/*<div className=\"grid-header\">IN</div>*/}\n            {/*<div className=\"grid-header\">OUT</div>*/}\n            {Object.keys(groupedPorts).map((name, index) =>\n                <div className=\"port\" key={index}>\n                    <div className=\"port-name\">{name}</div>\n                    {groupedPorts[name].input &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            in&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].input.id)}\n                                checked={groupedPorts[name].input.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].input.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                    {groupedPorts[name].output &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            out&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].output.id)}\n                                checked={groupedPorts[name].output.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].output.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                </div>\n            )}\n        </div>\n    );\n\n};\n\nexport default PortsGrid;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../pacer/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {dropOverlayStyle} from \"../utils/misc\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        data: null\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    hideBusy = (delay = 0) => {\n        if (delay < 1) {\n            this.props.onBusy({busy: false});\n        } else {\n            setTimeout(() => this.props.onBusy({busy: false}), delay);\n        }\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                    this.hideBusy();\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                            })\n                        );\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.hideBusy();\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n        {\n                // data: null,\n                dropZoneActive: false\n            },\n    () => {this.readFiles(files)});\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            // console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, dropZoneActive } = this.state;\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              messageType=\"sysex\"\n                              onMidiInputEvent={this.handleMidiInputEvent}>\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                Send a dump from your Pacer or<br />drag & drop a patch file here.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <DumpSysex data={data} />\n                        </div>\n\n                    </div>\n\n{/*\n                <div className=\"right-column\">\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n                </div>\n*/}\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React, {Component, Fragment} from 'react';\nimport {\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_TYPES_FULLNAME_MIDI_SORTED,\n    MSG_TYPES_DATA_HELP, TARGET_PRESET\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport {inject, observer} from \"mobx-react\";\nimport {state} from \"../stores/StateStore\";\nimport \"./MidiSettingsEditor.css\";\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select onChange={(event) => onChange(event.target.value)} value={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Setting = observer(({ index, config  }) => {\n\n    // console.log(\"Setting\", index, config.msg_type);\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"setting-row-header\">message {index}:</div>\n                <div>\n                    <select onChange={(event) => state.updateMidiSettings(index, \"msg_type\", null, event.target.value)} value={config.msg_type}>\n                        {MSG_TYPES_FULLNAME_MIDI_SORTED.map(v => <option key={v.key} value={v.key}>{v.value}</option>)}\n                    </select>\n                </div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if (config.msg_type === MSG_SW_NOTE) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => state.updateMidiSettings(index, \"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => state.updateMidiSettings(index, \"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => state.updateMidiSettings(index, \"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => state.updateMidiSettings(index, \"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => state.updateMidiSettings(index, \"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"setting-row-header\">Setting {index}:</div>\n            <div>\n                <select onChange={(event) => state.updateMidiSettings(index, \"msg_type\", null, event.target.value)} value={config.msg_type}>\n                    {MSG_TYPES_FULLNAME_MIDI_SORTED.map(v => <option key={v.key} value={v.key}>{v.value}</option>)}\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <select onChange={(event) => state.updateMidiSettings(index, \"channel\", null, event.target.value)} value={config.channel}>\n                    {Array.from(Array(17).keys()).map(i => <option key={i} value={i}>{i === 0 ? 'global' : i}</option>)}\n                </select>\n            </div>\n        </Fragment>\n    );\n});\n\nclass MidiSettingsEditor extends Component {\n\n    render() {\n\n        const settings = this.props.state.data[TARGET_PRESET][this.props.state.currentPreset][\"midi\"]\n\n        return (\n            <div className=\"settings\">\n                <div></div>\n                <div className=\"setting-col-header\">Type</div>\n                <div className=\"setting-col-header\">Data 1</div>\n                <div className=\"setting-col-header\">Data 2</div>\n                <div className=\"setting-col-header\">Data 3</div>\n                <div className=\"setting-col-header\">MIDI Ch.</div>\n                {Object.keys(settings).map(i =>\n                    <Setting key={i} index={i} config={settings[i]} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default inject('state')(observer(MidiSettingsEditor));\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport {\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport MidiSettingsEditor from \"../components/MidiSettingsEditor\";\nimport {dropOverlayStyle} from \"../utils/misc\";\nimport UpdateMessages from \"../components/UpdateMessages\";\nimport {inject, observer} from \"mobx-react\";\nimport ActionButtons from \"../components/ActionButtons\";\n\nclass PresetMidi extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropZoneActive: false\n        };\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.props.state.clear();\n        this.props.state.changed = true;\n        this.setState(\n            {dropZoneActive: false},\n            () => { this.props.state.readFiles(files) }   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n\n    render() {\n\n        const { dropZoneActive } = this.state;\n\n        const presetIndex = this.props.state.currentPreset;\n        const data = this.props.state.data;\n        const updateMessages = this.props.state.updateMessages;\n\n        let showEditor = false;\n\n        if (this.props.state.data) {\n            showEditor = (TARGET_PRESET in data) &&\n                         (presetIndex in data[TARGET_PRESET]) &&\n                         (\"midi\" in data[TARGET_PRESET][presetIndex]) &&\n                         (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16)\n        }\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n                    <div className=\"content\">\n{/*\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                You can click on a preset to only load this specific preset from the Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                Or you can use the ad-hoc button to read ALL the presets from the Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                You can also load a patch file or send a dump from the Pacer.\n                            </div>\n                        </div>\n*/}\n                        <div className=\"content-row-content first\">\n                            <h2>Presets</h2>\n                            <div className=\"row align-bottom\">\n                                <PresetSelector />\n                                <ActionButtons />\n                            </div>\n                        </div>\n\n                        {showEditor &&\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Preset MIDI settings</h2>\n                                <MidiSettingsEditor />\n                            </Fragment>\n                        </div>}\n\n                        {this.props.state.changed && this.props.state.midi.output &&         // FIXME: midiConnected(output) &&\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.props.state.updatePacer()}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                        </div>}\n\n                        {/*this.props.debug && showEditor &&\n                        <div className=\"content-row-content first\">\n                            <div className=\"debug\">\n                                <h4>[Debug] Update messages to send:</h4>\n                                <UpdateMessages messages={updateMessages} />\n                                <div className=\"dump code\">\n                                    {JSON.stringify(updateMessages, null, 4)}\n                                </div>\n                            </div>\n                        </div> */}\n\n                        <div className=\"content-row-content\">\n                            <UpdateMessages/>\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default inject('state')(observer(PresetMidi));\n","import React, {Component} from \"react\";\n\nclass Download extends Component {\n\n    handleClick = (event) => {\n\n        let url = window.URL.createObjectURL(new Blob([this.props.data], {type: \"application/octet-stream\"}));\n\n        let filename = this.props.filename;\n\n        if (this.props.addTimestamp) {\n            let now = new Date();\n            let timestamp =\n                now.getUTCFullYear() + \"-\" +\n                (\"0\" + (now.getUTCMonth() + 1)).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCDate()).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCHours()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCMinutes()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCSeconds()).slice(-2);\n            filename += '.' + timestamp;\n        }\n\n        let shadowlink = document.createElement(\"a\");\n        shadowlink.download = filename + \".syx\";\n        shadowlink.style.display = \"none\";\n        shadowlink.href = url;\n\n        document.body.appendChild(shadowlink);\n        shadowlink.click();\n        document.body.removeChild(shadowlink);\n\n        setTimeout(function() {\n            return window.URL.revokeObjectURL(url);\n        }, 1000);\n\n    };\n\n    render() {\n        return (\n            <button onClick={this.handleClick} className={this.props.className}>{this.props.label}</button>\n        );\n    }\n\n}\n\nexport default Download;\n","import React, {Component} from \"react\";\n\nclass DownloadJSON extends Component {\n\n    handleClick = (event) => {\n\n        const url = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(this.props.data));\n\n        // let url = window.URL.createObjectURL(new Blob([this.props.data], {type: \"application/octet-stream\"}));\n\n        let filename = this.props.filename;\n\n        if (this.props.addTimestamp) {\n            let now = new Date();\n            let timestamp =\n                now.getUTCFullYear() + \"-\" +\n                (\"0\" + (now.getUTCMonth() + 1)).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCDate()).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCHours()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCMinutes()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCSeconds()).slice(-2);\n            filename += '.' + timestamp;\n        }\n\n        let shadowlink = document.createElement(\"a\");\n        shadowlink.download = filename + \".json\";\n        shadowlink.style.display = \"none\";\n        shadowlink.href = url;\n\n        document.body.appendChild(shadowlink);\n        shadowlink.click();\n        document.body.removeChild(shadowlink);\n\n        setTimeout(function() {\n            return window.URL.revokeObjectURL(url);\n        }, 1000);\n\n    };\n\n    render() {\n        return (\n            <button onClick={this.handleClick} className={this.props.className}>{this.props.label}</button>\n        );\n    }\n\n}\n\nexport default DownloadJSON;\n","import React, {Component} from 'react';\nimport {produce} from \"immer\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump,\n    requestAllPresets,\n    splitDump\n} from \"../pacer/sysex\";\nimport {SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer/constants\";\nimport {outputById} from \"../utils/ports\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport Dropzone from \"react-dropzone\";\nimport Download from \"../components/Download\";\nimport {batchMessages, midiConnected} from \"../utils/midi\";\nimport {dropOverlayStyle, MAX_FILE_SIZE} from \"../utils/misc\";\nimport DownloadJSON from \"../components/DownloadJSON\";\nimport * as QueryString from \"query-string\";\nimport \"./Patch.css\";\n\nclass Patch extends Component {\n\n    // one data structure per preset\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,   // MIDI output port used for output\n            data: null,     // json\n            bytes: null,  // binary, will be used to download as .syx file\n            dropZoneActive: false,\n            status: null\n        };\n    }\n\n    clearData = () => {\n        this.setState({data: null, updateMessages: {}, changed: false});\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    hideBusy = (delay = 0) => {\n        if (delay < 1) {\n            this.props.onBusy({busy: false});\n        } else {\n            setTimeout(() => this.props.onBusy({busy: false}), delay);\n        }\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n\n            let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n\n            this.setState(\n                produce(\n                    draft => {\n\n                        // draft.bytes = new Uint8Array(bytes);\n                        // let bin_index = 0;\n\n                        let buffer = new Uint8Array(bytes);\n                        let bin_index = 0;\n\n                        for (let m of messages) {\n\n                            // draft.bytes.set(m, bin_index);\n                            buffer.set(m, bin_index);\n                            bin_index += m.length;\n\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n\n                        if (draft.bytes === null) {\n                            draft.bytes = buffer;\n                        } else {\n                            // merge sysex bytes\n                            const a = new Uint8Array(draft.bytes.length + buffer.length);\n                            a.set(draft.bytes);\n                            a.set(buffer, draft.bytes.length);\n                            draft.bytes = a;\n                        }\n\n                    }\n                )\n            );\n\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            // this.props.onBusy(false);\n            this.hideBusy();\n        },\n        (n) => {\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                    this.setState(\n                        produce(draft => {\n                            draft.status = {\n                                severity: \"error\",\n                                message: `The file ${file.name} is too big.`\n                            };\n                        })\n                    );\n                    this.hideBusy();\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                //draft.bytes = data;\n                                if (draft.bytes === null) {\n                                    draft.bytes = data;\n                                } else {\n                                    // merge sysex bytes\n                                    const a = new Uint8Array(draft.bytes.length + data.length);\n                                    a.set(draft.bytes);\n                                    a.set(data, draft.bytes.length);\n                                    draft.bytes = a;\n                                }\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.status = {\n                                    severity: \"info\",\n                                    message: `Patch file loaded: ${file.name}`\n                                };\n                            })\n                        );\n                    } else {\n                        this.setState(\n                            produce(draft => {\n                                draft.status = {\n                                    severity: \"error\",\n                                    message: `The file ${file.name} does not contain a patch (is not a binary sysex file)`\n                                };\n                            })\n                        );\n                    }\n                    this.hideBusy();\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        // noinspection JSIgnoredPromiseFromCall\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n            {\n                // data: null,\n                dropZoneActive: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = null;\n            })\n        );\n    };\n\n    sendSysex = (msg, bytesExpected = 0) => {\n        // console.log(\"sendSysex\", msg.length > 32 ? hs(msg.slice(0, 32)) + '...' : hs(msg), bytesExpected);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        if (bytesExpected > 0) this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        this.setState(\n            {\n                data: null,\n                bytes: null\n            },\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    /**\n     * Send the current data\n     * @param patch\n     */\n    sendPatch = () => {\n\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n\n        this.showBusy({busy: true, busyMessage: \"sending patch...\"});\n        splitDump(Array.from(this.state.bytes)).forEach(\n            msg => {\n                // console.log(\"sendPatch\", msg.length > 32 ? hs(msg.slice(0, 32)) + '...' : hs(msg));\n                out.sendSysex(SYSEX_SIGNATURE, msg);\n            }\n        );\n        this.hideBusy(1000);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { status, bytes, dropZoneActive } = this.state;\n        const output = this.props.state.midi.output;\n        const data = this.props.state.data;\n\n        const q =  QueryString.parse(window.location.search);\n        const debug = q.debug ? q.debug === '1' : false;\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            <div className=\"instruction\">\n                                Presets marked \"no data\" are ignored. They will NOT erase the preset config in your Pacer.\n                            </div>\n                            <div className=\"instruction\">\n                                A patch is a full dump of the Pacer.\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n\n                            <h2>Patch content:</h2>\n                            <div className=\"patch-content\">\n                            {\n                                Array.from(Array(24+1).keys()).map(\n                                index => {\n                                    let id = presetIndexToXY(index);\n                                    let show = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                                    let name = show ? data[TARGET_PRESET][index][\"name\"] : \"\";\n\n                                    if (index === 0) return null;\n\n                                    return (\n                                        <div key={index}>\n                                            {/*<div className=\"right-align\">{index}</div>*/}\n                                            <div>{id}</div>\n                                            {show ? <div>{name}</div> : <div className=\"placeholder\">no data</div>}\n                                        </div>\n                                    );\n                                })\n                            }\n                            </div>\n\n                            {status &&\n                            <div className={`status ${status.severity}`}>\n                                {status.message}\n                            </div>\n                            }\n\n                            <div className=\"patch-actions\">\n                                <div>\n                                    <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}} onChange={this.onChangeFile} />\n                                    <button onClick={this.onInputFile}>Load patch from file</button>\n                                </div>\n                                <div>\n                                    {midiConnected(output) && \"or\"}\n                                </div>\n                                <div>\n                                    {midiConnected(output) && <button onClick={() => this.sendSysex(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read patch from Pacer</button>}\n                                </div>\n                                <div>\n                                    {data && <Download data={bytes} filename={`pacer-patch`} addTimestamp={true} label=\"Save patch to file\" />}\n                                    {data && debug && <DownloadJSON data={data} filename={`pacer-patch`} addTimestamp={true} label=\"Save patch JSON to file\" className={\"space-left\"}/>}\n                                </div>\n                                <div>\n                                    {data && midiConnected(output) && \"or\"}\n                                </div>\n                                <div>\n                                    {data && midiConnected(output) && <button onClick={() => this.sendPatch()}>Send patch to Pacer</button>}\n                                </div>\n                            </div>\n\n                            {data && <div className=\"preset-buttons\">\n                                <button onClick={this.clearData}>CLEAR</button>\n                            </div>}\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n        );\n    }\n}\n\nexport default Patch;\n","import React, {Fragment} from \"react\";\nimport {\n    TARGET_PRESET,\n    STOMPSWITCHES_TOP,\n    STOMPSWITCHES_BOTTOM,\n    FOOTSWITCHES,\n    EXPPEDALS,\n    CONTROLS,\n    MSG_TYPES_DATA_HELP,\n    NOT_USED,\n    MSG_SW_NOTE,\n    COLORS,\n    COLORS_HTML, MSG_CTRL_OFF, CONTROL_MODES\n} from \"../pacer/constants\";\nimport {MessageSummary, presetIndexToXY} from \"../pacer/utils\";\nimport {STEPS_DATA} from \"../pacer/sysex\";\nimport {h} from \"../utils/hexstring\";\nimport * as Note from \"tonal-note\";\nimport {observer} from \"mobx-react\";\nimport {withRouter} from \"react-router-dom\";\nimport {state} from \"../stores/StateStore\";\n\n\nfunction hasMidiConfig(preset) {\n    if (preset && preset[\"midi\"]) {\n        for (let prop in preset.midi) {\n            const m = preset.midi[prop];\n            if (m.hasOwnProperty(\"msg_type\")) {\n                if (m.msg_type !== MSG_CTRL_OFF) return true;\n            }\n        }\n    }\n    return false;\n}\n\nconst Message = observer(({ message, hexDisplay }) => {\n\n    if (message === null || message === undefined || (message.constructor === Object && Object.keys(message).length === 0)) return null;\n\n    const t = message[\"msg_type\"];\n\n    // console.log(\"Message type\", t, message, message[\"msg_type\"], message.msg_type, JSON.stringify(message), typeof message, Object.keys(message));\n\n    const used = MSG_TYPES_DATA_HELP[t];\n    const data = message[\"data\"];\n\n    let d = [null, null, null];\n    for (let i=0; i<3; i++) {\n        if (used[i] === NOT_USED) continue;\n        d[i] = hexDisplay ? h(data[i]) : data[i];\n        if (i === 0 && t === MSG_SW_NOTE) {\n            d[i] += ' (' + Note.fromMidi(data[i], true) + ')';\n        }\n    }\n\n    let channel = '';\n    if (hexDisplay) {\n        channel = h(message[\"channel\"]);\n    } else {\n        channel = message[\"channel\"] === 0 ? 'global ch.' : `ch. ${message[\"channel\"]}`;\n    }\n\n    let colorOn = null;\n    let colorOff = null;\n    if (message[\"led_active_color\"] && message[\"led_inactive_color\"]) {\n        colorOn = message[\"led_active_color\"] === 127 ? 0x00 : message[\"led_active_color\"];\n        colorOff = message[\"led_inactive_color\"] === 127 ? 0x00 : message[\"led_inactive_color\"];\n    }\n    const displayColor = colorOn > 0 && colorOff > 0;\n\n    // console.log(message[\"led_active_color\"], message[\"led_inactive_color\"], colorOn, colorOff);\n\n    return (\n        <Fragment>\n            <div className=\"overview-message\">\n                <div className=\"overview-message-type\">{MessageSummary(message)}</div>\n            </div>\n            {message[\"msg_type\"] !== MSG_CTRL_OFF &&\n            <div className=\"overview-message-ch-colors\">\n                <div className=\"msg-midi-channel\">{channel}</div>\n                {displayColor &&\n                <div className=\"overview-step-color\">\n                    <div className=\"color-on\" style={{backgroundColor: COLORS_HTML[colorOn]}} title={COLORS[colorOn]}></div>\n                    <div className=\"color-off\" style={{backgroundColor: COLORS_HTML[colorOff]}} title={COLORS[colorOff]}></div>\n                </div>}\n            </div>}\n        </Fragment>\n    );\n});\n\nconst Step = observer(({ step, hexDisplay }) => {\n    if (step === null || step === undefined) return null;\n    if (step[\"active\"] === 0) return null;\n    return (\n        <div className=\"overview-step\">\n            <Message message={step} hexDisplay={hexDisplay} />\n        </div>\n    );\n});\n\nconst Control = withRouter(observer(({ history, presetIndex, controlIndex, control, hexDisplay, stompswitch=true } = {}) => {\n\n    const gotoPreset = () => {\n        state.selectPreset(presetIndex);\n        state.selectControl(controlIndex);\n        history.push('/preset');\n    }\n\n    if (control === null || control === undefined) return null;\n\n    if (!control[STEPS_DATA]) return null;\n\n    const n_active_steps = Object.keys(control[STEPS_DATA]).filter(n => control[STEPS_DATA][n][\"active\"]>0).length;\n\n    return (\n        <div className={`overview-control ${stompswitch?'stompswitch':''}`} onClick={gotoPreset} title=\"click to edit\">\n            <div className=\"control-header\">\n                <div className=\"control-name\">{CONTROLS[controlIndex]}</div>\n                {/*<div className=\"control-name\"><Link to=\"/preset\">{CONTROLS[id]}</Link></div>*/}\n                {n_active_steps > 1 && <div>{CONTROL_MODES[control[\"control_mode\"]]}</div>}\n            </div>\n            {Object.keys(control[STEPS_DATA]).map(n => <Step key={n} step={control[STEPS_DATA][n]} hexDisplay={hexDisplay} />)}\n        </div>\n    );\n\n}));\n\nconst Controls = observer(({ presetIndex, controls, hexDisplay, extControls }) => {\n    if (controls === null || controls === undefined) return null;\n    // console.log(\"Controls\", presetIndex, typeof presetIndex);\n    const props = {presetIndex, hexDisplay};\n    return (\n        <div className=\"overview-controls\">\n            {extControls && FOOTSWITCHES.map(controlId => <Control key={controlId} controlIndex={controlId} control={controls[controlId]} {...props} stompswitch={false} />)}\n            {extControls && EXPPEDALS.map(controlId => <Control key={controlId} controlIndex={controlId} control={controls[controlId]} {...props} stompswitch={false} />)}\n            <div></div>\n            {STOMPSWITCHES_TOP.map(controlId => <Control key={controlId} controlIndex={controlId} control={controls[controlId]} {...props} />)}\n            <div></div>\n            {STOMPSWITCHES_BOTTOM.map(controlId => <Control key={controlId} controlIndex={controlId} control={controls[controlId]} {...props} />)}\n        </div>\n    );\n});\n\nconst MidiSetting = observer(({ setting, hexDisplay }) => {\n    if (setting === null || setting === undefined) return null;\n    if (!setting[\"msg_type\"]) return null;\n    if (setting.msg_type === MSG_CTRL_OFF) return null;\n    return (\n        <div className=\"overview-midi\">\n            <Message message={setting} hexDisplay={hexDisplay} />\n        </div>\n    );\n});\n\nconst MidiSettings = observer(({ settings, hexDisplay }) => {\n    // console.log(\"MidiSettings\", settings);\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"overview-midi-settings\">\n            <div className=\"control-name\">MIDI</div>\n            {Object.keys(settings).map(i =>                     // TODO: .filter(msg_type !== MSG_CTRL_OFF)\n                <MidiSetting key={i} index={i} setting={settings[i]} hexDisplay={hexDisplay} />\n            )}\n        </div>\n    );\n});\n\nconst Preset = observer(({ index, data, hexDisplay, extControls }) => {\n    if (data === null || data === undefined) return null;\n    // console.log(\"Preset\", index, typeof index);\n    return (\n        <div className=\"overview-preset\">\n            <h3>{presetIndexToXY(parseInt(index, 10))}: <span className=\"bold\">{data[\"name\"]}</span></h3>\n            <Controls presetIndex={index} controls={data[\"controls\"]} hexDisplay={hexDisplay} extControls={extControls} />\n            {hasMidiConfig(data) && <MidiSettings settings={data[\"midi\"]} hexDisplay={hexDisplay} />}\n        </div>\n    );\n});\n\nconst Presets = observer(({ presets, hexDisplay, extControls }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div className=\"overview-presets\">\n            {Object.keys(presets).map(presetIndex => <Preset key={presetIndex} index={presetIndex} data={presets[presetIndex]} hexDisplay={hexDisplay} extControls={extControls} />)}\n        </div>\n    );\n});\n\nconst PresetOverview = observer(({ data, hexDisplay, extControls }) => {\n    if (data === null || data === undefined) return null;\n    // console.log(\"PresetOverview render\");\n    return (\n        <div className=\"overview\">\n            <Presets presets={data[TARGET_PRESET]} hexDisplay={hexDisplay} extControls={extControls} />\n        </div>\n    );\n});\n\nexport default PresetOverview;\n","import React, {Component} from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport PresetSelector from \"../components/PresetSelector\";\nimport Dropzone from \"react-dropzone\";\nimport {dropOverlayStyle} from \"../utils/misc\";\nimport PresetOverview from \"../components/PresetOverview\";\nimport ActionButtons from \"../components/ActionButtons\";\nimport \"./Overview.css\";\n\nclass Overview extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropZoneActive: false,\n            // decBase: true,  // true --> decimal base, false --> hex base for number\n            // extControls: true\n        };\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.props.state.clear();\n        this.props.state.changed = true;\n        this.setState(\n            { dropZoneActive: false },\n            () => {this.props.state.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        // const { presetIndex, data, output, dropZoneActive } = this.state;\n        const { dropZoneActive } = this.state;\n        const data = this.props.state.data;\n\n        return (\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n                    <div className=\"content\">\n\n                        <div className=\"content-row-content first\">\n                            <h2>Presets</h2>\n                            <div className=\"row align-bottom\">\n                                <PresetSelector />\n                                <ActionButtons />\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content\">\n                            <PresetOverview data={data} hexDisplay={!this.props.state.decBase} extControls={this.props.state.extControls} />\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n        );\n    }\n}\n\nexport default inject('state')(observer(Overview));\n","import React, {Component} from \"react\";\nimport {inject, observer} from \"mobx-react\";\n\nclass BusyIndicator extends Component {\n\n    render() {\n        const { busy, busyMessage, progress } = this.props.state;\n        return busy ?\n            <div className=\"busy\">\n                {busyMessage}\n                {/*{<span> {progress} %</span>}*/}\n                {progress >= 0 && <span> {progress} %</span>}\n            </div>\n            : null;\n    }\n\n}\n\nexport default inject('state')(observer(BusyIndicator));\n\n","import React, {Component} from 'react';\nimport {Provider} from \"mobx-react\";\nimport {state as globalState} from \"./stores/StateStore\";\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Debug from \"./pages/Debug\";\nimport Preset from \"./pages/Preset\";\nimport Monitor from \"./pages/Monitor\";\nimport Footer from \"./components/Footer\";\nimport Global from \"./pages/Global\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\nimport PresetMidi from \"./pages/PresetMidi\";\nimport Patch from \"./pages/Patch\";\nimport Overview from \"./pages/Overview\";\nimport Midi from \"./components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME} from \"./pacer/constants\";\nimport BusyIndicator from \"./components/BusyIndicator\";\nimport * as QueryString from \"query-string\";\nimport './App.css';\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <div className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </div>\n        )}\n    />\n);\n\nconst NoMatch = () =>\n    <div className=\"content home\">\n        <div className=\"error\">\n            Invalid URL\n        </div>\n    </div>;\n\n\nclass App extends Component {\n\n    render() {\n\n        const q =  QueryString.parse(window.location.search);\n        const debug = q.debug ? q.debug === '1' : false;\n\n        return (\n            <Provider state={globalState}>\n            <Router>\n                <div className=\"app\">\n\n                    <header className=\"header\">\n                        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Overview\" />\n                        <MenuLink to=\"/preset\" label=\"Preset Controls\" />\n                        <MenuLink to=\"/presetmidi\" label=\"Preset MIDI\" />\n                        <MenuLink to=\"/global\" label=\"Global\" />\n                        {/*<MenuLink to=\"/patch\" label=\"Patch\" />*/}\n                        <MenuLink to=\"/monitor\" label=\"Monitor\" />\n                        {debug && <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />}\n                        {debug && <MenuLink to=\"/debug\" label=\"Debug\" />}\n                        <MenuLink to=\"/help\" label=\"Help\" />\n                        <div className=\"spacer\"> </div>\n                        <div className=\"header-app-name\">\n                            Pacer editor {process.env.REACT_APP_VERSION} by <a href=\"https://studiocode.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">StudioCode.dev</a>\n                        </div>\n                    </header>\n\n                    <div className=\"subheader row\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME} />\n                        <BusyIndicator />\n                    </div>\n\n                    <Switch>\n                        <Route exact={true} path=\"/\" render={props => <Overview debug={debug}/>} />\n                        <Route path=\"/preset\" render={props => <Preset debug={debug}/>} />\n                        <Route path=\"/presetmidi\" render={props => <PresetMidi debug={debug} />} />\n                        <Route path=\"/global\" render={props => <Global debug={debug} />} />\n                        {/* <Route path=\"/patch\" render={props => <Patch debug={debug} />} /> */}\n                        {/* <Route path=\"/files\" render={props => <Files debug={debug} />} /> */}\n                        <Route path=\"/monitor\" render={props => <Monitor debug={debug}/>} />\n                        {debug && <Route path=\"/dumpdecoder\" render={props => <DumpDecoder debug={debug}/>} />}\n                        {debug && <Route path=\"/debug\" render={props => <Debug debug={debug} />} />}\n                        <Route exact={true} path=\"/help\" render={props => <Home />} />\n                        <Route component={NoMatch} />\n                    </Switch>\n{/*\n                    <div className=\"content-row-content first\">\n                        <DumpSysex data={globalState.data} />\n                    </div>\n*/}\n                    <Footer />\n                </div>\n            </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'mobx-react-lite/batchingForReactDom';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}